/*
 * Copyright (C) 2011-2018 Borog25 & Impereal
 *
 * Silver Break RPG
 * Last edit:	17/10/2018
 * Version:		3.5.0
 *
 * System requirements:
 *      - Microsoft Visual C++ 2015 Redistributable Package (x86)
 *      - Microsoft Visual C++ 2010 Redistributable Package (x86)
 *
 * Featured files:
 *		.../npcmodes/recordings/%RECORD_LIST%	- NPC recordings
 *		.../scriptfiles/gm_data/settings.cfg 	- Gamemode settings
 *		.../scriptfiles/gm_data/houses.cfg 		- Default Houses
 *		.../scriptfiles/admin_log/				- Admin logs
 *		.../scriptfiles/log/					- Logs
 *
 * Notes:
 *		Периодически проверять, надо ли активировать какие-то анимации в PreloadAnimLibs
 *		SetPlayerAttachedObject(playerid, 0, 19816, 1, 0.125, -0.17, 0.0, 0.0, 87.899978, 0.0, 1.317, 1.221, 1.2);
 */

#pragma dynamic 8192

//	Basis
#include <a_samp>
#include <a_http>

//	Sampctl dependencies
	//	Libs for plugins
#include <a_mysql>
#include <sscanf2>
#include <streamer>
#include <rustext>
#include <Pawn.CMD>
#include <FCNPC>
#include <crashdetect>
	//	Utils
#include <mxINI>
#include <foreach>

//	Libs
#include "lib/mapandreas"
#include "lib/timerfix"

//	Utils
#include "utils/extend_mdialog"
#include "utils/fixes"
#include "utils/t_time"
#include "utils/world_text"
#include "utils/space_utils"

SB_CancelSelectTextDraw(playerid)
{
	SetPVarInt(playerid, "CancelSelectTD", true);
	CancelSelectTextDraw(playerid);
	return true;
}
#if defined _ALS_CancelSelectTextDraw
	#undef CancelSelectTextDraw
#else
	#define _ALS_CancelSelectTextDraw
#endif
#define CancelSelectTextDraw	SB_CancelSelectTextDraw

//	Core
#include "core/colors"
#include "core/const_data"
#include "core/utils"
#include "core/sa_zones"
#include "core/vw_list"
#include "core/config"
#include "core/global_scope"

//	Modules
#include "anticheat/core"
#include "admin/core"

//	System
#include "system/gates"
#include "system/buttons"
#include "system/enterexit"
#include "system/combinations"
#include "system/attach"
#tryinclude "system/ucp_news"

//	Player
#include "player/core"
#include "player/chat/core"
#include "player/phone/core"
#tryinclude "player/achieve"
#tryinclude "player/chat_binds"

#include "inventory/core"	//	Inventory
#include "job/core"			//	Jobs
#include "faction/core"		//	Factions
#include "businesses/core"	//	Businesses
#include "house/core"		//	House
#include "vehicle/core"		//	Vehicle

//	Service
#tryinclude "service/casino"

//	Events
#include "events/races/core"

//	Interface
#include "interface/fader"
#include "interface/hint"
#include "interface/exp_line"
#include "interface/progress"
#include "interface/repbar"
#include "interface/mission"
#include "interface/visual_timer"
#include "interface/cam_effect"
#include "interface/hack_lock"
#include "interface/buy_menu"
#include "interface/select_menu"
#include "interface/selecter"
#include "interface/core"	

//--- player anims
stock BlockPlayerAnimation(playerid, bool:toggle)
{
	SetPVarInt(playerid, "System:Player:BlockAnim", toggle);
	return true;
}

stock MyApplyAnimation(playerid, const lib[], const name[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 1)
{
	if(GetPVarInt(playerid, "System:Player:BlockAnim"))	return false;
	if(gPlayerUsingLoopingAnim[playerid])	StopLoopingAnim(playerid);
	return ApplyAnimation(playerid, lib, name, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock LoopingAnim(playerid, const lib[], const name[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 1)
{
	if(MyApplyAnimation(playerid, lib, name, fDelta, loop, lockx, locky, freeze, time, forcesync))
	{
		ShowPlayerHint(playerid, "Используйте ~y~пробел ~w~чтобы остановить анимацию");
    	gPlayerUsingLoopingAnim[playerid] = true;
    	return true;
	}
	return false;
}

stock StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = false;
	return ClearAnimations(playerid);
}

stock MySetPlayerMarkerForPlayer(playerid, showplayerid, color, bool:oversee = false)
{
	if(InMask[showplayerid])
	{
		if(oversee)
			SetPlayerMarkerForPlayer(playerid, showplayerid, color);				// Игрок скрывается, но его видно
		else
			SetPlayerMarkerForPlayer(playerid, showplayerid, color & 0xFFFFFF00);	// Игрок скрывается и его не видно
	}
	else
		SetPlayerMarkerForPlayer(playerid, showplayerid, color);		// Игрок не скрывается и его видно
}

Public: MyGivePlayerParachute(playerid)
{
	MyGivePlayerWeapon(playerid, 46, 1);
}

//  генерация раномной строки
stock generateCode(size = MAX_CODE_SIZE)
{
	new stmp[MAX_CODE_SIZE];
	for(new i = 0; i < size; i++)
	{
		if(!random(2))	stmp[i] = '0' + random(10);
		else			stmp[i] = 'A' + random(26);
	}
	return stmp;
}

stock BlockPlayerAction(playerid, block)
{
	if(block == BLOCK_NONE)	gBlockAction[playerid] = BLOCK_NONE;
	else 					gBlockAction[playerid] |= block;
}

//	FIX
Public: MyFreezePlayer(playerid)
{
	return TogglePlayerControllable(playerid, false);
}

Public: MyUnfreezePlayer(playerid)
{
	// PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	return TogglePlayerControllable(playerid, true);
}

Public: FixPlayerFreeze(playerid)
{
	if(IsPlayerControllable(playerid))
	{
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid);
	}
	return true;
}

stock ReturnActorName(actorid)
{
	new actorname[MAX_PLAYER_NAME];
	for(new i = 0; i < sizeof(ACTOR); i++)
	{
		if(ACTOR[i] == actorid)
			format(actorname, sizeof(actorname), "%s", ActorInfo[i][a_Name]);
	}
	return actorname;
}

stock GetPlayerUsername(plid)
{
    new query[128], plname[MAX_PLAYER_NAME];
    format(query, sizeof(query), "SELECT `username` FROM `players` WHERE `id` = '%d'", plid);
	new Cache:result = mysql_query(g_SQL, query);
	cache_get_value_index(0, 0, plname);
	cache_delete(result);
	return plname;
}

GetPlayerCoins(playerid)
{
	new query[128],
		Cache:result,
		coins;

	mysql_format(g_SQL, query, sizeof query, "SELECT `coins` FROM %s.`ucp_account_links` WHERE `id` = '%d'", MAIN_DB, PlayerInfo[playerid][pUserID]);
	result = mysql_query(g_SQL, query);
	cache_get_value_name_int(0, "coins", coins);
	cache_delete(result);
	return (coins);
}

stock SetPlayerCoins(playerid, coins)
{
    new query[128];
	
	mysql_format(g_SQL, query, sizeof query, "UPDATE %s.`ucp_account_links` SET `coins` = '%d' WHERE `id` = '%d'", MAIN_DB, coins, PlayerInfo[playerid][pUserID]);
	mysql_query(g_SQL, query);
	return (cache_affected_rows() ? true : false);
}

stock GivePlayerCoins(playerid, coins)
{
	new query[128];

	if(coins > 0)
		format(query, 32, "~y~+%d coins", coins);
	else
		format(query, 32, "~r~%d coins", coins);
	GameTextForPlayer(playerid, query, 3000, 4);
	mysql_format(g_SQL, query, sizeof query, "UPDATE %s.`ucp_account_links` SET `coins` = `coins` + '%d' WHERE `id` = '%d'", MAIN_DB, coins, PlayerInfo[playerid][pUserID]);
	mysql_query(g_SQL, query);
	PlayerPlaySound(playerid, 30801, 0.0, 0.0, 0.0);
	return (cache_affected_rows() ? true : false);
}

stock UpdatePlayerCoins(playerid)
{
	new string[32];
	format(string, sizeof(string), "Coins: %d", GetPlayerCoins(playerid));
	return PlayerTextDrawSetString(playerid, StatusCoins, string);
}

GetPlayerHunger(playerid)
{
	return PlayerInfo[playerid][pHunger];
}

SetPlayerHunger(playerid, hunger)
{
	if(0 <= hunger <= 100)
	{
		PlayerInfo[playerid][pHunger] = hunger;
		IFace.HungerUpdate(playerid);
	}
	return true;
}

GivePlayerHunger(playerid, hunger)
{
	if(PlayerInfo[playerid][pHunger] + hunger > 100)	PlayerInfo[playerid][pHunger] = 100;
	else if(PlayerInfo[playerid][pHunger] + hunger < 0)	PlayerInfo[playerid][pHunger] = 0;
	else PlayerInfo[playerid][pHunger] += hunger;
	IFace.HungerUpdate(playerid);
	return true;
}

//	Возвращает 1 - если просто поел, -1 - если рыгнул, 0 - если не поел так как заблокированы анимации (например в наручниках)
EatPlayer(playerid, count, const msg[] = "")
{
	new hunger = GetPlayerHunger(playerid);
	if(hunger < 100)
	{
		if(MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0))
		{
			if(strlen(msg))
				PlayerAction(playerid, msg);
			GivePlayerHunger(playerid, count);
			count -= (100 - hunger);
		}
		else return 0;
	}
	if(count > 0)
	{
		if(MyApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0))
		{
			PlayerAction(playerid, "рыгает от объедания.");
			return -1;
		}
		else return 0;
	}
	return 1;
}

stock ToggleNameTags(playerid, bool:toggle)
{
    pNameTags[playerid] = toggle;
    if(toggle)
    {// Показать ники всех
		foreach(LoginPlayer, i) if(!InMask[i]) ShowPlayerNameTagForPlayer(playerid, i, true);
	    GameTextForPlayer(playerid, "~w~Nametags ~g~on", 5000, 5);
    }
    else
    {// Скрыть
		foreach(LoginPlayer, i) ShowPlayerNameTagForPlayer(playerid, i, false); // Скрыть ники всех
	    GameTextForPlayer(playerid, "~w~Nametags ~r~off", 5000, 5);
		// Помимо этого надо скрывать ники тех, кто зашел
    }
}

//	Money
stock GivePlayerBank(playerid, Float:amount)
{
	PlayerInfo[playerid][pBank] += amount;
}

stock GivePlayerCrimeWage(playerid, Float:amount)
{
	PlayerInfo[playerid][pCrimeWage] += amount;
}

//	============================================

stock AskPlayer(playerid, giveplayerid, asktype, waittime = 30)
{
	if(AskWhat[giveplayerid] != ASK_NONE && AskPrimory[asktype] <= AskPrimory[ AskWhat[giveplayerid] ]){
		return false;
	}
	strput(AskOffer[giveplayerid], ReturnPlayerName(playerid));
	AskOfferID[giveplayerid] = playerid;
	AskTime[giveplayerid] = waittime;
	AskWhat[giveplayerid] = asktype;
	return true;
}

StopAsking(giveplayerid)
{
	AskOffer[giveplayerid] = "";
	AskOfferID[giveplayerid] = -1;
	AskAmount[giveplayerid] = 0;
	AskAmount2[giveplayerid] = 0;
	AskAmount3[giveplayerid] = 0;
	AskAmount4[giveplayerid] = 0;
	AskTime[giveplayerid] = 0;
	AskWhat[giveplayerid] = ASK_NONE;
	return 1;
}

stock RestartServer(time = 0)
{
	if(time == 0)
	{
		foreach(Player, i)
		{
			SetPlayerInterior(i, 0);
			SetPlayerCameraPos(i, 1887.5, -1457.5, 42.0);
			SetPlayerCameraLookAt(i, 1678.7, -1283.2, 139.5);
			GameTextForPlayer(i, RusText("~b~Рестарт", isRus(i)), 3000, 3);

		    if(RESTSPAWNDROP)
		    {
		    	PlayerInfo[i][pPosX] = 0.0;
		    	PlayerInfo[i][pPosY] = 0.0;
	        }
	        gPlayerDisconnecting[i] = true;
		    UpdatePlayerStatics(i);
		    gPlayerLogged[i] = false;
		    StopAudioStreamForPlayer(i);
		    MyHidePlayerDialog(i);
		    MyDisablePlayerCheckpoint(i);
		}
		foreach(Vehicle, v)
		{
		    if(CarInfo[v][cID] > 0)
		    	UpdateVehicleStatics(v);
		}
		print("\nServer is restarting...");
		SendRconCommand("gmx");
	}
	else RestTime = time;
}

stock GetWeekDay(day = 0, month = 0, year = 0)
{
	if(day == 0 && month == 0 && year == 0) getdate(year, month, day);
	if(day == 0 || month == 0 || year == 0) return 0;
	//-
	new dayM = 2, monthM = 1, yearM = 2012;
	new days = GetDaysFromDate(dayM, monthM, yearM, day, month, year);
	return days%7 + 1;
}

stock GetDaysFromDate(dayM, monthM, yearM, day = 0, month = 0, year = 0)
{
	new days, bool:change;
	new DaysInMonth[] = {31,28,31,30,31,30,31,31,30,31,30,31};
	//-
	if(!(0 < dayM <= DaysInMonth[monthM-1]) || !(0 < monthM < 12) || !(1989 <= yearM <= 2099)) return -1;
	if(day == 0 && month == 0 && year == 0) getdate(year, month, day);
	//-
	if(yearM > year) change = true;
	else if(yearM == year)
	{
	    if(monthM > month) change = true;
	    else if(monthM == month)
	    {
	        if(dayM > day) change = true;
	    }
	}
	//-
	if(change)
	{
	    new x;
	    x = day;
	    day = dayM;
	    dayM = x;
	    //
	    x = month;
	    month = monthM;
	    monthM = x;
	    //
	    x = year;
	    year = yearM;
	    yearM = x;
	}
	//-
	for(new a = yearM; a < year; a++)// Code 3
	{
	    if(a == (a/4)*4) days++;
	    days += 365;
	}
	for(new b = monthM; b < month; b++)
	{
	    if(b == 2 && year == (year/4)*4) days++;
	    days += DaysInMonth[b-1];
	}
	days += day-dayM;
	return days;
}

//  Warehouses  //
LoadWarehouses()
{
	new count = 0;

	// Загрузка данных //
	new Cache:result = mysql_query(g_SQL, "SELECT * FROM `warehouses`");
	for(new i = 0; i < cache_num_rows(); i++)
	{
		new faction;
		cache_get_value_index_int(i, 0, faction);// faction (primary key)
		if(0 < faction < sizeof(Faction))
		{
		    new field = 1;
		    cache_get_value_index_int(i, field++, Warehouse[faction][WH_MONEY]);
		    cache_get_value_index_int(i, field++, Warehouse[faction][WH_DRUGS]);
		    cache_get_value_index_int(i, field++, Warehouse[faction][WH_MATS]);
		    for(new s = 0; s < WH_GUN_MAX; s++)
		    {
		        cache_get_value_index_int(i, field++, Warehouse[faction][WH_GUN][s]);
		    }
		    Warehouse[faction][WH_LOADED] = true; count++;
		}
		else
		{
			printf( "  WARNING! Unknown faction(%d) from `warehouses` (database)!", i);
			continue;
		}
	}
	cache_delete(result);

	return count;
}

stock GetWarehouseWeaponid(slot)
{
	switch(slot)
	{
	    case 0: return 23; // Silenced 9mm
	    case 1: return 24; // Desert Eagle
	    case 2: return 25; // Shotgun
	    case 3: return 29; // MP5
	    case 4: return 30; // AK-47
	    case 5: return 31; // M4
	    case 6: return 33; // Connty Rifle
	    case 7: return 34; // Sniper Rifle
	    case 8: return 35; // RPG
	}
	return 0;
}
stock GetWarehouseWeaponSlot(weaponid)
{
	switch(weaponid)
	{
	    case 23: return 0; // Silenced 9mm
	    case 24: return 1; // Desert Eagle
	    case 25: return 2; // Shotgun
	    case 29: return 3; // MP5
	    case 30: return 4; // AK-47
	    case 31: return 5; // M4
	    case 33: return 6; // Connty Rifle
	    case 34: return 7; // Sniper Rifle
	    case 35: return 8; // RPG
	}
	return -1;
}

SaveWarehouse(faction)
{
	if(0 < faction < sizeof(Faction))
	{
		new query[512];

		// Создать запись (при отсутствии) //
	    if(Warehouse[faction][WH_LOADED] == false)
	    {
			format(query, sizeof(query), "INSERT INTO `warehouses` SET `faction` = '%d'", faction);
			mysql_query_ex(query);
			Warehouse[faction][WH_LOADED] = true;
	    }

		// Обновить запись //
		format(query, sizeof(query), "UPDATE `warehouses` SET `money` = '%d', `drugs` = '%d', `mats` = '%d',\
									 `gun_23` = '%d', `gun_24` = '%d', `gun_25` = '%d', `gun_29` = '%d',\
									 `gun_30` = '%d', `gun_31` = '%d', `gun_33` = '%d', `gun_34` = '%d',\
									 `gun_35` = '%d' WHERE `faction` = '%d'",
								  	 Warehouse[faction][WH_MONEY], Warehouse[faction][WH_DRUGS], Warehouse[faction][WH_MATS],
									 Warehouse[faction][WH_GUN][0], Warehouse[faction][WH_GUN][1], Warehouse[faction][WH_GUN][2], Warehouse[faction][WH_GUN][3],
									 Warehouse[faction][WH_GUN][4], Warehouse[faction][WH_GUN][5], Warehouse[faction][WH_GUN][6], Warehouse[faction][WH_GUN][7],
									 Warehouse[faction][WH_GUN][8], faction);
		mysql_query_ex(query);

		// Интерактивное обновление объектов
		UpdateWarehouse(faction);
	}
	return true;
}

stock UpdateWarehouse(faction)
{// В разработке [BT]
	return faction;
}

stock GetFactionMoney(faction)
{
	if(0 < faction < sizeof(Faction))
	{
	    return Warehouse[faction][WH_MONEY];
	}
	return 0;
}

stock GiveFactionMoney(faction, money)
{
	if(0 < faction < sizeof(Faction))
	{
	    Warehouse[faction][WH_MONEY] += money;
	    SaveWarehouse(faction);
	}
}

//----
SetPlayerInJail(playerid, spawn = true)
{
	PlayerInfo[playerid][pJailTime] = -GetPlayerWantedLevel(playerid);
	if(CriminalDanger[playerid]) PlayerInfo[playerid][pJailTime] -= 1;
	MySetPlayerWantedLevel(playerid, 0);
	MySetPlayerSpawnPos(playerid, 264.6, 77.6, 1001.0, 270.0, 6, VW_LSPD);
	UpdatePlayerStatics(playerid);
	if(spawn) MySpawnPlayer(playerid);	// Spawn player right now!
	return true;
}

ShowPlayerPrisonTime(playerid)
{
	p_PrisonTimer{playerid} = true;
}

HidePlayerPrisonTime(playerid)
{
	p_PrisonTimer{playerid} = false;
	HidePlayerVisualTimer(playerid);
}

Public: PrisonCycle(playerid, step)
{
	switch(step)
	{
	    case 0:
	    {	// Вид на ЛСПД
	    	SetPVarInt(playerid, "PrisonCycle", 1);
	        TogglePlayerSpectating(playerid, 1);
			SetPlayerInterior(playerid, 0);
			GameTextForPlayer(playerid, " ", 1000, 4);
			MySetPlayerPos(playerid,1506.7561,-1668.6215,14.0469,270.0);
			IFace.ToggleGroup(playerid, IFace.TV_EFFECT, true);
			TogglePlayerControllable(playerid, false);
			SetPlayerCameraPos(playerid, 1545.2393, -1676.6, 19.4898);
			SetPlayerCameraLookAt(playerid, 1546.2374, -1676.6, 19.3147);
			SetPVarInt(playerid, "Prison:FlyCamera:Timer", SetTimerEx("PrisonCycle", 1000, false, "dd", playerid, step + 1));
	    }
	    case 1:
	    {	// Отдаление от участка
		    TogglePlayerControllable(playerid, true);
			InterpolateCameraPos(playerid, 1545.2393, -1676.6, 19.4898, 1510.4630, -1676.6, 29.02, 4000);
			InterpolateCameraLookAt(playerid, 1546.2374, -1676.6, 19.3147, 1511.4611, -1676.6, 28.72, 4000);
			SetPVarInt(playerid, "Prison:FlyCamera:Timer", SetTimerEx("PrisonCycle", 5000, false, "dd", playerid, step+1));
	    }
	    case 2:
	    {	// Полет на порт
			InterpolateCameraPos(playerid, 1510.4630, -1676.6162, 29.0200, 2842.2944, -2374.2776, 48.3854, 15000);
			InterpolateCameraLookAt(playerid, 1511.4611, -1676.6133, 28.7200, 2841.7234, -2375.0947, 48.1456, 15000);
			SetPVarInt(playerid, "Prison:FlyCamera:Timer", SetTimerEx("PrisonCycle", 17000, false, "dd", playerid, step+1));
	    }
	    case 3:
	    {	// Полет на алькатрас
			InterpolateCameraPos(playerid, 2842.2944, -2374.2776, 48.3854, 734.5543, -2735.6038, 12.0833, 15000);
			InterpolateCameraLookAt(playerid, 2841.7234, -2375.0947, 48.1456, 733.6075, -2735.9241, 11.8982, 15000);
			SetPVarInt(playerid, "Prison:FlyCamera:Timer", SetTimerEx("PrisonCycle", 17000, false, "dd", playerid, step+1));
	    }
	    case 4:
	    {
	    	MySetPlayerSkin(playerid, JailSkins[ random( sizeof JailSkins - 1 )]);	//	даем тюремный скин
	    	SetPlayerPrisonPos(playerid, 0);
	    	TogglePlayerSpectating(playerid, 0); // Спаун
		}
		case 5:
		{
			FadeColorForPlayer(playerid, 255, 255, 255, 255, 255, 255, 255, 0, 10);
			SetPVarInt(playerid, "Prison:FlyCamera:Timer", SetTimerEx("PrisonCycle", 2000, false, "dd", playerid, step+1));
		}
		case 6:
		{
			SetPlayerFacingAngle(playerid, 180.0);
			SetPVarInt(playerid, "Prison:FlyCamera:Timer", SetTimerEx("PrisonCycle", 1000, false, "dd", playerid, step+1));
		}
		case 7:
		{
			FadeColorForPlayer(playerid, 255, 255, 255, 255, 255, 255, 255, 0, 10);
			SetPVarInt(playerid, "Prison:FlyCamera:Timer", SetTimerEx("PrisonCycle", 2000, false, "dd", playerid, step+1));
		}
		case 8:
		{
			SetPVarInt(playerid, "PrisonCycle", 2);
			FadeColorForPlayer(playerid, 0, 0, 0, 0, 0, 0, 0, 255, 20);
		}
	}
}

stock IsPlayerInPaynSpray(playerid)
{
    for(new p = 0; p < sizeof(paynspray); p++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 10.0, paynspray[p][0], paynspray[p][1], paynspray[p][2])) return true;
    }
    return false;
}

//---
ReturnDate()
{
	new string[16];
	new year,month,day;
	getdate(year,month,day);
	format(string,16,"%02d/%02d/%04d",day,month,year);
	return string;
}

ReturnTime()
{
	new string[10];
	new hour,minute,second;
	gettime(hour,minute,second);
	format(string,10,"%02d:%02d",hour,minute);
	return string;
}

stock MySetPlayerPosFade(playerid, fadeid, Float:x, Float:y, Float:z, Float:a = 0.0, bool:freeze = false, interior = 0, virt = 0)
{
    fade_Teleporting[playerid] = 1;
	fade_TPToPos[playerid][0] = x;	fade_TPToPos[playerid][1] = y;	fade_TPToPos[playerid][2] = z;
	if(a == -1)	GetPlayerFacingAngle(playerid, fade_TPToPos[playerid][3]);
	else		fade_TPToPos[playerid][3] = a;
	fade_Freeze[playerid] = freeze;
	fade_Interior[playerid] = interior;
	fade_VirtualWorld[playerid] = virt;
	Fade_TeleportID[playerid] = fadeid;
	TogglePlayerControllable(playerid, false);
	return FadeColorForPlayer(playerid, 0, 0, 0, 0, 0, 0, 0, 255, 10, FADE_TELEPORT);
}

stock UpdatePlayerRadio(playerid)
{
	new string[128];
	new radio = GetPVarInt(playerid, "Thing:RadioID");
	if(radio == 0)
	{
		// Если в машине играет радио
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid > 0 && VehInfo[vehicleid][vRadio] > 0)
		{
			PlayAudioStreamForPlayer(playerid, RadioList[ VehInfo[vehicleid][vRadio] - 1 ][RADIO_URL]);
			PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);// fix
		}
		else
		{
			StopAudioStreamForPlayer(playerid);
			GameTextForPlayer(playerid, "~r~Radio OFF", 5000, 6);
		}
    }
    else
    {
		PlayAudioStreamForPlayer(playerid, RadioList[radio - 1][RADIO_URL]);
		PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);	// fix
		format(string, 128, "~g~%s", RadioList[radio - 1][RADIO_NAME]);
		GameTextForPlayer(playerid, string, 5000, 6);
    }
	return true;
}

//---
IsPlayerAtGasStation(playerid)
{
    for(new i = 0; i < sizeof(FillPos); i++)
    {
    	if(IsPlayerInRangeOfPoint(playerid, 10.0, Arr3<FillPos[i]>))
    	{
    		return true;
    	}
    }
    return false;
}

IsAtCarSellPlace(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 25.0, -1786.7600,1205.1584,24.8255) // Bonus place - high price
	|| IsPlayerInRangeOfPoint(playerid, 25.0, 2131.8499,-1150.9371,24.1029) || IsPlayerInRangeOfPoint(playerid, 35.0, 541.3572,-1293.3917,17.2422)
	|| IsPlayerInRangeOfPoint(playerid, 25.0, -1649.2346,1209.3027,7.2500) || IsPlayerInRangeOfPoint(playerid, 25.0, -1961.7168,288.5224,35.4688))
		return true;
	else return false;
}

IsPlayerAtParkPlace(playerid)
{
	if(GetPVarInt(playerid, "Player:InGreenZone") || IsAtCarSellPlace(playerid) || IsPlayerInRangeOfPoint(playerid, 25.0, -217.0, 1211.8, 19.9))
	{
		return false;
	}
	return true;
}

//	Offline Server Messages
stock SendOfflineMessage(userid, const text[])
{
	new query[256];
	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `offline_message` (`user_id`, `message`, `date`) VALUES('%d', '%s', UNIX_TIMESTAMP())", userid, text);
	mysql_query_ex(query);
}

Admin_Log(string[])
{
	new day, month, year;
	getdate(year, month, day);
	new hour, minute, second;
	gettime(hour, minute, second);
	new message[256];
	format(message, 256, "admin_log/%02d.%02d.%04d.log", day, month, year);
	new File:hFile = fopen(message, io_append);
	format(message, 256, "[%02d:%02d:%02d] %s\r\n", hour, minute, second, string);
	fwriterus(hFile, message);
	fclose(hFile);
	return true;
}

IsPlayerInJail(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(261.0 <= X <= 266.7 && 74.5 <= Y <= 89.5 && 999.4 <= Z < 1003.85) return true;
	else return false;
}

SendRemainingBanTime(playerid, banunix)
{
	new string[128];
	new days, hours, minutes;
	new bantime = banunix - gettime();
	format(string, 128, "До разбана осталось:");
	// Дни
    new dayunix = 24*60*60;
	if(bantime >= dayunix)
	{
		days = bantime / dayunix;
		bantime -= days * dayunix;
		format(string, 128, "%s %d дней", string, days);
	}
	// Часы
    new hourunix = 60*60;
	if(bantime >= hourunix)
	{
		hours = bantime / hourunix;
		bantime -= hours * hourunix;
		format(string, 128, "%s %d часов", string, hours);
	}
	// Минуты
	new minuteunix = 60;
	if(bantime >= minuteunix)
	{
		minutes = bantime / minuteunix;
		bantime -= minutes * minuteunix;
		format(string, 128, "%s %d минут", string, minutes);
	}
	SendClientMessage(playerid, COLOR_SERVER, string);
}

Public: UpdatePlayerWeather(playerid)
{
	if(FirstSpawn[playerid] == false && UseDrugsTime[playerid] <= 0)
 	{
 		new vw = GetPlayerVirtualWorld(playerid);
 		if(GetPlayerInterior(playerid) || vw == VW_AIRPORT)
 				SetPlayerWeather(playerid, 3);
	    else 	SetPlayerWeather(playerid, NowWeather);
    	return false;
    }
    return true;
}

UpdateWeather(weatherid = 0)
{
	if(weatherid == 0)
	{
		if(random(100) < 10)
		{
			new const wlist[] = { 8, 9, 16, 19, 20 };
			NowWeather = wlist[random(sizeof(wlist))];
		}
		else
		{
			new const wlist[] = { 1, 2, 3, 4 , 5, 6 , 7, 10, 11, 12, 13, 14, 15, 17, 18 };
			NowWeather = wlist[random(sizeof(wlist))];
		}
	}
    else NowWeather = weatherid;
	foreach(Player, i)	UpdatePlayerWeather(i);
	return true;
}

stock MyCreateNPC(name[], script[] = "")
{
    #if defined _FCNPC_included
        #pragma unused script
		return FCNPC_Create(name);
	#elseif defined RNPC_VERSION
		#pragma unused script
		return ConnectRNPC(name);
	#else
	    //ConnectNPC(name, script);
	    return -1;
	#endif
}

stock GetRandomModel()
{
	for(new i = 0; i < 100; i++)
	{
	    new idx = random(sizeof(VehParams));
	    if(VehParams[idx][VEH_CLASS] == VC_SPECIAL) continue;
	    if(VehParams[idx][VEH_DONATE] == true) continue;
		switch(VehParams[idx][VEH_MTYPE])
		{
		    case MTYPE_TRUCK, MTYPE_BOAT, MTYPE_PLANE, MTYPE_HELIC:	continue;
		}
		return idx + 400;
	}
	return 0;
}

stock GetRandomVehicle(playerid, Float:MaxDist = FLOAT_INFINITY)
{// Возвращает vehicleid, доступную для угона или миссии (закрытую)
    new vehlist[MAX_VEHICLES], idx = 0;
    new Float:X, Float:Y, Float:Z;
	foreach(Vehicle, v)
	{
	    if(VehInfo[v][vLocked] == 999) continue;
	    if(CarInfo[v][cType] == C_TYPE_DEFAULT && CarInfo[v][cOwnerID] == INVALID_PLAYER_ID && CarInfo[v][cOwnerID] == INVALID_PLAYER_ID && VehInfo[v][vPlayers] == 0)
	    {
	        GetVehiclePos(v, X, Y, Z);
		    if(100 < GetDistanceFromMeToPoint(playerid, X, Y, Z) < MaxDist)
		    {
		        vehlist[idx++] = v;
		    }
	    }
	}
	return vehlist[random(idx)];
}

Public: MyMoveObject(objectid, Float:X, Float:Y, Float:Z, Float:Speed, Float:RotX, Float:RotY, Float:RotZ)
{
	return MoveObject(objectid, X, Y, Z, Speed, RotX, RotY, RotZ);
}

Public: MyMoveDynamicObject(objectid, Float:X, Float:Y, Float:Z, Float:Speed, Float:RotX, Float:RotY, Float:RotZ)
{
	return MoveDynamicObject(objectid, X, Y, Z, Speed, RotX, RotY, RotZ);
}

Public: RerotObject(objectid, Float:RotX, Float:RotY, Float:RotZ, Float:Speed)
{
	new Float:X, Float:Y, Float:Z;
	GetDynamicObjectPos(objectid, X, Y, Z);
	return MoveDynamicObject(objectid, X, Y, Z - 0.1, Speed, RotX, RotY, RotZ);
}

Public: PrisonGateMove(gateid, bool:status)
{
	new const Float:Speed = 2.4;
    switch(gateid)
    {
        case 0:
        {	// Ворота к площадке
            if(status) 	MoveDynamicObject(PrisonGate[gateid], 550.359, -2748.300, 14.600, Speed);
            else 		MoveDynamicObject(PrisonGate[gateid], 540.359, -2748.300, 14.600, Speed);
        }
        case 1:
        {	// Ворота к тюремным блокам
            if(status) 	MoveDynamicObject(PrisonGate[gateid], 551.429, -2721.300, 14.600, Speed);
            else 		MoveDynamicObject(PrisonGate[gateid], 551.429, -2731.300, 14.600, Speed);
        }
        case 2:
        {	// Ворота к столовой
            if(status) 	MoveDynamicObject(PrisonGate[gateid], 530.580, -2714.209, 14.600, Speed);
            else 		MoveDynamicObject(PrisonGate[gateid], 540.580, -2714.209, 14.600, Speed);
        }
        case 3:
        {	// Ворота к верт.площадке
            if(status) 	MoveDynamicObject(PrisonGate[gateid], 537.320, -2818.209, 14.600, Speed);
            else 		MoveDynamicObject(PrisonGate[gateid], 547.320, -2818.209, 14.600, Speed);
        }
        case 4:
        {	// Ворота к комнате охраны
            if(status) 	MoveDynamicObject(PrisonGate[gateid], 590.169, -2666.679, 14.600, Speed);
            else 		MoveDynamicObject(PrisonGate[gateid], 590.169, -2676.679, 14.600, Speed);
        }
        case 5:
        {	// Ворота к лодкам
            if(status) 	MoveDynamicObject(PrisonGate[gateid], 638.150, -2704.229, 6.219, Speed);
            else 		MoveDynamicObject(PrisonGate[gateid], 628.150, -2704.229, 6.219, Speed);
        }
        default: return true;
    }
	if(status)
		SetTimerEx("PrisonGateMove", 30 * 1000, false, "ib", gateid, false);
    return 1;
}

Public: JailDoorsMove(bool: status)
{
	if(status)
		for(new i = 0; i < sizeof JailDoors; i++)
		    if(i < 14)	MoveDynamicObject(JailDoors[i], JailDoorsPos[i][0], JailDoorsPos[i][1] + 2.4, JailDoorsPos[i][2], 1.0);
	    	else		MoveDynamicObject(JailDoors[i], JailDoorsPos[i][0], JailDoorsPos[i][1] - 2.4, JailDoorsPos[i][2], 1.0);
    else
    	for(new i = 0; i < sizeof JailDoors; i++)
	   	 MoveDynamicObject(JailDoors[i], Arr3<JailDoorsPos[i]>, 1.0);
	return true;
}

Public: ClearJailFall(playerid)
{
    SetTimerEx("ClearFell", 1200, false, "i", playerid);
	return MyApplyAnimation(playerid, "PED", "getup_front", 4.1, 0, 0, 0, 0, 0);
}
Public: ClearFell(playerid) return p_FellAnim[playerid] = false;

stock BlockPlayerAggression(playerid)
{
	p_FellAnim[playerid] = true;
    SetTimerEx("ClearFell", 600, false, "i", playerid);
    ClearAnimations(playerid);
    MyApplyAnimation(playerid, "FIGHT_C", "HitC_2", 4.1, 0, 1, 1, 0, 0);
    SetPlayerArmedWeapon(playerid, 0);
    return true;
}

Public: AntiBunnyHop(playerid)
{
	new Float:ST[4];
    GetPlayerVelocity(playerid, Arr3<ST>);
	SetPlayerVelocity(playerid, ST[0] * 0.3, ST[1] * 0.3, ST[2] * 0.3);
	p_FellAnim[playerid] = false;
	return true;
}

Public: OnPrisonStatusChange(newstate)
{
 	new string[128],
		statusname[20];
	if(PrisonersTP_Timer)
	{
		KillTimer(PrisonersTP_Timer);
	}
    switch(newstate)
    {
        case 1:
		{
			statusname = "Работа";
			PrisonGateMove(1, true);
			PrisonGateMove(2, true);
			JailDoorsMove(true);
			PrisonersTP_Timer = SetTimerEx("PrisonersTP", 32000, false, "d", newstate);
		}
        case 2:
        {
        	statusname = "Столовая";
        	PrisonersTP_Timer = SetTimerEx("PrisonersTP", 32000, false, "d", newstate);
		}
		case 3:
		{
			statusname = "Прогулка";
			PrisonGateMove(0, true);
			PrisonGateMove(2, true);
			PrisonersTP_Timer = SetTimerEx("PrisonersTP", 32000, false, "d", newstate);
		}
        case 4:
		{
			statusname = "Отбой";
			PrisonGateMove(0, true);
			PrisonGateMove(1, true);
			JailDoorsMove(false);
			PrisonersTP_Timer = SetTimerEx("PrisonersTP", 1000, false, "d", newstate);
		}
    }
	if(newstate != 1)	DestroyDynamicPickup(j_lFinishPickup), j_lFinishPickup = INVALID_STREAMER_ID;
	else if(j_lFinishPickup == 0)	j_lFinishPickup = CreateDynamicPickup(1239, 1, 576.1, -2674.1, 13.2);//  пикап для грузчиков
    LastPrisonStatus = newstate;
    PrisonStatusTime = JailPeriod[newstate - 1];
    foreach(Prisoners, i)
	{
		JailJobClear(i);
		format(string, sizeof(string), "~y~%s", RusText(statusname, isRus(i)));
    	PlayerTextDrawSetString(i, p_JailPeriod, string);
    	PlayerPlaySound(i, 41800, 0.0, 0.0, 0.0);
    }
    SetTimer("PrisonEndSound", 2000, false);
	return true;
}

Public: PrisonEndSound()
{
	foreach(Prisoners, i)
	{
    	PlayerPlaySound(i, 0, 0.0, 0.0, 0.0);
    }
}

Public: PrisonersTP(newstate)
{
	foreach(Prisoners, i)
    {
    	SetPlayerPrisonPos(i, newstate);
    	if((newstate == 1 && IsPlayerInDynamicArea(i, JailZone[1]) == 0 && IsPlayerInRangeOfPoint(i, 30, 2550.5, -1293.5, 1044.2) == 0)
    	|| (newstate == 2 && IsPlayerInDynamicArea(i, JailZone[1]) == 0)
    	|| (newstate == 3 && IsPlayerInDynamicArea(i, JailZone[2]) == 0)
    	|| (newstate == 4))
	    {
	    	MySpawnPlayer(i);
	    }
    }
    PrisonersTP_Timer = 0;
    return true;
}

SetPlayerPrisonPos(playerid, newstate)
{
	if(newstate == 0)
	{	//	первое появление (фото)
		MySetPlayerSpawnPos(playerid, 691.6, -2917.4, 1700.4, 270.0, 1, VW_JAIL + playerid);
	}
	if(newstate == 1 || newstate == 2 || newstate == 3)
    {
    	MySetPlayerSpawnPos(playerid, Arr4<PeriodPos[newstate - 1]>);
    }
    else if(newstate == 4)
    {
    	if(p_JailOccupied[playerid] == INVALID_PLAYER_ID)
    	{
    		for(new j = 0, c = 0; j < 36; j++)
            {
                for(new p = 0; p < sizeof JailPos; p++)
                {
                    if(g_JailOccupied[p] == c)
					{
                        g_JailOccupied[p]++;
                        p_JailOccupied[playerid] = p;
						break;
					}
                }
                c++;
            }
    	}
    	MySetPlayerSpawnPos(playerid, Arr4<JailPos[ p_JailOccupied[playerid] ]>, 1, VW_JAIL);
    }
    return true;
}

DeleteJailNumber(playerid)
{
	DestroyDynamic3DTextLabel(jail_number_3dtext[playerid]);
	strdel(jail_numer[playerid], 0, sizeof(jail_numer[]));
}

JailDelivery(playerid, spawn = true)
{
	MySetPlayerSpawnPos(playerid, 244.2467, 70.0835, 1003.6406, 180.0, 6, VW_LSPD);
	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		DeleteJailNumber(playerid);
		UpdatePlayerSkin(playerid, false);
		PlayerInfo[playerid][pJailTime] = 1;
		if(spawn)	MySpawnPlayer(playerid);
	}
	else if(PlayerInfo[playerid][pJailTime] < 0)
	{
		PlayerInfo[playerid][pJailTime] = 0;
		JailTime[playerid] = 1;
	}
	return true;
}

public OnPlayerEnterReceived(playerid, enterid)
{
   	//if(!EnterInfo[e][enX] && !EnterInfo[e][enY])
	//	return false;
	if(enterid != E_NONE)
	{
		switch(enterid)
		{
			case E_DIVER:
			{
				SendClientMessage(playerid, COLOR_WHITE, "Вы в акваланге");
			}
		}

		// Заприваченные дома банд
		new gangid = 0;
		if(enterid == E_GROOVE)									gangid = F_GROVE;
		else if(enterid == E_BALLAS)							gangid = F_BALLAS;
		else if(enterid == E_VAGOS)								gangid = F_VAGOS;
		else if(enterid == E_AZTECAS || enterid == E_AZTECAS2)	gangid = F_AZTECAS;
		else if(enterid == E_RIFA)								gangid = F_RIFA;
		if(gangid > 0)
		{
		    if(PlayerInfo[playerid][pFaction] != gangid)
		    {
		        new string[64]; // ~g~Grove Street~n~~w~only
		        format(string, 128, "~%c~%s~n~~w~only", GetGangColorChart(gangid), GetFactionName(gangid));
		        GameTextForPlayer(playerid, string, 4000, 4);
		        return false;
		    }
		}
		//	LSPD
		if(PlayerInfo[playerid][pFaction] != F_POLICE)
		{
			if(enterid == E_LSPD_GARAGE || enterid == E_LSPD_ROOF || enterid == E_LSPD_AMMO)
			{
				GameTextForPlayer(playerid, "~r~Access denied", 3000, 4);
	        	return false;
			}
		}
		//	PRISON
	    if(PlayerInfo[playerid][pJailTime] > 0)
	    {
	    	if(enterid == E_PRISON_EAT && LastPrisonStatus != 2)
			{
	            GameTextForPlayer(playerid, "~r~Close", 1000, 1);
	        	return false;
			}
			else if(enterid == E_PRISON2 && LastPrisonStatus != 4)
			{
	            GameTextForPlayer(playerid, "~r~Close", 1000, 1);
	        	return false;
			}
	    }
	}
	return true;
}

public OnPlayerExitReceived(playerid, exitid)
{
    //if(!EnterInfo[e][exX] && !EnterInfo[e][exY])
	//	return false;
	if(exitid != E_NONE)
	{
		//	LSPD
	    if(PlayerInfo[playerid][pFaction] != F_POLICE)
		{
			if(exitid == E_LSPD_GARAGE || exitid == E_LSPD_ROOF)
			{
				GameTextForPlayer(playerid, "~r~Access denied", 3000, 4);
	        	return false;
			}
		}
		//	PRISON
	    if(PlayerInfo[playerid][pJailTime] > 0)
	    {
			if(exitid == E_PRISON2 && LastPrisonStatus == 4)
			{
	            GameTextForPlayer(playerid, "~r~Close", 1000, 1);
	        	return false;
			}
	    }
	}
	return true;
}

public OnPlayerEnterExitFinish(playerid, enterid, bool:side)
{
	if(enterid != E_NONE)
	{
		if(side)
		{
			if(enterid == E_LSPD)
		    {	// Полицейский участок
		        if(GetPlayerWantedLevel(playerid) > 3)
		        {
			        SendClientMessage(playerid, COLOR_WHITE, "- Офицер: Руки вверх! Вы арестованы по подозрению в совершении преступления!");
			        SetPlayerInJail(playerid);
		        }
		    }
			else if(enterid == E_GROOVE || enterid == E_BALLAS || enterid == E_VAGOS || enterid == E_AZTECAS || enterid == E_RIFA)
			{
				RobberyFinish(playerid, 1, true);
			}
		}
		else
		{
			if(enterid == E_HOTEL_JEF)
			{
				if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] == 1)
				{
					ShowPlayerHint(playerid, "Ваше жилье обозначается на радаре иконкой ~y~дискеты");
				}
				else if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] == 2 && mission_id[playerid] != MIS_START_WORK)
				{
					StoryMissionStart(playerid, MIS_SOURCE_TRAINING);
				}
			}
			else if(enterid == E_AUTOSCHOOL)
			{
				if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] == 4)
				{
					MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Информация",
						"{FFFFFF}Поздравляю, вы прошли обучающую стадию игры на сервере!\n\n\
						Получив лицензию на вождение, вы можете " MAIN_COLOR "устроиться на работу{FFFFFF} в мэрии.\n\
						А позже, набрав уровень, вы сможете вступить в одну из " MAIN_COLOR "фракций{FFFFFF}.\n\
						Заработав больше денег, вы сможете " MAIN_COLOR "купить машину{FFFFFF} (дом для этого не требуется)\n\n\
						Если у вас остались вопросы, можете всегда обратиться в " MAIN_COLOR "/ask{FFFFFF}\n\
						Адрес нашего сайта: " MAIN_COLOR "" SITE_ADRESS, "Понятно", "");
					gMissionProgress[playerid][MIS_SOURCE_TRAINING]++;
				}
			}
		}
	}
	return true;
}

CreatePlayerClotheMenu(playerid)
{
	new items[6][32];
	if(isRus(playerid))
	{
		items[0] = "Одежда";
		items[1] = "Наушники";
		items[2] = "Очки";
		items[3] = "Маски";
		items[4] = "Шлема";
		items[5] = "Головные уборы";
	}
	else
	{
		items[0] = "Skins";
		items[1] = "Earflaps";
		items[2] = "Glass";
		items[3] = "Mask";
		items[4] = "Helmet";
		items[5] = "Hat";
	}
	ShowPlayerSelectMenu(playerid, SM_CLOTHE, "Clothes", items);
	return true;
}

ChoosePlayerClothes(playerid, mode)
{
	switch(mode)
	{
	    case 0:
	    {	// Stop choosing
			ClothesShopSel[playerid] = 0;
			//HidePlayerSelecter(playerid);
			//TextDrawHideForPlayer(playerid, tdChooseButton1);
			//TextDrawHideForPlayer(playerid, tdChooseButton2);
			//PlayerTextDrawHide(playerid, tdChoosePrice);
			//PlayerTextDrawHide(playerid, tdChooseItemL);
			//PlayerTextDrawHide(playerid, tdChooseItemR);
			ReloadPlayerSkin(playerid);
			Acsr.CancelTryPlayerAcsr(playerid);

			if(ClothesItem[playerid] > 0)
			{
				InterpolateCameraPos(playerid, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_FaceCamPos]>, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_StartCamPos]>, 2000);
				InterpolateCameraLookAt(playerid, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_FaceCamLookAt]>, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_StartCamLookAt]>, 2000);
			}

			CreatePlayerClotheMenu(playerid);
	    }
	    case 1:
	    {	// Start choosing
	        ClothesShopSel[playerid] = 0;
			TogglePlayerControllable(playerid, false);
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid) + playerid);

			new Float:PlayerCameraPos[3],
				Float:PlayerCameraVector[3];
			GetPlayerCameraPos(playerid, Arr3<PlayerCameraPos>);
			GetPlayerCameraFrontVector(playerid, Arr3<PlayerCameraVector>);
			PlayerCameraVector[0] = PlayerCameraPos[0] + floatmul(PlayerCameraVector[0], 5.0);
			PlayerCameraVector[1] = PlayerCameraPos[1] + floatmul(PlayerCameraVector[1], 5.0);
			PlayerCameraVector[2] = PlayerCameraPos[2] + floatmul(PlayerCameraVector[2], 5.0);

			MySetPlayerPos(playerid, Arr4<ClothesShopData[ ClothesShopID[playerid] ][csd_Pos]>);
			InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_StartCamPos]>, 2000);
			InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_StartCamLookAt]>, 2000);

			CreatePlayerClotheMenu(playerid);

	        /*switch(ClothesShopID[playerid])
	        {
				case 1:
				{	// Binco
					//price = 150;
				}
				case 2:
				{	// DS
					//price = 50;
				}
				case 3:
				{	// Prolaps
					//price = 150;
				}
				case 4:
				{	// Suburban
					//price = 150;
				}
				case 5:
				{	// Victim
					//price = 200;
				}
				case 6:
				{	// ZIP
					//price = 650;
				}
			}*/
	    } 
	    case 2:
	    {	// Prev skin
	        new sel = ClothesShopSel[playerid] - 1;
	        if(sel < 0)		return false;
	        ClothesShopSel[playerid] = sel;
	        ChoosePlayerClothes(playerid, 4);
	    }
	    case 3:
	    {	// Next skin
	    	new sel = ClothesShopSel[playerid] + 1;
	    	switch(ClothesItem[playerid])
	    	{
	    		case 0:
				{
			        switch(ClothesShopID[playerid])
			        {
						case 1:	if(sel >= sizeof(Binco_Skin)) 		return false;
						case 2:	if(sel >= sizeof(DS_Skin))			return false;
						case 3:	if(sel >= sizeof(Prolaps_Skin))		return false;
						case 4:	if(sel >= sizeof(Suburban_Skin))	return false;
						case 5:	if(sel >= sizeof(Victim_Skin))		return false;
						case 6:	if(sel >= sizeof(ZIP_Skin))			return false;
					}
	    		}
	    		case 1:	if(sel >= sizeof(Earflaps))					return false;
	    		case 2:	if(sel >= sizeof(Glasses))					return false;
	    		case 3:	if(sel >= sizeof(Bandanas))					return false;
	    		case 4:	if(sel >= sizeof(Helmets))					return false;
	    		case 5:	if(sel >= sizeof(Hats))						return false;
	    	}
	        ClothesShopSel[playerid] = sel;
	        ChoosePlayerClothes(playerid, 4);
	    }
	    case 4:
	    {	// Show skin
			new skin[3] = {-1,...}, sel = ClothesShopSel[playerid];
	    	switch(ClothesItem[playerid])
	    	{
	    		case 0:
				{
			        switch(ClothesShopID[playerid])
			        {
						case 1:
						{
							skin[0] = Binco_Skin[sel];
							if(sel > 0) skin[1] = Binco_Skin[sel-1];
							if(sel < sizeof(Binco_Skin)-1) skin[2] = Binco_Skin[sel+1];
						}
						case 2:
						{
							skin[0] = DS_Skin[sel];
							if(sel > 0) skin[1] = DS_Skin[sel-1];
							if(sel < sizeof(DS_Skin)-1) skin[2] = DS_Skin[sel+1];
						}
						case 3:
						{
							skin[0] = Prolaps_Skin[sel];
							if(sel > 0) skin[1] = Prolaps_Skin[sel-1];
							if(sel < sizeof(Prolaps_Skin)-1) skin[2] = Prolaps_Skin[sel+1];
						}
						case 4:
						{
							skin[0] = Suburban_Skin[sel];
							if(sel > 0) skin[1] = Suburban_Skin[sel-1];
							if(sel < sizeof(Suburban_Skin)-1) skin[2] = Suburban_Skin[sel+1];
						}
						case 5:
						{
							skin[0] = Victim_Skin[sel];
							if(sel > 0) skin[1] = Victim_Skin[sel-1];
							if(sel < sizeof(Victim_Skin)-1) skin[2] = Victim_Skin[sel+1];
						}
						case 6:
						{
							skin[0] = ZIP_Skin[sel];
							if(sel > 0) skin[1] = ZIP_Skin[sel-1];
							if(sel < sizeof(ZIP_Skin)-1) skin[2] = ZIP_Skin[sel+1];
						}
						case 7:
						{
							skin[0] = FC_Skin[sel];
							if(sel > 0) skin[1] = FC_Skin[sel-1];
							if(sel < sizeof(FC_Skin)-1) skin[2] = FC_Skin[sel+1];
						}
					}
			        MySetPlayerSkin(playerid, skin[0], false);
	    		}
	    		case 1:
	    		{
	    			skin[0] = Earflaps[sel];
					if(sel > 0)						skin[1] = Earflaps[sel - 1];
					if(sel < sizeof(Earflaps) - 1)	skin[2] = Earflaps[sel + 1];
			        Acsr.TryPlayerAcsr(playerid, skin[0]);
	    		}
	    		case 2:
	    		{
	    			skin[0] = Glasses[sel];
					if(sel > 0)						skin[1] = Glasses[sel - 1];
					if(sel < sizeof(Glasses) - 1)	skin[2] = Glasses[sel + 1];
			        Acsr.TryPlayerAcsr(playerid, skin[0]);
	    		}
	    		case 3:
	    		{
	    			skin[0] = Bandanas[sel];
					if(sel > 0)						skin[1] = Bandanas[sel - 1];
					if(sel < sizeof(Bandanas) - 1)	skin[2] = Bandanas[sel + 1];
			        Acsr.TryPlayerAcsr(playerid, skin[0]);
	    		}
	    		case 4:
	    		{
	    			skin[0] = Helmets[sel];
					if(sel > 0)						skin[1] = Helmets[sel - 1];
					if(sel < sizeof(Helmets) - 1)	skin[2] = Helmets[sel + 1];
			        Acsr.TryPlayerAcsr(playerid, skin[0]);
	    		}
	    		case 5:
	    		{
	    			skin[0] = Hats[sel];
					if(sel > 0)						skin[1] = Hats[sel - 1];
					if(sel < sizeof(Hats) - 1)		skin[2] = Hats[sel + 1];
			        Acsr.TryPlayerAcsr(playerid, skin[0]);
	    		}
	    	}

	        //PlayerTextDrawHide(playerid, tdChooseItemL);
			//PlayerTextDrawHide(playerid, tdChooseItemR);
			if(skin[1] > -1)
			{
				//PlayerTextDrawSetPreviewModel(playerid, tdChooseItemL, skin[1]);
				//PlayerTextDrawShow(playerid, tdChooseItemL);
			}
			if(skin[2] > -1)
			{
				//PlayerTextDrawSetPreviewModel(playerid, tdChooseItemR, skin[2]);
				//PlayerTextDrawShow(playerid, tdChooseItemR);
			}
	    }
	    case 5:
	    {	
			new b = GetPVarInt(playerid, "Player:MenuBizID");
	        if(b != 0 && BizInfo[b][bType] == BUS_CLOTHING)
	        {
	        	new price;
				switch(ClothesItem[playerid])
		    	{
		    		case 0:
					{
				        switch(ClothesShopID[playerid])
				        {
							case 1: price = 150;	// Binco
							case 2: price = 50;		// DS (donate)
							case 3: price = 150;	// Prolaps
							case 4: price = 150;	// Suburban
							case 5: price = 200;	// Victim
							case 6: price = 650;	// ZIP
							case 7: price = 100;	// Fort Carson
						}
						if(ClothesShopID[playerid] == 2)
						{	// Donate Shop
						    if(GetPlayerCoins(playerid) < price)
						    {
							    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает монет для покупки.");
						    }
						}
						else
						{
						    if(MyGetPlayerMoney(playerid) < price)
						    {
							    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег для покупки.");
						    }
						}
				        if(Inv.AddPlayerThing(playerid, THING_SKIN, 1, GetPlayerSkin(playerid)))
				        {
				        	if(ClothesShopID[playerid] == 2)
							{	// Donate Shop
							    GivePlayerCoins(playerid, -price);
							    price = price * MoneyForCoin;
							}
							else
							{
							    MyGivePlayerMoney(playerid, -price);
							}
							BizSaleProds(b, price, 1);
				        	//UpdatePlayerSkin(playerid, false);
				        }
				    }
				    case 1:
				    {
				    	if(Inv.AddPlayerThing(playerid, THING_MUSIC, 1, ClothesShopSel[playerid]))
				    	{
				    		BizSaleProds(b, price, 1);
				    	}
				    }
				    case 2:
				    {
				    	if(Inv.AddPlayerThing(playerid, THING_GLASS, 1, ClothesShopSel[playerid]))
				    	{
				    		BizSaleProds(b, price, 1);
				    	}
				    }
				    case 3:
				    {
				    	if(Inv.AddPlayerThing(playerid, THING_MASK, 1, ClothesShopSel[playerid]))
				    	{
				    		BizSaleProds(b, price, 1);
				    	}
				    }
				    case 4:
				    {
				    	if(Inv.AddPlayerThing(playerid, THING_HELMET, 1, ClothesShopSel[playerid]))
				    	{
				    		BizSaleProds(b, price, 1);
				    	}
				    }
				    case 5:
				    {
				    	if(Inv.AddPlayerThing(playerid, THING_HAT, 1, ClothesShopSel[playerid]))
				    	{
				    		BizSaleProds(b, price, 1);
				    	}
				    }
				}
	    	}
	    }
	}
	return 1;
}

ChoosePlayerVehicle(playerid, mode)
{
	switch(mode)
	{
	    case 0:
	    {// Stop choosing
	        gPickupTime[playerid] = 3;
	        ChooseVehicleID[playerid] = 0;
			ChooseVehicleSel[playerid] = 0;
			ChooseVehicleModel[playerid] = 0;
			CancelSelectTextDraw(playerid);
			SetCameraBehindPlayer(playerid);
			IFace.ToggleGroup(playerid, IFace.TV_EFFECT, false);
			TogglePlayerControllable(playerid, true);
			GameTextForPlayer(playerid, " ", 1000, 4);
			TextDrawHideForPlayer(playerid, tdChooseButton1);
			TextDrawHideForPlayer(playerid, tdChooseButton2);
			PlayerTextDrawHide(playerid, tdChoosePrice);
			PlayerTextDrawHide(playerid, tdChooseItemL);
			PlayerTextDrawHide(playerid, tdChooseItemR);
	    }
	    case 1:
	    {// Start choosing
	        ChooseVehicleSel[playerid] = 0;
			IFace.ToggleGroup(playerid, IFace.TV_EFFECT, true);
			SelectTextDraw(playerid, COLOR_SERVER);
			TogglePlayerControllable(playerid, false);
			TextDrawShowForPlayer(playerid, tdChooseButton1);
			TextDrawShowForPlayer(playerid, tdChooseButton2);
			PlayerTextDrawShow(playerid, tdChoosePrice);
			ChoosePlayerVehicle(playerid, 4);
	    }
	    case 2:
	    {// Next vehicle
	        ChooseVehicleSel[playerid]++;
	        ChoosePlayerVehicle(playerid, 4);
	        PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	    }
	    case 3:
	    {// Prev vehicle
	        ChooseVehicleSel[playerid]--;
	        ChoosePlayerVehicle(playerid, 4);
	        PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    }
	    case 4:
	    {// Show vehicle
	        new Float:X, Float:Y, Float:Z, Float:A;
	        new veh[3], v = ChooseVehicleSel[playerid];
	        switch(ChooseVehicleID[playerid])
	        {
				case 1: GetSalonVehParams(SalonCars1, sizeof(SalonCars1), veh, v);
				case 2: GetSalonVehParams(SalonCars2, sizeof(SalonCars2), veh, v);
				case 3: GetSalonVehParams(SalonCars3, sizeof(SalonCars3), veh, v);
				case 4: GetSalonVehParams(SalonCars4, sizeof(SalonCars4), veh, v);
			}
	        GetVehicleZAngle(veh[0], A);
	        GetVehiclePos(veh[0], X, Y, Z);
			PlayerTextDrawHide(playerid, tdChooseItemL);
			PlayerTextDrawHide(playerid, tdChooseItemR);
			if(veh[1] > 0)
			{
				PlayerTextDrawSetPreviewModel(playerid, tdChooseItemL, GetVehicleModel(veh[1]));
				PlayerTextDrawSetPreviewVehCol(playerid, tdChooseItemL, CarInfo[veh[1]][cColor1], CarInfo[veh[1]][cColor2]);
				PlayerTextDrawSetPreviewRot(playerid, tdChooseItemL, 0.0, 0.0, 30.0);
				PlayerTextDrawShow(playerid, tdChooseItemL);
			}
			if(veh[2] > 0)
			{
				PlayerTextDrawSetPreviewModel(playerid, tdChooseItemR, GetVehicleModel(veh[2]));
				PlayerTextDrawSetPreviewVehCol(playerid, tdChooseItemR, CarInfo[veh[2]][cColor1], CarInfo[veh[2]][cColor2]);
				PlayerTextDrawSetPreviewRot(playerid, tdChooseItemR, 0.0, 0.0, 30.0);
				PlayerTextDrawShow(playerid, tdChooseItemR);
			}
			new string[20];
			new Float:distance = 8.0;
		    new Float:X2 = X + (distance * floatsin(30-A, degrees));
		    new Float:Y2 = Y + (distance * floatcos(30-A, degrees));
			SetPlayerCameraLookAt(playerid, X, Y, Z);
			SetPlayerCameraPos(playerid, X2, Y2, Z+0.75);
			ChooseVehicleModel[playerid] = GetVehicleModel(veh[0]);
			new price = VehParams[ChooseVehicleModel[playerid]-400][VEH_PRICE];
			if(MyGetPlayerMoney(playerid) < price) string = "~r~"; else string = "~g~";
			format(string, 20, "%s%d$", string, price);
			PlayerTextDrawSetString(playerid, tdChoosePrice, string);
	    }
	    case 5:
	    {// Save vehicle
	    	new modelid = ChooseVehicleModel[playerid];
			if(!IsPlayerHaveLicThisVehicle(playerid, modelid)) //PlayerInfo[playerid][pCarLic] == 0)
			{
			    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет лицензии на этот транспорт.");
			    return 1;
			}
            new string[256];
	        new price = VehParams[modelid - 400][VEH_PRICE];
			format(string, sizeof(string), "SELECT COUNT(*) AS count FROM `cars` WHERE `type` = '1' AND `ownerid` = '%d'", PlayerInfo[playerid][pUserID]);
			new Cache:result = mysql_query(g_SQL, string);
			new cars;
			cache_get_value_name_int(0, "count", cars);
			cache_delete(result);
			if(cars >= 1)
			{
			    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас уже есть личный транспорт.");
			    return true;
			}
            if(MyGetPlayerMoney(playerid) < price)
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
            new vehicleid;
	        switch(ChooseVehicleID[playerid])
	        {
				case 1: vehicleid = MyCreateVehicle(modelid, 2127.473, -1149.66, 23.942, 345.0, 1, 1);
				case 2: vehicleid = MyCreateVehicle(modelid, 542.7104, -1281.82, 17.044, 270.0, 1, 1);
				case 3: vehicleid = MyCreateVehicle(modelid, -1642.71, 1210.973, 6.8011, 225.0, 1, 1);
				case 4: vehicleid = MyCreateVehicle(modelid, -1970.56, 302.4297, 34.796, 180.0, 1, 1);
			}
		    new Float:X, Float:Y, Float:Z;
			result = mysql_query(g_SQL, "INSERT INTO `cars`() VALUES()");
			MyGivePlayerMoney(playerid, -price);
			GetVehiclePos(vehicleid, X, Y, Z);
			CarInfo[vehicleid][cID] = cache_insert_id();
			CarInfo[vehicleid][cType] = C_TYPE_PLAYER;
			CarInfo[vehicleid][cOwnerID] = PlayerInfo[playerid][pUserID];
			CarInfo[vehicleid][cModel] = modelid;
			CarInfo[vehicleid][cMileage] = random(150)/10;
			CarInfo[vehicleid][cX] = 0.0;
			CarInfo[vehicleid][cY] = 0.0;
			UpdateVehicleStatics(vehicleid);

			cache_delete(result);

			SendClientMessage(playerid, COLOR_SAYING, "- Продавец говорит: Ваш транспорт припаркован у входа. Не забудьте перепарковать его (/veh park)");
			ShowPlayerGPSPoint(playerid, X, Y, Z);
			ChoosePlayerVehicle(playerid, 0);

			#if defined _system_ucp_news_included
			    PushNews(playerid, NEWS_TYPE_CAR_PURCHASE, modelid);
			#endif
	    }
	}
	return 1;
}

MyShowPlayerDialog(playerid, dialogid, style, caption[], info[], button1[], button2[] = "", dtl = 60)
{
	if(dialogid != INVALID_DIALOGID && Dialogid[playerid] != INVALID_DIALOGID)
	{
		return true;
	}
	if(!strlen(caption) || !strlen(info))
	{
		return true;
	}
	Dialogid[playerid] = dialogid;
	DialogTimeleft[playerid] = dtl;
	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}

MyHidePlayerDialog(playerid)
{
	Dialogid[playerid] = INVALID_DIALOGID;
	DialogTimeleft[playerid] = 0;
	ShowPlayerDialog(playerid, Dialogid[playerid], DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
}

//////
Public: gzgodmode(playerid, time)
{
	new string[128];
	if(time != 0)
	{
		gzGodMode[playerid] = time+1;
		MySetPlayerHealth(playerid, 100000);
	}
	if(--gzGodMode[playerid] > 0)
	{
		format(string, 128, "~r~Spawn protect~n~off");
		MySetPlayerHealth(playerid, 100.0);
	}
	else
	{
	    gzGodMode[playerid] = 0;
		format(string, 128, "~r~Spawn protect~n~~w~%d", gzGodMode[playerid]);
		SetTimerEx("gzgodmode", 900, false, "ii", playerid, 0);
	}
	GameTextForPlayer(playerid, string, 3000, 4);
}

ColorMenuShow(playerid)
{
	for(new i = 0; i <= 66; i++)	TextDrawShowForPlayer(playerid, PayNSprayColorMenu[i]);
    SelectTextDraw(playerid, COLOR_SERVER);
	PlayerSelectVCFM[playerid] = true;
	return true;
}

ColorMenuHide(playerid)
{
    for(new i = 0; i <= 66; i++)	TextDrawHideForPlayer(playerid, PayNSprayColorMenu[i]);
    CancelSelectTextDraw(playerid);
    PlayerSelectVCFM[playerid] = false;
	return true;
}

//---
stock	IsPlayerInGreenZoneVW(playerid)
{
	new vw = GetPlayerVirtualWorld(playerid);
	switch(vw)
	{
		case VW_AIRPORT,VW_LSPD, VW_FBI, VW_BANK, VW_CNN, VW_CITYHALL,
			VW_HOSPITAL, VW_HOTEL, VW_AUTOSCHOOL:	return true;
	}
	return false;
}

//---
Public: PlayerCameraBehind(playerid)
{
	SetCameraBehindPlayer(playerid);
	return true;
}

stock TogglePlayerNickname(playerid, toggle)
{
	if(toggle)
	{
		foreach(LoginPlayer, i)
		{
			MySetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			if(pNameTags[i] == true) ShowPlayerNameTagForPlayer(i, playerid, true);
		}
	}
	else
	{
		foreach(LoginPlayer, i)
		{
			MySetPlayerMarkerForPlayer(i, playerid, (GetPlayerColor(playerid) & 0xFFFFFF00));
			ShowPlayerNameTagForPlayer(i, playerid, false);                          // ОПАСНО! Скрывает ник!
		}
	}
	return true;
}

//  Inventory
Public: OnPlayerWearAcsr(playerid, thing)
{
	switch(thing)
	{
		case THING_GLASS:	//	очки
		{
			PlayerAction(playerid, "надевает очки.");
		}
		case THING_MASK:	//	бандана на лицо
		{
			TogglePlayerNickname(playerid, false);
			InMask[playerid] = true;
			PlayerAction(playerid, "надевает бандану на лицо.");
		}
		case THING_MUSIC:	//	наушники
		{
			callcmd::radio(playerid, "");
			PlayerAction(playerid, "надевает наушники.");
			ShowPlayerHint(playerid, "Для выбора радиостанции используйте ~y~/radio");
		}
		case THING_HELMET:	//	шлем
		{
			TogglePlayerNickname(playerid, false);
			InMask[playerid] = true;
			PlayerAction(playerid, "надевает шлем.");
		}
		case THING_HAT:		//	панама
		{
			PlayerAction(playerid, "надевает панаму.");
		}
	}
	return true;
}

Public: OnPlayerRemoveAcsr(playerid, thing)
{
	switch(thing)
	{
		case THING_GLASS:	//	очки
		{
			//PlayerAction(playerid, "снимает очки.");
		}
		case THING_MASK:	//	бандана на лицо
		{
			TogglePlayerNickname(playerid, true);
			InMask[playerid] = false;
			//PlayerAction(playerid, "снимает бандану с лица.");
		}
		case THING_MUSIC:	//	наушники
		{
			//PlayerAction(playerid, "снимает наушники.");
			DeletePVar(playerid, "Thing:RadioID");
			UpdatePlayerRadio(playerid);
		}
		case THING_HELMET:	//	шлем
		{
			TogglePlayerNickname(playerid, true);
			InMask[playerid] = false;
			//PlayerAction(playerid, "снимает шлем.");
		}
		case THING_HAT:		//	панама
		{
			//PlayerAction(playerid, "снимает панаму.");
		}
	}
	return true;
}

stock MySetPlayerCheckpoint(playerid, type, Float:X, Float:Y, Float:Z, Float:size)
{
	MyDisablePlayerCheckpoint(playerid);
	gCheckpoint[playerid] = CreateDynamicCP(X, Y, Z, size, -1, -1, playerid, 150.0);
	gMapIcon_CP[playerid] = CreateDynamicMapIcon(X, Y, Z, 0, 0xAA0000FF, -1, -1, playerid, 10000.0, MAPICON_GLOBAL);
	gType_CP[playerid] = type;
	return gCheckpoint[playerid];
}

stock MyGetPlayerCheckpointPos(playerid, &Float:X, &Float:Y, &Float:Z)
{
	if(IsValidDynamicCP(gCheckpoint[playerid]))
	{
		Streamer_GetFloatData(STREAMER_TYPE_CP, gCheckpoint[playerid], E_STREAMER_X, X);
		Streamer_GetFloatData(STREAMER_TYPE_CP, gCheckpoint[playerid], E_STREAMER_Y, Y);
		Streamer_GetFloatData(STREAMER_TYPE_CP, gCheckpoint[playerid], E_STREAMER_Z, Z);
		return true;
	}
	return false;
}

stock GetDynamicPickupPos(pickupid, &Float:X, &Float:Y, &Float:Z)
{
	if(IsValidDynamicPickup(pickupid))
	{
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_X, X);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_Y, Y);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_Z, Z);
		return true;
	}
	return false;
}

stock MyDisablePlayerCheckpoint(playerid)
{
	DestroyDynamicCP(gCheckpoint[playerid]), gCheckpoint[playerid] = INVALID_STREAMER_ID;
	DestroyDynamicMapIcon(gMapIcon_CP[playerid]), gMapIcon_CP[playerid] = INVALID_STREAMER_ID;
	gType_CP[playerid] = CPMODE_NONE;
	return true;
}

stock IsPlayerActiveGPS(playerid)
{
	return (gps_Data[playerid][GPS_CP] ? true : false);
}

stock ShowPlayerGPSPoint(playerid, Float:X, Float:Y, Float:Z, Float:size = 3.0)
{
	HidePlayerGPSPoint(playerid);
	gps_Data[playerid][GPS_POS][0] = X;	gps_Data[playerid][GPS_POS][1] = Y;	gps_Data[playerid][GPS_POS][2] = Z;
	gps_Data[playerid][GPS_CP] = CreateDynamicCircle(X, Y, size, -1, -1, playerid);
	gps_Data[playerid][GPS_MAP] = CreateDynamicMapIcon(X, Y, Z, 0, COLOR_GPS, -1, -1, playerid, 10000.0, MAPICON_GLOBAL_CHECKPOINT);
	return gps_Data[playerid][GPS_CP];
}

stock HidePlayerGPSPoint(playerid)
{
	DestroyDynamicArea(gps_Data[playerid][GPS_CP]), 	gps_Data[playerid][GPS_CP] = INVALID_STREAMER_ID;
	DestroyDynamicMapIcon(gps_Data[playerid][GPS_MAP]), gps_Data[playerid][GPS_MAP] = INVALID_STREAMER_ID;
	DestroyDynamicObject(gps_Data[playerid][GPS_OBJ]), 	gps_Data[playerid][GPS_OBJ] = INVALID_STREAMER_ID;
	return true;
}

Public: StopVehicleFire(playerid)
{
	new Float:A,
		vehicleid = GetPlayerVehicleID(playerid);
	burning_timer[playerid] = 0;
	MySetVehicleHealth(vehicleid, 300.0);
	GetVehicleZAngle(vehicleid, A);
	SetVehicleZAngle(vehicleid, A);
	PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
	GameTextForPlayer(playerid, "~g~!!!FIRE FIRE FIRE!!!~n~Puted out!", 3000, 4);
	return true;
}

stock GetPlayeridToUserID(userid)
{
	foreach(LoginPlayer, i)
	{
		if(PlayerInfo[i][pUserID] == userid)
		{
			return i;
		}
	}
	return INVALID_PLAYER_ID;
}

SendConfirmMail(playerid, mail[])
{
	new buffer[256];
	format(buffer, sizeof buffer, "code="SECRET_CODE"&userid=%d&mail=%s", PlayerInfo[playerid][pUserID], mail);
	HTTP(playerid, HTTP_POST, CONFIRM_MAIL_URL, buffer, "OnSendConfirmMailResponse");
}

Public: OnSendConfirmMailResponse(index, response_code, data[])
{
	return true;
}

GetPlayerEmail(playerid)
{
	new query[128];
	format(query, 128, "SELECT `email` FROM `players` WHERE `id` = '%d'", PlayerInfo[playerid][pUserID]);
	new Cache:result = mysql_query(g_SQL, query);
	cache_get_value_index(0, 0, query);
	cache_delete(result);
	if(!strcmp(query, "NULL", true))	query = "";
	return query;
}

#if defined _FCNPC_included
	public FCNPC_OnSpawn(npcid)
	{
	    SetPlayerColor(npcid, 0x88AA8800);
		/*if(npcid == NPC_ID[NPC_BusDriver1])
		{
			if(FCNPC_PutInVehicle(npcid, BusVehicle[0], 0) == 0)
			{
				printf("ERROR! FCNPC %d didn't seat in vehicle!", npcid);
			}
			else
			{
				MyStartPlayback(npcid);
			    SetPlayerColor(npcid, COLOR_ORANGE);
			}
		}
		else if(npcid == NPC_ID[NPC_BusDriver2])
		{
			if(FCNPC_PutInVehicle(npcid, BusVehicle[1], 0) == 0)
			{
				printf("ERROR! FCNPC %d didn't seat in vehicle!", npcid);
			}
			else
			{
				MyStartPlayback(npcid);
			    SetPlayerColor(npcid, COLOR_ORANGE);
			}
		}
		else if(npcid == NPC_ID[NPC_BusDriver3])
		{
			if(FCNPC_PutInVehicle(npcid, BusVehicle[2], 0) == 0)
			{
				printf("ERROR! FCNPC %d didn't seat in vehicle!", npcid);
			}
			else
			{
				MyStartPlayback(npcid);
			    SetPlayerColor(npcid, COLOR_ORANGE);
			}
		}
		else if(npcid == NPC_ID[NPC_BusDriver4])
		{
			if(FCNPC_PutInVehicle(npcid, BusVehicle[3], 0) == 0)
			{
				printf("ERROR! FCNPC %d didn't seat in vehicle!", npcid);
			}
			else
			{
				MyStartPlayback(npcid);
			    SetPlayerColor(npcid, COLOR_ORANGE);
			}
		}
		else
		{*/
		for(new i = 0; i < sizeof(TrainInfo); i++)
		{
			if(npcid == NPC_ID[ TrainInfo[i][trNPC] ])
			{
		        if(FCNPC_PutInVehicle(NPC_ID[ TrainInfo[i][trNPC] ], TrainInfo[i][trID], 0) == 0)
				{
		        	printf("ERROR! FCNPC %d didn't seat in vehicle!", npcid);
		        }
		        else
		        {
		            SetPlayerColor(npcid, 0x8C5F11FF);
		        }
				if(++TDriverCount == sizeof(TrainInfo))	SetTimer("StartTrainCycle", 5000, 0);
			}
		}
		//}
		return true;
	}

	Public: MyStartPlayback(npcid)
	{
		/*if(npcid == NPC_ID[NPC_BusDriver1])
		{
		    FCNPC_StartPlayingPlayback(npcid, "bus_1");
		   	BusPlaybackCount++;
		}
		else if(npcid == NPC_ID[NPC_BusDriver2])
		{
			FCNPC_StartPlayingPlayback(npcid, "bus_2");
			BusPlaybackCount++;
		}
		else if(npcid == NPC_ID[NPC_BusDriver3])
		{
			FCNPC_StartPlayingPlayback(npcid, "bus_3");
			BusPlaybackCount++;
		}
		else if(npcid == NPC_ID[NPC_BusDriver4])
		{
			FCNPC_StartPlayingPlayback(npcid, "bus_4");
			BusPlaybackCount++;
		}*/
	    return true;
	}

	public FCNPC_OnFinishPlayback(npcid)
	{
	    new string[128];
		/*if(npcid == NPC_ID[NPC_BusDriver1] || npcid == NPC_ID[NPC_BusDriver2] || npcid == NPC_ID[NPC_BusDriver3] || npcid == NPC_ID[NPC_BusDriver4])
		{
			if(--BusPlaybackCount == 0)
			{
				MyStartPlayback(NPC_ID[NPC_BusDriver1]);
				MyStartPlayback(NPC_ID[NPC_BusDriver2]);
				MyStartPlayback(NPC_ID[NPC_BusDriver3]);
				MyStartPlayback(NPC_ID[NPC_BusDriver4]);
			}
		}
		else
		{*/
		for(new train = 0; train < sizeof(TrainInfo); train++)
		{
		    new npc = TrainInfo[train][trNPC];
			if(npcid == NPC_ID[npc])
			{
			    TrainInfo[train][trPlayback]++;
				new station = GetTrainStation(npcid);
				if(npc != NPC_TrainDriver3)
				{
			   		format(string, 128, "[Railway Station]: Поезд прибыл на станцию, остановка: %d сек.", StationInfo[station][stStop]);
			   		SendRadiusMessageEx(StationInfo[station][stPos][0], StationInfo[station][stPos][1], StationInfo[station][stPos][2], 50.0, COLOR_LIGHTBLUE, string);
				}
				if(TrainInfo[train][trPlayback] == TrainInfo[train][trAllStations])
				{// Проверка для начала нового цикла
					new finished;
					for(new t; t < sizeof(TrainInfo); t++)
					    if(TrainInfo[t][trPlayback] == TrainInfo[t][trAllStations])
					        finished++;
					if(finished == sizeof(TrainInfo))
					{
						SetTimer("StartTrainCycle", StationInfo[station][stStop] * 1000, false);
					}
				}
				else
				{
				    if(npc == NPC_TrainDriver3)	SetTimerEx("NextTrainPlayback", 60000, 0, "d", 2);
				    else 						SetTimerEx("NextTrainPlayback", StationInfo[station][stStop] * 1000, 0, "d", train);

				    if(npc == NPC_TrainDriver1)			UpdateStationTime(station, 835);
				    else if(npc == NPC_TrainDriver2)	UpdateStationTime(station, 315);
				}
		    }
		}
		//}
		return true;
	}

	/*public FCNPC_OnVehicleExitComplete(npcid)
	{
		print("NPC Train exit vehicle");

	    for( new i = 0; i < sizeof(TrainInfo); i++ )
		{
			if( TrainInfo[ i ][ trNPC ] != npcid )
			    continue;
			FCNPC_StopRecordingPlayback( npcid );
	   		TrainInfo[ i ][ trPlaybackCycle ] = 0;
		}
		return true;
	}*/
#elseif defined RNPC_VERSION
	public OnRNPCPlaybackFinished(npcid)
	{
		new string[128];
		for(new train = 0; train < sizeof(TrainInfo); train++)
		{
		    new npc = TrainInfo[train][trNPC];
			if(npcid == NPC_ID[npc])
			{
			    TrainInfo[train][trPlayback]++;
				new station = GetTrainStation(npcid);
				if(npc != NPC_TrainDriver3)
				{
			   		format(string, 128, "[Railway Station]: Поезд прибыл на станцию, остановка: %d сек.", StationInfo[station][stStop]);
			   		SendRadiusMessageEx(StationInfo[station][stPos][0], StationInfo[station][stPos][1], StationInfo[station][stPos][2], 50.0, COLOR_LIGHTBLUE, string);
				}
				if(TrainInfo[train][trPlayback] == TrainInfo[train][trAllStations])
				{// Проверка для начала нового цикла
					new finished;
					for(new t; t < sizeof(TrainInfo); t++)
					    if(TrainInfo[t][trPlayback] == TrainInfo[t][trAllStations])
					        finished++;
					if(finished == sizeof(TrainInfo))
					{
						SetTimer("StartTrainCycle", StationInfo[station][stStop] * 1000, false);
					}
				}
				else
				{
				    if(npc == NPC_TrainDriver3) SetTimerEx("NextTrainPlayback", 60000, 0, "d", 2);
				    else SetTimerEx("NextTrainPlayback", StationInfo[station][stStop]*1000, 0, "d", train);

				    if(npc == NPC_TrainDriver1) UpdateStationTime(station, 835);
				    else if(npc == NPC_TrainDriver2) UpdateStationTime(station, 315);
				}
		    }
		}
		return true;
	}
#endif

Public: StartTrainCycle()
{
	print("[TRAIN]: Starting train cycle...");
	for(new train; train < sizeof(TrainInfo); train++)
	{
	    TrainInfo[train][trPlayback] = 0;
		NextTrainPlayback(train);
	}
	new interval;
	for(new s; s < sizeof(StationInfo); s++)
	{
	    if(s != 0 && s != 2) interval += StationInfo[s][stStop];
	    else interval = 0;
		interval += StationInfo[s][stInterval];
		UpdateStationTime(s, interval);
	}
	return 1;
}

Public: NextTrainPlayback(train)
{
    new string[64], npc = TrainInfo[train][trNPC];
	if(TrainInfo[train][trPlayback] <= TrainInfo[train][trAllStations])
	{
		format(string, 64, "train_%d_%d", train + 1, TrainInfo[train][trPlayback]);
		printf(string);
	#if defined _FCNPC_included
		if(FCNPC_StartPlayingPlayback(NPC_ID[npc], string))
 #elseif defined RNPC_VERSION
		if(RNPC_StartPlayback(NPC_ID[npc], string))
	#else
		if(false)
	#endif
		{
		    //printf("[TRAIN]: TrainDriver%d start record (%s)", train, string);
		}
		else
		{
		    printf("ERROR! TrainDriver%d error start record (%s)", train, string);
		}
	}
	return 1;
}

GetTrainStation(npcid)
{
	new Float:X, Float:Y, Float:Z;
#if defined _FCNPC_included
	FCNPC_GetPosition(npcid, X, Y, Z);
#else
	GetPlayerPos(npcid, X, Y, Z);
#endif
	for(new Float:Dist, s; s < sizeof(StationInfo); s++)
	{
	    Dist = floatsqroot((X - StationInfo[s][stPos][0]) * (X - StationInfo[s][stPos][0]) + (Y - StationInfo[s][stPos][1]) * (Y - StationInfo[s][stPos][1]) + (Z - StationInfo[s][stPos][2]) * (Z - StationInfo[s][stPos][2]));
	    if(Dist < 100.0) return s;
	}
	return 0;
}

stock UpdateStationTime(station, interval)
{
	new time, hour, minute, second;
	gettime(hour, minute, second);
	time = hour * 3600 + minute * 60 + second + interval;

	hour = time / 3600;
	minute = (time % 3600) / 60;
	if(hour > 23) hour -= 24;

	new string[128];
	format(string, 128, "%s\nСледующий поезд: [%02d:%02d]", StationInfo[station][stName], hour, minute);
	UpdateDynamic3DTextLabelText(RailStation3DText[station], 0x33CCFFFF, string);
}

//	---
CreateGotoSmoke(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	DeletePVar(playerid, "Player:GotoSmoke:Timer");
	DestroyDynamicObject(GotoObject[playerid]);
	GotoObject[playerid] = CreateDynamicObject(18737, X, Y, Z - 2.6, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
	SetPVarInt(playerid, "Player:GotoSmoke:Timer", SetTimerEx("DestroyGotoSmoke", 3000, false, "i", playerid));
}

Public: DestroyGotoSmoke(playerid)
{
	DestroyDynamicObject(GotoObject[playerid]);
	GotoObject[playerid] = INVALID_STREAMER_ID;
	return 1;
}

KickEx(playerid)
{
	Iter_Remove(LoginPlayer, playerid);
	return SetTimerEx("KickPlayer", 1000, 0, "d", playerid);  //	Fix kick
}

Public: KickPlayer(playerid)
{
	return Kick(playerid);
}

///////	WEAPON SYSTEM
GetWeaponSlot(weaponid)
{
    if(0 <= weaponid < sizeof(GunParams) && GunParams[weaponid][GUN_EXIST])
    {
        return GunParams[weaponid][GUN_SLOT];
    }
    return 255;
}

stock MyChangePlayerWeapon(playerid, bool:status)
{	//	status: true - сохранить в резервный, false - вернуть в основной
	if(gWeaponStatus{playerid} == status)
	{
		return false;	//	ошибка при попытке перезаписи уже сохраненного оружия
	}
	gWeaponStatus{playerid} = status;
	/*if(gWeaponStatus{playerid})
	{
		for(new i = 0; i < 13; i++)
		{
			gWeaponID[playerid][i]		= MyGetPlayerWeaponID(playerid, i);
			gWeaponAmmo[playerid][i]	= MyGetPlayerWeaponAmmo(playerid, i);
		}
		MyResetPlayerWeapons(playerid);
	}
	else
	{
		MyResetPlayerWeapons(playerid);
		for(new i = 0; i < 13; i++)
		{
			if(gWeaponID[playerid][i] == 0)	continue;
			MyGivePlayerWeapon(playerid, gWeaponID[playerid][i], gWeaponAmmo[playerid][i]);
			gWeaponID[playerid][i] = 0,	gWeaponAmmo[playerid][i] = 0;
		}
	}*/
	SetPlayerArmedWeapon(playerid, 0);
	return true;
}

//---
Public: SyncRopeAnim(playerid)
{
	if(GetPVarInt(playerid, "Roped") == 0) return 0;
	ApplyAnimation(playerid, "ped", "abseil", 4.0, 0, 0, 0, 1, 0);
	SetTimerEx("SyncRopeAnim", 250, false, "i", playerid);
	return true;
}

//  breaking system
Public: BreakCar(playerid, type, step)
{
	if(Job.GetPlayerJob(playerid) != JOB_THEFT)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Только угонщик может взламывать машину.");
	}
	new v = GetPVarInt(playerid, "LastLockCar");
	if(v == 0)	return false;
	if(type == BREAK_CAR_B_GLASS) //  открытие авто через разбитие стекла
	{
		if(step == 0)
		{
			DeletePVar(playerid, "StartLockTimer");
			new Float:carX, Float:carY, Float:carZ;
			GetVehiclePos(v, carX, carY, carZ);
	        if(IsPlayerInRangeOfPoint(playerid, 3, carX, carY, carZ) && VehInfo[v][vLocked] == 1)
			{
				new Float:plX, Float:plY, Float:plZ, Float:carA;
				GetVehicleZAngle(v, carA);
				GetPlayerPos(playerid, plX, plY, plZ);
			    new A = floatround(floatabs(atan2(carX - plX, carY - plY) + carA));
				if(A > 360) A -= 360;
				if((A >= 65 && A <= 120) || (A >= 235 && A <= 285))
				{
					if(MyApplyAnimation(playerid, "FIGHT_D", "FightD_3", 10.0, 0, 1, 0, 0, BREAK_CAR_GLASS_TIME, 1))
					{
						SetPVarInt(playerid, "BreakCarTimer", SetTimerEx("BreakCar", BREAK_CAR_GLASS_TIME, 0, "ddd", playerid, BREAK_CAR_B_GLASS, 1 ));
						SetPVarInt(playerid, "BreakCarGlass", 1);
					}
				}
				else    ShowPlayerHint(playerid, "~w~Для взлома подойдите к одной из дверей");
			}
			else	DeletePVar(playerid, "LastLockCar");
			return true;
		}
		else if(step == 1)
		{
			if(!GetPVarInt(playerid, "BreakCarGlass"))
			    return false;
			PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);  // 1095, 1140
			setVehicleAlarm(v, true, 30);
		 	switch(random(10))
		 	{
		 	    case 0..6:
				{//	не разбилось
					if(MyApplyAnimation(playerid, "FIGHT_D", "FightD_3", 4.1, 0, 1, 1, 0, BREAK_CAR_GLASS_TIME, 1))
					{
						SetPVarInt(playerid, "BreakCarTimer", SetTimerEx( "BreakCar", BREAK_CAR_GLASS_TIME, 0, "ddd", playerid, BREAK_CAR_B_GLASS, 1));
					}
					return true;
				}
				default:
				{//	разбилось
		            CrimePlayer(playerid, CRIME_HOOLIGAN);
					clearBreakGlassCar(playerid);
				}
		 	}
		}
	}
	else if(type == BREAK_CAR_HACKING) //  взлом авто с отмычкой
	{
	    if(step == 0 && GetPlayerComb(playerid) == COMB_NONE)
	    {   //  начало взлома
			DeletePVar(playerid, "StartLockTimer");
			new Float:carX, Float:carY, Float:carZ;
			GetVehiclePos(v, carX, carY, carZ);
	        if(IsPlayerInRangeOfPoint(playerid, 3, carX, carY, carZ) && VehInfo[v][vLocked] == 1)
			{
				new Float:plX, Float:plY, Float:plZ, Float:carA;
				GetVehicleZAngle(v, carA);
				GetPlayerPos(playerid, plX, plY, plZ);
			    new A = floatround(floatabs(atan2(carX - plX, carY - plY) + carA));
				if(A > 360) A -= 360;
				if((A >= 65 && A <= 120) || (A >= 235 && A <= 285))
				{
					//stmp = "~r~";
					//new bool:comb[BREAK_CAR_CODE_LEN];
					//for(new i; i < BREAK_CAR_CODE_LEN; i++)
					//{
					//	if((VehInfo[v][vBitHack] >> i ^ 0) & 1) comb[i] = false;
					//	else 									comb[i] = true;
					//}
					
					new start[6], len[6];
					for(new i = 0; i < 6; i++)
					{
						len[i] = 10 + random(30);
						start[i] = random(100 - len[i]);
					}
					SetPlayerHackLock(playerid, start, len);

					//ShowPlayerHint(playerid, "~w~Для взлома поворачивайте отмычку влево и вправо~n~(~y~Num 4~w~ и ~y~Num 6~w~)");
				}
				else    ShowPlayerHint(playerid, "~w~Для взлома подойдите к одной из дверей");
			}
			else	DeletePVar(playerid, "LastLockCar");
			return true;
	    }
		else if(step == 1)
		{   //  открыл
			clearHackCar(playerid);
			SuccesAnim(playerid);
		}
	}
	else if(type == BREAK_CAR_ENGINE) //  взлом двигателя автомобиля
	{
		if(step == 0)
		{
		    new time = 700 + (random(5) + 1) * 100;
		    SetPVarInt( playerid, "BreakEngineTimer", SetTimerEx("BreakCar", time, false, "ddd", playerid, BREAK_CAR_ENGINE, 1));
			GameTextForPlayer(playerid, "~w~Breaking engine...", time, 4);
		}
		else if(step == 1)
		{
		    if(random(4) == 0)
			{
                PlayerAction(playerid, "соединяет провода замка зажигания.");
                StartEngine(v, true);	//  завелась
			}
      		else
      		{
				switch(random(5))
				{
					case 1:	callcmd::lights(playerid, "");	//  Включатся/выключатся фары
					case 2:
					{	//  Ударит током (хп-10, звук электричества, красный экран как при повреждениях)
						MySetPlayerHealth(playerid, MyGetPlayerHealth(playerid) - 10.0);
						FadeColorForPlayer(playerid, 255, 0, 0, 100, 255, 0, 0, 0, 10);
						PlayerPlaySound(playerid, 6402, 0.0, 0.0, 0.0);
					}
					case 3:
					{	//  Включится/выключится сигнализация
						if(getVehicleAlarm(v))	setVehicleAlarm(v, false);
						else
						{
						    foreach(Cop, copid)
						    {
								if(GetDistanceBetweenPlayers(playerid, copid) <= 50 && GetPlayerState(copid) != PLAYER_STATE_SPECTATING)
								{
								    CrimePlayer(playerid, CRIME_THEFT_AUTO);
								    ShowPlayerHint(playerid, "Сигнализация привлекла внимание проезжающего наряда полиции");
									break;
								}
							}
							setVehicleAlarm(v, true, 30);
						}
					}
					case 4:
					{	//  Откроется багажник
				        if(GetVehicleBoot(v) == false)
						{
							SetVehicleBoot(v, true);
						}
					}
				}
				GameTextForPlayer(playerid, "~r~Failed...", 1000, 4);
		    }
		    DeletePVar(playerid, "LastLockCar");
		    DeletePVar(playerid, "BreakEngineTimer");
		}
		return true;
	}
	else	
	{
		return false;
	}
	//  успешно взломал/разбил стекло
	GameTextForPlayer(playerid, "~w~Vehicle ~g~Unlocked", 3000, 4);
	VehInfo[v][vLocked] = 0;
    UpdateVehicleParamsEx(v);
	return true;
}

stock clearBreakGlassCar(playerid)
{
	DeletePVar(playerid, "BreakCarGlass");
	DeletePVar(playerid, "LastLockCar");
	return true;
}

stock clearHackCar(playerid)
{
 	//ClearAnimations(playerid);
    DeletePVar(playerid, "LastLockCar");
	return true;
}

stock OnActorReaction(playerid, targetid)
{
	new string[128];
	// Не зависят от миссий //
	if(targetid == ACTOR[A_EMMET])
	{
	    if(IsGang(PlayerInfo[playerid][pFaction]))
	    {
		    return ShowDialog(playerid, DNPC_EMMET);
	    }
	}

#if defined	_job_job_theft_included
	else if(targetid == ACTOR[A_AUTOTHEFT])
	{
		return Dialog_Show(playerid, Dialog:Theft_Main);
	}
#endif	

	/*else if(targetid == ACTOR[A_GUNDEAL])
	{
		//if(PlayerInfo[playerid][pGunDealLic] == 0)
		//{// [BT] Временно выключено, пока нет мафий
		//	SendLocalMessage(targetid, playerid, "Для начала покажи мне разрешение Русской мафии на работу здесь");
		//	return true;
		//}
		if(!IsAvailableJob(playerid, JOB_GUNDEAL))
		{
			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете устроиться на работу находясь в этой фракции.");
			return true;
		}
		if(PlayerInfo[playerid][pLevel] < 4)
		{
	        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта работа доступна только с 4 уровня.");
			return true;
		}
		//if(Job.GetPlayerJob(playerid) != JOB_NONE)
		//{// Здесь должна быть проверка на контракт
		//	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы уже работаете кем-то.");
		//}
		if(Job.GetPlayerJob(playerid) == JOB_GUNDEAL)
		{
			SendLocalMessage(targetid, playerid, "Скупай металл и перерабатывай его на заводе. Все необходимое найдешь в навигаторе (/gps)");
			return true;
		}
		if(MyGetPlayerMoney(playerid) < 500)
		{
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег для покупки этой работы (500$).");
		}
		if(AskPlayer(INVALID_PLAYER_ID, playerid, ASK_INVITE_JOB, 60))
		{
			AskAmount[playerid] = JOB_GUNDEAL;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Вы собрались устроиться {FFFFFF}Торговцем оружия "ASK_CONFIRM_INFO);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Без разрешения от Русской мафии стоимость устройства $500!");	//	временно
			if(Job.GetPlayerJob(playerid) != JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "Ваша нынешняя работа сбросится, если вы согласитесь!");
			return 1;
		}
		else
		{
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сначала примите или отклоните текущий запрос.");
		}
	}
	else if(targetid == ACTOR[A_DRUGDEAL])
	{
		//if(PlayerInfo[playerid][pDrugDealLic] == 0)
		//{// [BT] Временно выключено, пока нет мафий
		//	SendLocalMessage(targetid, playerid, "Для начала покажи мне разрешение Yakuza на работу здесь");
		//	return true;
		//}
		if(!IsAvailableJob(playerid, JOB_DRUGDEAL))
		{
			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете устроиться на работу находясь в этой фракции.");
			return true;
		}
		if(PlayerInfo[playerid][pLevel] < 4)
		{
	        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта работа доступна только с 4 уровня.");
			return true;
		}
		//if(Job.GetPlayerJob(playerid) != JOB_NONE)
		//{
		//	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы уже работаете кем-то.");
		//}
		if(Job.GetPlayerJob(playerid) == JOB_DRUGDEAL)
		{
			SendLocalMessage(targetid, playerid, "Скупай растения и перерабатывай их на заводе. Все необходимое найдешь в навигаторе (/gps).");
			return true;
		}
		if(MyGetPlayerMoney(playerid) < 500)
		{
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег для покупки этой работы (500$).");
		}
		if(AskPlayer(INVALID_PLAYER_ID, playerid, ASK_INVITE_JOB, 60))
		{
			AskAmount[playerid] = JOB_DRUGDEAL;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Вы собрались устроиться {FFFFFF}Наркодиллером "ASK_CONFIRM_INFO);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Без разрешения от Yakuza стоимость устройства $500!");	//	временно
			if(Job.GetPlayerJob(playerid) != JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "Ваша нынешняя работа сбросится, если вы согласитесь!");
			return 1;
		}
		else
		{
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сначала примите или отклоните текущий запрос.");
		}
	}*/

	else if(targetid == ACTOR[A_AUTOSCHOOL])
	{
		return true;
	}
	else if(targetid == ACTOR[A_BANK])	//	Банкир
	{
		return ShowDialog(playerid, DMODE_BANK);
	}
	else if(targetid == ACTOR[A_CITYHALL2])	//	Трудоустрйоство
	{
	    return ShowDialog(playerid, DMODE_JOBLIST);
	}
	else if(targetid == ACTOR[A_POLICE_DUTY])
	{
		if(PlayerInfo[playerid][pFaction] == F_POLICE)
		{
		    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK)
		    {
		        SendLocalMessage(targetid, playerid, "Кофе на сегодня закончилось, приходите позже");
		        return true;
		    }

	        if(random(2)) 	SendLocalMessage(targetid, playerid, "Выпейте чашку кофе перед работой, офицер");
	        else 			SendLocalMessage(targetid, playerid, "Пришли за еще одной чашечкой кофе?");

			playerDrink{playerid} = 5;
			playerDrinkCount{playerid} = 5;
			MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			return true;
		}
		else
		{
			return ShowDialog(playerid, DMODE_POLICE_DUTY);
		}
	}
	else if(targetid == ACTOR[A_POLICE_DUTY2] || targetid == ACTOR[A_POLICE_DUTY3])
	{
		return true;
	}
	else if(targetid == ACTOR[A_HOSPITAL])
	{
		return ShowDialog(playerid, DMODE_HOSPITAL);
	}
	else if(targetid == ACTOR[A_HOTDOGER] || targetid == ACTOR[A_HOTDOGER2] || targetid == ACTOR[A_HOTDOGER3])
	{
		if(AskPlayer(INVALID_PLAYER_ID, playerid, ASK_BUY_HOTDOG))
		{
			AskAmount[playerid] = targetid;
			SendFormatMessage(playerid, COLOR_WHITE, string, "Продавец предлагает вам купить хот дог за 5$ "ASK_CONFIRM_INFO, ReturnPlayerName(playerid));
			return true;
		}
		else
		{
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас есть не принятый запрос, попробуйте позже.");
		}
	}
	else if(targetid == ACTOR[A_NEWBIE])
	{
		if(mission_id[playerid] == MIS_HOTEL)
		{
			return SendLocalMessage(targetid, playerid, "Если тебе нужен номер, то тебе к окну регистрации");
		}
		else if(mission_id[playerid] == MIS_TRAINING)
		{
			if(mission_step[playerid] == 0)			return ShowDialog(playerid, DMIS_TRAINING1);
			else if(mission_step[playerid] == 2)	return ShowDialog(playerid, DMIS_TRAINING2);
		}
	}

#if defined	_job_part_loader_included
	else if(targetid == ACTOR[A_DEREK])
	{
	    return Dialog_Show(playerid, Dialog:Loader_Main);
	}
#endif	

	else
	{
		for(new b = 0; b < MaxBiz; b++)
		{
			if(targetid == BizInfo[b][bActor])
			{
				if(BizInfo[b][bRobbery] != INVALID_PLAYER_ID)
				{
					return ShowPlayerHint(playerid, "Недоступно во время ограбления");
				}
				return ShowBizMenu(playerid, b);
			}
		}

		for(new i = 0; i < sizeof(ACTOR); i++)
		{
			if(ACTOR[i] == targetid && !ActorInfo[i][a_Hint])
			{
				return true;
			}
		}
	}
	// Нет текущей миссии //
	if(mission_id[playerid] == 0)
	{
		SendLocalMessage(targetid, playerid, "Пока мне нечего тебе сказать, приходи позже");
	}
	else
	{
		switch(random(3))
	    {
			case 0: SendLocalMessage(targetid, playerid, "У тебя есть дела поважнее");
			case 1: SendLocalMessage(targetid, playerid, "Тебе и так есть, чем заняться");
			case 2: SendLocalMessage(targetid, playerid, "Приходи, когда разберешься со своими делами");
		}
	}
	return true;
}

Public: MissionTimer(playerid)
{
	switch(mission_id[playerid])
	{
		case MIS_NONE: return 1;
		default:
		{
			if(mission_timer[playerid] > 0)
			{
				KillTimer(mission_timer[playerid]);
				mission_timer[playerid] = 0;
			}
		}
	}
	return 1;
}

//	Combs System
public OnPlayerSelectComb(playerid, source, bool:comb)
{
	switch(source)
	{
		case COMB_JAILJOB:
		{
			GameTextForPlayer(playerid, RusText("~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Работа...", isRus(playerid)), 1500, 3);
			return 1500;
		}
		case COMB_CREATE_GUN:
		{
			GameTextForPlayer(playerid, RusText("~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Сборка...", isRus(playerid)), 1500, 3);
			return 2000;
		}
		case COMB_CREATE_DRUG:
		{
			GameTextForPlayer(playerid, RusText("~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Переработка...", isRus(playerid)), 1500, 3);
			return 2000;
		}
	}
	return 0;
}

public OnPlayerCombFinish(playerid, source, bool:fail)
{
	new string[128];
	switch(source)
	{
		case COMB_JAILJOB:
		{
			JailJobFinish(playerid, fail ? false : true);
		}
		case COMB_CREATE_GUN:
		{
			new mats = GetPVarInt(playerid, "GunDealMats"); DeletePVar(playerid, "GunDealMats");
  			new weapon = GetPVarInt(playerid, "GunDealWeapon"); DeletePVar(playerid, "GunDealWeapon");
  			new ammo = GetPVarInt(playerid, "GunDealAmmo"); DeletePVar(playerid, "GunDealAmmo");
  			ClearAnimations(playerid);
			if(fail)
			{
				GameTextForPlayer(playerid, "~r~ failed", 2000, 1);
				LoseAnim(playerid);
			}
			else
			{
	  			if(IsMafia(PlayerInfo[playerid][pFaction]))//Job.GetPlayerJob(playerid) != JOB_GUNDEAL)
	  			{
		    		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не продавец оружия.");
		    		LoseAnim(playerid);
		    		return false;
		    	}
				new count = Inv.GetThing(playerid, THING_GUN_MATS);
				if(count < mats)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Недостаточно материалов.");
					LoseAnim(playerid);
					return false;
				}
				Inv.PlayerDeleteThing(playerid, THING_GUN_MATS, 0, mats);
	    		format(string, sizeof(string), "собрал оружие (%s)", ReturnWeaponName(weapon));
	    		PlayerAction(playerid, string);
				Inv.GivePlayerWeapon(playerid, weapon, ammo);
				SuccesAnim(playerid);
			}
			foreach(Cop, c)
			{
				if(GetDistanceBetweenPlayers(playerid, c) < 30.0)
				{
					CrimePlayer(playerid, CRIME_CREATE_GUN);
					break;
				}
			}
		}
		case COMB_CREATE_DRUG:
		{
			if(fail)
			{
				GameTextForPlayer(playerid, "~r~ failed", 2000, 1);
				LoseAnim(playerid);
			}
			else
			{
				if(IsMafia(PlayerInfo[playerid][pFaction]))//Job.GetPlayerJob(playerid) != JOB_DRUGDEAL)
				{
		    		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не наркодиллер.");
		    		LoseAnim(playerid);
		    		return false;
		    	}
		    	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2164.1, -249.25, 36.51))
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не на месте переработки.");
					LoseAnim(playerid);
					return false;
		    	}
				new count = Inv.GetThing(playerid, THING_DRUGS_MATS);
		    	if(Inv.AddPlayerThing(playerid, THING_DRUGS, count * 10) == 0)
				{
					LoseAnim(playerid);
					return false;
				}
				Inv.PlayerDeleteThing(playerid, THING_DRUGS_MATS, 0, count);
				PlayerAction(playerid, "изготавливает наркотики.");
			    SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы переработали %d травы и получили %d наркотиков", count, count * 10);
			    SuccesAnim(playerid);
			}
			foreach(Cop, c)
			{
				if(GetDistanceBetweenPlayers(playerid, c) < 30.0)
				{
					CrimePlayer(playerid, CRIME_CREATE_DRUGS);
					break;
				}
			}
		}
	}
	return false;
}

//  Спорт
stock GivePlayerPower(playerid, Float:power)
{
	new a = floatround(PlayerInfo[playerid][pPower], floatround_floor);
	PlayerInfo[playerid][pPower] += power * ((PlayerInfo[playerid][pVip]) ? (1.2) : (1.0));
	new b = floatround(PlayerInfo[playerid][pPower], floatround_floor);
	if(b > a)	RepBarShow(playerid, "Ваша сила выросла:", a, b);
	return true;
}

//	жим лежа
Public: BenchpressNext(playerid, action)
{
	switch(action)
	{
		case BENCHSTEP_START_DOWN:
		{
			Streamer_RemoveArrayData(STREAMER_TYPE_OBJECT, g_BenchpressObject[ playerBenchUsed{playerid} - 1 ], E_STREAMER_PLAYER_ID, playerid);
			Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
	        SetPlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND, 2913, 5, 0.099, 0.0039, 0.0606, 9.7105, -177.8293, 58.15, 1.0, 1.0, 1.0);
	        BenchpressStepTimer[playerid] = SetTimerEx("BenchpressNext", 600, false, "ii", playerid, BENCHSTEP_START_READY);
	        ShowPlayerHint(playerid, "Нажимайте ~y~~k~~PED_SPRINT~~w~~n~пока шкала справа не заполнится");
		}
		case BENCHSTEP_START_READY:
		{
			if(PlayerInfo[playerid][pJailTime])
			{
				HidePlayerPrisonTime(playerid);
			}
			GymBlockKey{playerid} = false;
		    ProgressBarUpdate(playerid, playerBenchStep{playerid}, 100);
	        PlayerTextDrawSetString(playerid, InfoBar, RusText("Повторений: 0", PlayerInfo[playerid][pRusifik]));
	        PlayerTextDrawShow(playerid, InfoBar);

	        BenchpressTimer[playerid] = SetTimerEx("BenchpressUpdate", 100, true, "i", playerid);
		}
		case BENCHSTEP_DOWN_FINISH:	//  finish DOWN
		{
			ProgressBarUpdate(playerid, playerBenchStep{playerid}, 100);
		    GymBlockKey{playerid} = false;
		}
	 	case BENCHSTEP_UP_FINISH:	//  finish UP
	 	{
		 	GymCount{playerid}++;
			GivePlayerPower(playerid, 0.1);
			if(++PlayerInfo[playerid][pTraining] >= MAX_TRAINING)
			{
				BenchpressEND(playerid);
				ShowPlayerHint(playerid, "Вы достаточно потренеровались, приходите позже!");
			}
			else if(PlayerInfo[playerid][pPower] >= 100.0)
			{
				//	---	achievements
			#if defined _player_achieve_included	
				GivePlayerAchieve(playerid, ACHIEVE_ARNOLD);
			#endif
				BenchpressEND(playerid);
			}
			else
			{
				BenchpressDOWN(playerid);
		    	BenchpressStepTimer[playerid] = SetTimerEx("BenchpressNext", 900, false, "ii", playerid, BENCHSTEP_DOWN_FINISH);
			}
			new string[32];
			format(string, 32, "Повторений: %d", GymCount{playerid});
			PlayerTextDrawSetString(playerid, InfoBar, RusText(string, PlayerInfo[playerid][pRusifik]));
	 	}
	 	case BENCHSTEP_FINISH_UP:
	 	{
	 	    RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND);
	 	    new i = playerBenchUsed{playerid} - 1;
	 	    Streamer_AppendArrayData(STREAMER_TYPE_OBJECT, g_BenchpressObject[i], E_STREAMER_PLAYER_ID, playerid);
	 	    Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
	 	    BenchpressStepTimer[playerid] = SetTimerEx("BenchpressNext", 6200, false, "ii", playerid, BENCHSTEP_FINISH_ALL);

	 	}
	 	case BENCHSTEP_FINISH_ALL:	//  finish
		{
			IFace.ToggleGroup(playerid, IFace.TV_EFFECT, false);
		    SetCameraBehindPlayer(playerid);
		    BlockPlayerAnimation(playerid, false);
		    MyApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.1, 0, 0, 0, 0, 0);
		    BenchpressUsed[ playerBenchUsed{playerid} - 1 ] = false;
		    playerBenchUsed{playerid} = 0;
			GymCount{playerid} = 0;
			GymBlockKey{playerid} = false;
		}
	}
	return true;
}

Public: BenchpressUpdate(playerid)
{
	if(playerBenchStep{playerid} == 0)
	    return true;
	if(playerBenchStep{playerid} < 100)
	{
		BenchpressDOWN(playerid);
	    if(playerBenchStop{playerid})   playerBenchStop{playerid} = false;
	    else							playerBenchStep{playerid} = (playerBenchStep{playerid} - 4 < 0) ? 0 : (playerBenchStep{playerid} - 4);
		ProgressBarUpdate(playerid, playerBenchStep{playerid}, 100);
	}
	else
	{
	    GymBlockKey{playerid} = true;
		playerBenchStep{playerid} = 0;
	    BenchpressStepTimer[playerid] = SetTimerEx("BenchpressNext", 500, false, "ii", playerid, BENCHSTEP_UP_FINISH);
	}
	return true;
}

BenchpressUP(playerid)
{
	if(GymAnimState{playerid} == BENCHPRESS_UP)  return true;
	GymAnimState{playerid} = BENCHPRESS_UP;
	return MyApplyAnimation(playerid, "benchpress", "gym_bp_up_smooth", 4.1, 0, 0, 0, 1, 0);
}

BenchpressDOWN(playerid)
{
	if(GymAnimState{playerid} == BENCHPRESS_DOWN)  return true;
	GymAnimState{playerid} = BENCHPRESS_DOWN;
	return MyApplyAnimation(playerid, "benchpress", "gym_bp_down", 4.1, 0, 0, 0, 1, 0);
}

BenchpressEND(playerid)
{
    new i = playerBenchUsed{playerid} - 1;

    //	=========================	Set Camera Pos 	=========================
	new Float:CameraPos[3],
		Float:PlayerCameraPos[3],
		Float:PlayerCameraVector[3];
	const Float:fScale = 5.0;

	GetPlayerCameraPos(playerid, Arr3<PlayerCameraPos>);
	GetPlayerCameraFrontVector(playerid, Arr3<PlayerCameraVector>);

	PlayerCameraVector[0] = PlayerCameraPos[0] + floatmul(PlayerCameraVector[0], fScale);
	PlayerCameraVector[1] = PlayerCameraPos[1] + floatmul(PlayerCameraVector[1], fScale);
	PlayerCameraVector[2] = PlayerCameraPos[2] + floatmul(PlayerCameraVector[2], fScale);

    CameraPos[0] = BenchpressPos[i][0] - 3.5 * floatsin(-BenchpressPos[i][3], degrees);
	CameraPos[1] = BenchpressPos[i][1] - 3.5 * floatcos(-BenchpressPos[i][3], degrees);
	CameraPos[2] = BenchpressPos[i][2] + 1.0;

	InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, Arr3<CameraPos>, 5000);
	InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, Arr3<BenchpressPos[i]>, 5000);
	//	======================================================================

	KillTimer(BenchpressTimer[playerid]);
	ProgressBarHide(playerid);
	PlayerTextDrawHide(playerid, InfoBar);
    MyApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 4.1, 0, 0, 0, 0, 0);
    KillTimer(BenchpressStepTimer[playerid]);

    if(PlayerInfo[playerid][pJailTime])
		ShowPlayerPrisonTime(playerid);

	GymBlockKey{playerid} = true;
	BenchpressStepTimer[playerid] = SetTimerEx("BenchpressNext", 1800, false, "ii", playerid, BENCHSTEP_FINISH_UP);
    return true;
}

BenchpressClear(playerid)
{
	if(playerBenchUsed{playerid})
	{
		KillTimer(BenchpressTimer[playerid]);
		KillTimer(BenchpressStepTimer[playerid]);
		ProgressBarHide(playerid);
		IFace.ToggleGroup(playerid, IFace.TV_EFFECT, false);
		PlayerTextDrawHide(playerid, InfoBar);
		SetCameraBehindPlayer(playerid);
		//BlockPlayerAnimation(playerid, false);

		if(PlayerInfo[playerid][pJailTime])
			ShowPlayerPrisonTime(playerid);

		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND);
		new i = playerBenchUsed{playerid} - 1;
		Streamer_AppendArrayData(STREAMER_TYPE_OBJECT, g_BenchpressObject[i], E_STREAMER_PLAYER_ID, playerid);
		Streamer_Update(playerid, STREAMER_TYPE_OBJECT);

		BenchpressUsed[i] = false;
		playerBenchUsed{playerid} = 0;
		GymCount{playerid} = 0;
		GymBlockKey{playerid} = false;
	}
    return true;
}

//	Boxing Ring
stock GetNearRing(playerid)
{
	new Float:dist, Float:best_dist, ring = (-1);
	for(new i = 0; i < sizeof(BoxingRingPos); i++){
		dist = GetDistanceFromMeToPoint(playerid, Arr3<BoxingRingPos[i][RING_POS]>);
		if(dist < 8.0)
		{
			if(ring == (-1)){
				best_dist = dist;
				ring = i;
			}
			else if(dist < best_dist){
				ring = i;
			}
		}
	}
	return ring;
}

stock FinishBox(playerid, reason)
{
	if(gPlayerRing[playerid] != (-1))
	{
		new enemy = gPlayerBoxEnemy[playerid];
		BoxingRing[ gPlayerRing[playerid] ][RING_BLUE_PLAYER] = INVALID_PLAYER_ID;
		BoxingRing[ gPlayerRing[playerid] ][RING_RED_PLAYER] = INVALID_PLAYER_ID;
		BoxingRing[ gPlayerRing[playerid] ][RING_STATE] = 0;

		if(reason == 2)	//	ничья
		{
			if(enemy != INVALID_PLAYER_ID)
			{
				GameTextForPlayer(enemy, "~n~~n~~n~~r~Time is over", 5000, 6);
				MySetPlayerPos(enemy, Arr4<gPlayerPosToRing[ enemy ]>);
				ReloadPlayerSkin(enemy);
				LoseAnim(enemy);
				gPlayerBoxEnemy[enemy] = INVALID_PLAYER_ID;
				gPlayerRing[enemy] = (-1);

				GivePlayerPower(enemy, 0.1);
				HidePlayerVisualTimer(enemy);
				HideAttackHealth(enemy);
				if(PlayerInfo[enemy][pJailTime])	ShowPlayerPrisonTime(enemy);
			}

			GameTextForPlayer(playerid, "~n~~n~~n~~r~Time is over", 5000, 6);
			MySetPlayerPos(playerid, Arr4<gPlayerPosToRing[playerid]>);
			ReloadPlayerSkin(playerid);
			LoseAnim(playerid);

			GivePlayerPower(playerid, 0.1);
			HidePlayerVisualTimer(playerid);
			HideAttackHealth(playerid);
			if(PlayerInfo[playerid][pJailTime]){
				ShowPlayerPrisonTime(playerid);
			}
		}
		else
		{
			if(enemy != INVALID_PLAYER_ID)
			{
				GameTextForPlayer(enemy, "~n~~n~~n~~g~You won!!!", 5000, 6);
				MySetPlayerPos(enemy, Arr4<gPlayerPosToRing[ enemy ]>);
				ReloadPlayerSkin(enemy);
				SuccesAnim(enemy);
				gPlayerBoxEnemy[enemy] = INVALID_PLAYER_ID;
				gPlayerRing[enemy] = (-1);

				GivePlayerPower(enemy, 1.0);
				HidePlayerVisualTimer(enemy);
				HideAttackHealth(enemy);
				if(PlayerInfo[enemy][pJailTime])	ShowPlayerPrisonTime(enemy);
			}
			if(reason)
			{
				GameTextForPlayer(playerid, "~n~~n~~n~~r~You lose!", 5000, 6);
				MySetPlayerPos(playerid, Arr4<gPlayerPosToRing[playerid]>);
				ReloadPlayerSkin(playerid);
				LoseAnim(playerid);

				GivePlayerPower(playerid, 0.5);
				HidePlayerVisualTimer(playerid);
				HideAttackHealth(playerid);
				if(PlayerInfo[playerid][pJailTime])	ShowPlayerPrisonTime(playerid);
			}
		}
		MyChangePlayerWeapon(enemy, false);
		MyChangePlayerWeapon(playerid, false);
		PlayerInfo[enemy][pTraining] += 5;
		PlayerInfo[playerid][pTraining] += 5;
		gPlayerBoxEnemy[playerid] = INVALID_PLAYER_ID;
		gPlayerRing[playerid] = (-1);
	}
	return true;
}

//	Hospital
CancelPlayerBerth(playerid)
{
	if(GetPVarType(playerid, "Player:Hospital:Berth") == PLAYER_VARTYPE_INT)
	{
		new berth = GetPVarInt(playerid, "Player:Hospital:Berth");
		UpdateDynamic3DTextLabelText(Berth3DText[berth], COLOR_ACTION, "Койка свободна\n" ACTION_TEXT);
		BerthStatus[berth] = false;
		if(IsPlayerLive(playerid))
		{
			ClearAnimations(playerid);
			MySetPlayerPos(playerid, Arr4<HospitalBerth[berth][1]>);
		}
		TogglePlayerStreamerAllItem(playerid, true);
		DeletePVar(playerid, "Player:Hospital:Berth");
		BlockPlayerAnimation(playerid, false);
	}
}

//---

stock CreateNPCTextLabel(npcid)
{
    new string[128];
    format(string, 128, "%s\n{AFAFAF}(прицелиться + y)", ReturnPlayerName(npcid));// CFB53B
    CreateDynamic3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.15, 20.0, npcid, INVALID_VEHICLE_ID, 1, 0);
}

stock UpdatePlayerGPSZone(playerid)
{
	PlayerTextDrawSetString(playerid, StatusGPS, GetPlayerArea(playerid));
}

//	Carry System
stock IsPlayerCarry(playerid)
{
	return IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_SLOT_IN_HAND);
}

stock CarryUP(playerid, objectid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, Float:sx = 1.0, Float:sy = 1.0, Float:sz = 1.0)
{
	if(IsPlayerCarry(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Ваши руки уже заняты другим предметом.");
		return false;
	}
	KillTimer(CarryTimer[playerid]);
	MyApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0);
	CarryTimer[playerid] = SetPlayerTimerEx(playerid, "_CarryUP", 800, false, "iifffffffff", playerid, objectid, x, y, z, rx, ry, rz, sx, sy, sz);
	return true;
}

stock CarryUPEx(playerid, objectid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, Float:sx = 1.0, Float:sy = 1.0, Float:sz = 1.0)
{
	if(IsPlayerCarry(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Ваши руки уже заняты другим предметом.");
		return false;
	}
	KillTimer(CarryTimer[playerid]);
	_CarryUP(playerid, objectid, x, y, z, rx, ry, rz, sx, sy, sz);
	return true;
}

Public: _CarryUP(playerid, objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:sx, Float:sy, Float:sz)
{
	MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	SetPlayerAttachedObjectEx(playerid, ATTACH_SLOT_IN_HAND, objectid, 1, x, y, z, rx, ry, rz, sx, sy, sz);
	return true;
}

stock CarryDown(playerid)
{
	KillTimer(CarryTimer[playerid]);
	MyApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
	CarryTimer[playerid] = SetPlayerTimerEx(playerid, "_CarryDown", 500, false, "i", playerid);

	#if defined	_job_part_loader_included
		if(Job.GetPlayerNowWork(playerid) && GetTickCount() - LoaderTick[playerid] < 1000)
		{
			new string[128];
			format(string, 128, "[AdmCmd]: Сервер кикает игрока %s[%d] за попытку мошенничества на подработке", ReturnPlayerName(playerid), playerid);
			MySendClientMessageToAll(COLOR_LIGHTRED, string);
			format(string, sizeof(string), " (%d мс)", string, GetTickCount() - LoaderTick[playerid]), Admin_Log(string);
			KickEx(playerid);
		}
	#endif
}

Public: _CarryDown(playerid)
{
	KillTimer(CarryTimer[playerid]);
	MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND);

	#if defined	_job_part_loader_included
		if(LoaderStatus[playerid] && LoaderInfo[LE_STAGE] == 2)
	    {
	    	DestroyDynamicObject(LoaderObject[playerid]), LoaderObject[playerid] = INVALID_STREAMER_ID;
	        LoaderObject[playerid] = CreateDynamicObject(1271, 2144.89990, -2266.10010, 13.57710, 0.0, 0.0, 45.0);
	        MoveDynamicObject(LoaderObject[playerid], 2151.39990, -2272.60010, 13.57710, 1.0, 0.0, 0.0, 45.0);
			Loader_GiveMoney(playerid, 3);
			LoaderStatus[playerid] = false;
			Loader_UpdateMission(playerid);
	        //Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
		}
	#endif
	return true;
}

CarryClear(playerid)
{
	_CarryDown(playerid);
    ClearAnimations(playerid);
}

//	Jail job
JailJobClear(playerid)
{
	if(j_jobstep{playerid} == 0)
	{
		return false;
	}
	else if(j_jobstep{playerid} == 2)
	{
		ProgressBarHide(playerid);
		DestroyDynamicObject(j_JobObj[playerid]), j_JobObj[playerid] = INVALID_STREAMER_ID;
		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND);

		new cp = GetPVarInt(playerid, "jail_job_cp");
		DeletePVar(playerid, "jail_job_cp");
		j_jobcp[cp] = CreateDynamicCP(Arr3<j_fJobPos[cp]>, 0.3, -1, 2, -1, 3.0);
	}
	else if(j_jobstep{playerid} == 11){
		DestroyDynamicMapIcon(j_MapIcon[playerid]), j_MapIcon[playerid] = INVALID_STREAMER_ID;
	}
	if(IsPlayerLive(playerid))	CarryClear(playerid);
	j_jobstep{playerid} = 0;
	return true;
}

Public: JailJobFinish(playerid, success)
{
    ProgressBarHide(playerid);
	RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND);
	DestroyDynamicObject(j_JobObj[playerid]), j_JobObj[playerid] = INVALID_STREAMER_ID;
	MyApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND + 1);
    if(success == 1)
	{
		j_jobstep{playerid}++;
		SetPlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND, 2969, 1, 0.009, 0.344, -0.024, 0.0, 90.0, 0.0);
		MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		GameTextForPlayer(playerid, "~g~ successfully", 1000, 1);
		ShowPlayerHint(playerid, "~w~Отнесите ящик на склад~n~(~y~желтая буква i~w~)");
	}
	else
	{
		j_jobstep{playerid} = 0;
		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND);
		GameTextForPlayer(playerid, "~r~ failed", 1000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "Вы сделали бракованный товар, возьмите еще материала и попробуйте снова!");
		LoseAnim(playerid);
	}
	new cp = GetPVarInt(playerid, "jail_job_cp");
	DeletePVar(playerid, "jail_job_cp");
	j_jobcp[cp] = CreateDynamicCP(Arr3<j_fJobPos[cp]>, 0.3, -1, 2, -1, 3.0);
	return true;
}

stock UpdateJailStorage()
{
    new stmp[128];
    format(stmp, sizeof stmp, "Склад: %d шт.", j_Storage);
    UpdateDynamic3DTextLabelText(j_f3DText, 0xFF8300FF, stmp);
    UpdateDynamic3DTextLabelText(j_l3DText, 0xFF8300FF, stmp);
    return true;
}

Public: FineparkTimer()
{
	new Float:X, Float:Y, Float:Z;
	GetVehiclePos(FineparkVehicle, X, Y, Z);
	if(GetDistanceFromPointToPoint(X, Y, Z, 1576.9026, -1608.4280, 13.5) > 10)
	{// Уехал
	    if(IsVehicleWithEngine(FineparkVehicle) && GetVehicleEngine(FineparkVehicle) || !IsVehicleWithEngine(FineparkVehicle))
	    {// Завелся
		    KillTimer(finepark_timer), finepark_timer = 0;
		    DestroyDynamic3DTextLabel(Finepark3DText), Finepark3DText = Text3D:INVALID_STREAMER_ID;
		    if(VehInfo[ FineparkVehicle ][vDriver] != -1)
				ShowPlayerHint(VehInfo[ FineparkVehicle ][vDriver], "Припаркуйте транспорт~n~командой ~y~/veh park");
		    FineparkVehicle = 0;
		    return true;
	    }
	}
    if(FineparkCount <= 0)
    {	// Время истекло
        MySetVehicleToRespawn(FineparkVehicle);
        return true;
    }
    new string[32];
	format(string, 32, "Осталось: {FFFFFF}%d сек", FineparkCount);
	UpdateDynamic3DTextLabelText(Finepark3DText, 0x2641FEFF, string);
	FineparkCount--;
	return true;
}

Public: RecreateRepairPickup(p)
{
	if(0 <= p < sizeof(AutoRepairPos))
	{
		DestroyDynamicPickup(RepairPickup[p]), RepairPickup[p] = INVALID_STREAMER_ID;
		RepairPickup[p] = CreateDynamicPickup(3096, 14, Arr3<AutoRepairPos[p]>, 0);
	}
}

stock CreateSalon3DText(saloncars[], size, salonname[])
{
	new string[256], vehicleid, modelid;
	for(new x; x < size; x++)
	{
	    vehicleid = saloncars[x];
	    modelid = GetVehicleModel(vehicleid);
	    format(string, 256, "%s\n{8D8DFF}Модель: {FFFFFF}%s(%d)\n{8D8DFF}Стоимость: {FFFFFF}%d$\n{8D8DFF}Лицензия: {FFFFFF}Вождение", salonname, VehParams[modelid-400][VEH_NAME], modelid, VehParams[modelid-400][VEH_PRICE]);
		CreateDynamic3DTextLabel(string, 0x8D8DFFFF, 0.0, 0.0, 1.0, 100.0, INVALID_PLAYER_ID, vehicleid, 1, 0, -1, -1, 5.0);
		VehInfo[vehicleid][vLocked] = 999;
		VehInfo[vehicleid][vBlockMove] = true;
		UpdateVehicleParamsEx(vehicleid);
	}
}

GetSalonVehParams(saloncars[], size, veh[3], v)
{
	veh[0] = saloncars[v];
	veh[1] = (v > 0) ? saloncars[v - 1] : 0;
	veh[2] = (v < size - 1) ? saloncars[v + 1] : 0;
}

//---	TIR
CreateTirTarget(playerid, Float:x, Float:y, Float:z, Float:rx = 88.75)
{
	if(p_ShootingTargetObjects[playerid][0])
	{
		DestroyTirTarget(playerid);
	}
	p_ShootingTargetObjects[playerid][0] = CreatePlayerObject(playerid, 3025, x, y, z, rx, 0.0, 0.0, 70.0);
	z += 0.1;
	for(new i = 1; i < 8; i++)
		p_ShootingTargetObjects[playerid][i] = CreatePlayerObject(playerid, (3017 + i), x, y, z, rx, 0.0, 0.0, 70.0);	//	3018-3024
	return true;
}

MoveTirTarget(playerid, Float:x, Float:y, Float:z, Float:rx = 88.75, Float:speed = 0.05)
{
	if(p_ShootingTargetObjects[playerid][0])
	{
		MovePlayerObject(playerid, p_ShootingTargetObjects[playerid][0], x, y, z, speed, rx, 0.0, 0.0);
		z += 0.1;
		MovePlayerObject(playerid, p_ShootingTargetObjects[playerid][1], x, y, z, speed, rx, 0.0, 0.0);
		MovePlayerObject(playerid, p_ShootingTargetObjects[playerid][2], x, y, z, speed, rx, 0.0, 0.0);
		MovePlayerObject(playerid, p_ShootingTargetObjects[playerid][3], x, y, z, speed, rx, 0.0, 0.0);
		MovePlayerObject(playerid, p_ShootingTargetObjects[playerid][4], x, y, z, speed, rx, 0.0, 0.0);
		MovePlayerObject(playerid, p_ShootingTargetObjects[playerid][5], x, y, z, speed, rx, 0.0, 0.0);
		MovePlayerObject(playerid, p_ShootingTargetObjects[playerid][6], x, y, z, speed, rx, 0.0, 0.0);
		MovePlayerObject(playerid, p_ShootingTargetObjects[playerid][7], x, y, z, speed, rx, 0.0, 0.0);
		return true;
	}
	return false;
}

DestroyTirTarget(playerid)
{
	if(p_ShootingTargetObjects[playerid][0])
	{
		for(new i = 0; i < 8; i++)
		{
			DestroyPlayerObject(playerid, p_ShootingTargetObjects[playerid][i]);
			p_ShootingTargetObjects[playerid][i] = 0;
		}
		return true;
	}
	return false;
}

Public: MovePlayerTarget(playerid)
{
	if(PlayerInfo[playerid][pShooting] == 2)
	{
		MoveTirTarget(playerid, 293.2, -14.0, 1004.0, -1000.0, 1.0);
	}
	else if(PlayerInfo[playerid][pShooting] == 3)
	{
		if(p_ShootingWave{playerid} == 0)
			MoveTirTarget(playerid, 287.0, -6.0, 1004.0, -1000.0, 1.0);
		else if(p_ShootingWave{playerid} == 1)
			MoveTirTarget(playerid, 297.0, -10.0, 1004.0, -1000.0, 1.0);
		else if(p_ShootingWave{playerid} == 2)
			MoveTirTarget(playerid, 287.0, -14.0, 1004.0, -1000.0, 1.0);
	}
	return true;
}

StartPlayerTirShooting(playerid)
{
	if(PlayerInfo[playerid][pShooting] < 1 || PlayerInfo[playerid][pShooting] > 3)
		return false;
	new element = PlayerInfo[playerid][pShooting] - 1;
	p_ShootingWave{playerid} = -1;
	NextShootingTarget(playerid);
	SetPlayerVisualTimer(playerid, TirMissionInfo[element][TIR_TIME], true);
	ProgressBarUpdate(playerid, ((PlayerInfo[playerid][pShooting] - 1) * 3 * 7), (3 * 3 * 7), "Progress");
	GameTextForPlayer(playerid, "~g~Fire!", 1000, 6);
	return true;
}

Public: NextShootingTarget(playerid)
{
	if(++p_ShootingWave{playerid} < 3)
	{
		new element = PlayerInfo[playerid][pShooting] - 1;
		p_ShootingHits{playerid} = 0;
		CreateTirTarget(playerid, Arr3<TirTargetsPos[element][ p_ShootingWave{playerid} ]>);
		MoveTirTarget(playerid,	TirTargetsPos[element][ p_ShootingWave{playerid} ][0] + TIR_MODIFY_POS,
								TirTargetsPos[element][ p_ShootingWave{playerid} ][1],
								TirTargetsPos[element][ p_ShootingWave{playerid} ][2], 360.0);
		SetTimerEx("MovePlayerTarget", 1300, false, "d", playerid);
	}
	else
	{
		if(++PlayerInfo[playerid][pShooting] == 4)
			FinishPlayerShooting(playerid);
		else
		{
			DestroyTirTarget(playerid);
			p_ShootingCountdown{playerid} = 0;
			p_ShootingHits{playerid} = 0;
			p_ShootingWave{playerid} = 0;
			p_isShooting{playerid} = false;
			HidePlayerVisualTimer(playerid);
			ProgressBarHide(playerid);
			MySetPlayerPosFade(playerid, FT_TIR, 293.7, -24.6, 1001.5, 0.0, false, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		}
	}
}

FinishPlayerShooting(playerid, bool:fail = false)
{
	DestroyTirTarget(playerid);
	ProgressBarHide(playerid);
	HidePlayerVisualTimer(playerid);
	MyChangePlayerWeapon(playerid, false);

	p_ShootingCountdown{playerid} = 0;
	p_ShootingHits{playerid} = 0;
	p_ShootingWave{playerid} = 0;
	p_isShooting{playerid} = false;
	PlayerBusy{playerid} = false;
	if(fail)
	{
		GameTextForPlayer(playerid, "~r~Mission Failed", 5000, 4);
		MySetPlayerPosFade(playerid, FT_NONE, 286.23, -30.22, 1001.51, 0.0, false, GetPlayerInterior(playerid), (GetPlayerVirtualWorld(playerid) - playerid - 1000));
		PlayerInfo[playerid][pShooting] = 1;
	}
	else
		MySetPlayerPosFade(playerid, FT_TIR_COMPLETE, 285.6, -32.9, 1001.5, 180.0, false, GetPlayerInterior(playerid), (GetPlayerVirtualWorld(playerid) - playerid - 1000));
	return true;
}

ClearPlayerShooting(playerid, bool:disconnect = false)
{	//	Call only OnPlayerDeath and OnPlayerDisconnect
	if(p_isShooting{playerid})
	{
		if(!disconnect)
		{	//	Change pos
			MyResetPlayerWeapons(playerid);
			HidePlayerVisualTimer(playerid);
		}
		DestroyTirTarget(playerid);
		p_ShootingCountdown{playerid} = 0;
		p_ShootingHits{playerid} = 0;
		p_ShootingWave{playerid} = 0;
		p_isShooting{playerid} = false;
		PlayerBusy{playerid} = false;
	}
	return true;
}

Public: ClearFreezeAnim(playerid)
{
	MyApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 100);
}

//	Drink
Public: ClearPlayerDrink(playerid)
{
	playerDrink{playerid} = 0;
	playerDrinkCount{playerid} = 0;
	PlayerDrunkTime{playerid} = 0;
	MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
}

Public: ClearPlayerSmoke(playerid)
{
	playerSmokeCount{playerid} = 0;
	MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
}

//---	Missions
StoryMissionStart(playerid, source)
{
	new string[128];
	if(source == MIS_SOURCE_TRAINING)
	{
		switch(gMissionProgress[playerid][source])
		{
			case 0:
			{
				mission_id[playerid] = MIS_HOTEL;
				mission_step[playerid] = 0;
				mission_pickup[playerid] = CreateDynamicPickup(19624, 1, 1701.78, -2348.02, 13.50, VW_AIRPORT, 0, playerid);
				TogglePlayerMapIcon(playerid, false);
				if(!isRus(playerid))
				{
					MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Задание",
						"{FFFFFF}Заберите свой чемодан с ленты выдачи багажа.", "Понятно", "", 0);
				}
				else
				{
					SendMissionMessage(playerid, "Заберите свой чемодан с ленты выдачи багажа", 5000, true);
				}
			}
			case 1:
			{
				mission_id[playerid] = MIS_TRAINING;
				if(!isRus(playerid))
				{
					format(string, sizeof(string),
						"{FFFFFF}Поговорите с %sом в отеле\n\n\
						Для взаимодействия с игроками, ботами, машинами\n\
						"MAIN_COLOR"прицельтесь на них и нажмите H", ActorInfo[A_NEWBIE][a_Name]);
					MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Задание", string, "Понятно", "", 0);
				}
				else
				{
					ShowPlayerHint(playerid, "Для ~g~взаимодействия~w~ с игроками, ботами, машинами ~y~прицельтесь~w~ и нажмите ~y~H", 10000);
					format(string, sizeof(string), "Поговорите с ~y~%sом~w~ в отеле", ActorInfo[A_NEWBIE][a_Name]);
					SendMissionMessage(playerid, string, 5000, true);
				}
			}
			case 2:
			{
				mission_id[playerid] = MIS_START_WORK;
				mission_cpnum[playerid] = MySetPlayerCheckpoint(playerid, CPMODE_MISSION, 2178.2883,-2255.1680,14.77, 2.0);
				if(MyGetPlayerMoney(playerid) < 300)
				{
					format(string, sizeof(string), "~n~~n~~n~Заработайте на права. Выполнено ~g~%d/300$", MyGetPlayerMoney(playerid));
					SendMissionMessage(playerid, string, 5000);
				}
				if(!isRus(playerid))
				{
					MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Задание",
						"{FFFFFF}Для полноценного заработка вам нужны права!\n\
						А пока что, вы можете подработать на товарном складе.\n\
						"MAIN_COLOR"Добраться можно на бесплатной маршрутке или мопеде", "Понятно", "", 0);
				}
				else
				{
					ShowPlayerHint(playerid, "~y~Для полноценного заработка вам нужны права!~w~~n~~n~Пока что вы можете работать на ~r~товарном складе", 15000);
				}
			}
			case 3:
			{
			    if(PlayerInfo[playerid][pCarLic] == 0)
			    {
					mission_id[playerid] = MIS_GET_LICENSE;
					mission_cpnum[playerid] = MySetPlayerCheckpoint(playerid, CPMODE_MISSION, 725.65, -1440.13, 13.53, 2.0);
					if(!isRus(playerid))
					{
						MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Задание",
							"{FFFFFF}Доберитесь до автошколы и получите права", "Понятно", "", 0);
					}
					else
					{
						SendMissionMessage(playerid, "Доберитесь до автошколы и получите права", 5000, true);
					}
				}
				else
				{
					gMissionProgress[playerid][source] += 2;
				}
			}
		}
	}
}

Public: StoryMissionComplete(playerid, source, money, exp)
{
	new string[128];
    gMissionProgress[playerid][source]++;
    format(string, 128, "Mission Passed~n~~w~");
    if(exp > 0)
	{
		format(string, 128, "%s+%d exp", string, exp);
	    GivePlayerEXP(playerid, exp);
	}
	if(money > 0)
	{
		format(string, 128, "%s   +%d$", string, money);
	    MyGivePlayerMoney(playerid, money);
	}
    GameTextForPlayer(playerid, string, 8000, 4);
    PlayAudioStreamForPlayer(playerid, AUDIOFILE_PATH "/complete.mp3");
    StoryMissionCancel(playerid);
    UpdatePlayerStatics(playerid);
}

stock StoryMissionCancel(playerid)
{
	if(mission_id[playerid] > 0)
	{
		DestroyDynamicMapIcon(mission_mapicon[playerid][0]), 		mission_mapicon[playerid][0] = INVALID_STREAMER_ID;
		DestroyDynamicMapIcon(mission_mapicon[playerid][1]), 		mission_mapicon[playerid][1] = INVALID_STREAMER_ID;
		DestroyDynamicMapIcon(mission_mapicon[playerid][2]), 		mission_mapicon[playerid][2] = INVALID_STREAMER_ID;
		DestroyPlayerObject(playerid, mission_pobject[playerid]), 	mission_pobject[playerid] = INVALID_STREAMER_ID;
		DestroyDynamicPickup(mission_pickup[playerid]), 			mission_pickup[playerid] = INVALID_STREAMER_ID;
		if(mission_veh[playerid] > 0)								MyDestroyVehicle(mission_veh[playerid]), mission_veh[playerid] = 0;
		if(mission_timer[playerid] > 0)								KillTimer(mission_timer[playerid]), mission_timer[playerid] = 0;
		if(gType_CP[playerid] == CPMODE_MISSION)					MyDisablePlayerCheckpoint(playerid);
		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND);
		ProgressBarHide(playerid);
		PlayerTextDrawHide(playerid, InfoBar);
		HideMissionMessage(playerid);
		HideMissionInfo(playerid);
		TogglePlayerMapIcon(playerid, true);
		//
		mission_id[playerid] = 0;
		mission_step[playerid] = 0;
		mission_count[playerid] = 0;
		mission_cpnum[playerid] = 0;
	}
}

stock MySetActorPos(slot, Float:x, Float:y, Float:z, Float:a)
{
	if(slot < 0 || slot >= sizeof(ACTOR))	return false;

	SetActorPos(ACTOR[slot], x, y, z);
	SetActorFacingAngle(ACTOR[slot], a);

	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ActorNametag[slot], E_STREAMER_X, x);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ActorNametag[slot], E_STREAMER_X, y);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ActorNametag[slot], E_STREAMER_X, z + 1.0);
	return true;
}

stock TogglePlayerMapIcon(playerid, bool:toggle)
{
	g_TogleMapIcon[playerid] = toggle;
	if(g_TogleMapIcon[playerid])
	{
		for(new i; i < sizeof(StaticMapIcon); i++)
			Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, static_MapIconID[i], E_STREAMER_PLAYER_ID, playerid);
		for(new b; b < MaxBiz; b++)
			Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, BizInfo[b][bMapIcon], E_STREAMER_PLAYER_ID, playerid);
	}
	else
	{
		for(new i; i < sizeof(StaticMapIcon); i++)
			Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, static_MapIconID[i], E_STREAMER_PLAYER_ID, playerid);
		for(new b; b < MaxBiz; b++)
			Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, BizInfo[b][bMapIcon], E_STREAMER_PLAYER_ID, playerid);
	}
	Streamer_Update(playerid, STREAMER_TYPE_MAP_ICON);
}

Public: StopChatGame()
{
	if(ChatGameTick)
	{
		new string[129];
	    SendFormatMessageToAll(COLOR_WHITE, string, PREFIX_GAME "Никто не ответил на задание. Правильный ответ: '"SCOLOR_GAME"%s"SCOLOR_WHITE"'.", ChatGameRes);
		ChatGameTick = 0;
	}
}

stock StartRandomGame()
{
	if(!ChatGameTick)
	{
		new string[128];
		switch(random(2))
		{
		    case 0:
		    {// Случайная строка
				new const SECRETWORDS[] = {'/','!','"','@','#','$','^','&','*','(',')','-','=','+','_','.','~','1','2','3','4','5','6',
				'7','8','9','0','Q','W','E','R','T','Y','U','I','O','P','A','S','D','F','G','H','J','K','L','Z','X','C','V','B','N','M'};
				//
			    ChatGameRes = "";
				for(new c; c < 10; c++)
				{
				    if(!c)	ChatGameRes[c] = SECRETWORDS[random(sizeof(SECRETWORDS)-17)+17]; // без спец символов
				    else 	ChatGameRes[c] = SECRETWORDS[random(sizeof(SECRETWORDS))];
				}
			    SendFormatMessageToAll(COLOR_WHITE, string, PREFIX_GAME "Напишите в чат '"SCOLOR_GAME"%s"SCOLOR_WHITE"' как можно быстрее!", ChatGameRes);
		    }
		    case 1:
		    {// Арифметическое действие
		        new acttext[20], num1, num2;
		        switch(random(5))
		        {
		            case 0:
		            {
				        /*if(!random(2))	num1 = random(201)-100;
				        else            num1 = random(2001)-1000;
				        if(random(2))	num2 = random(100);
				        else            num2 = random(1000);*/
				        num1 = random(201)-100;
				        num2 = random(201)-100;
				        valstr(ChatGameRes, num1 + num2);
				        if(num2 < 0) format(acttext, 20, "%d + (%d)", num1, num2);
				        else         format(acttext, 20, "%d + %d", num1, num2);
		            }
		            case 1:
		            {
				        num1 = random(101);
				        num2 = random(201)-100;
				        valstr(ChatGameRes, num1 - num2);
				        if(num2 < 0) format(acttext, 20, "%d – (%d)", num1, num2);
				        else         format(acttext, 20, "%d – %d", num1, num2);
		            }
		            case 2:
		            {
				        if(!random(2))	num1 = random(23)-11;
				        else            num1 = random(43)-21;
				        if(random(2))	num2 = random(23)-11;
				        else            num2 = random(43)-21;
				        valstr(ChatGameRes, num1 * num2);
				        if(num2 < 0) format(acttext, 20, "%d * (%d)", num1, num2);
				        else         format(acttext, 20, "%d * %d", num1, num2);
		            }
		            case 3:
		            {
				        num2 = random(20) + 1;
				        num1 = random(21) * num2;
				        valstr(ChatGameRes, num1 / num2);
						format(acttext, 20, "%d / %d", num1, num2);

		            }
		            case 4:
		            {
		                if(random(3) == 0) num1 = 2;
				        else num1 = random(12)+1;
				        //
				        if(num1 < 3) num2 = random(11);
				        else if(3 < num1 < 5) num2 = random(5);
				        else if(num1 >= 5) num2 = random(3);
						//
				        valstr(ChatGameRes, floatround(floatpower(num1, num2)));
						format(acttext, 20, "%d^%d", num1, num2);
		            }
		        }
			    SendFormatMessageToAll(COLOR_WHITE, string, PREFIX_GAME "Напишите в чат решение '"SCOLOR_GAME"%s = ?"SCOLOR_WHITE"' как можно быстрее!", acttext);
		    }
		}
	    ChatGameTick = GetTickCount();
	    ChatGameTimer = SetTimer("StopChatGame", 30000, false);
	}
}

stock UpdatePlayerColor(playerid)
{
	if(!IsPlayerLogged(playerid))
	{
		SetPVarString(playerid, "color", "AFAFAF");
		SetPlayerColor(playerid, COLOR_GREY);
	}
	else if(PlayerInfo[playerid][pFaction] == F_POLICE && IsPoliceDuty(playerid))
	{
		//new vehicleid = GetPlayerVehicleID(playerid);
		//if(vehicleid > 0 && VehInfo[vehicleid][vSiren])	SetPlayerColor(playerid, 0x2641FEFF);
		//else 											SetPlayerColor(playerid, 0x2641FEFF & 0xFFFFFF00);
		SetPlayerColor(playerid, 0x2641FEFF);
		SetPVarString(playerid, "color", "2641FE");
	}
	else if(IsGang(PlayerInfo[playerid][pFaction]))
	{
		SetPVarString(playerid, "color", GetGangColorRGB(PlayerInfo[playerid][pFaction]));
		SetPlayerColor(playerid, GetGangColor(PlayerInfo[playerid][pFaction]));
	}
	else if(Job.GetPlayerNowWork(playerid) == JOB_TAXI)
	{
		SetPlayerColor(playerid, COLOR_YELLOW);
	}
	else
	{
		SetPVarString(playerid, "color", "");
		SetPlayerColor(playerid, COLOR_DEFAULT);
	}

	//else if(PlayerInfo[playerid][pFaction] == F_ARMY)	{ SetPVarString(playerid, "color", "704214"); SetPlayerColor(playerid, 0x704214FF);  }
	//else if(PlayerInfo[playerid][pFaction] == F_MAYOR)	{ SetPVarString(playerid, "color", "E6FB01"); SetPlayerColor(playerid, 0xE6FB01FF);  }
	//else if(PlayerInfo[playerid][pFaction] == F_EMERGY)	{ SetPVarString(playerid, "color", "FF52A4"); SetPlayerColor(playerid, 0xFF52A4FF);  }
	//else if(PlayerInfo[playerid][pFaction] == F_NEWS)	{ SetPVarString(playerid, "color", "FF4F00"); SetPlayerColor(playerid, 0xFF4F00FF);  }
}

stock FormatSkill(prefix[], skillname[], level, skill, next)
{
	new string[164];
	if(level == 0)
		format(string, sizeof(string), "%s{AFAFAF}%s\t{AFAFAF}Не открыто\n", prefix, skillname);
	else if(next == -1)
		format(string, sizeof(string), "%s{FFFFFF}%s\t%d ур.\t{33AA33}Максимум\n", prefix, skillname, level);
	else
		format(string, sizeof(string), "%s{FFFFFF}%s\t%d ур.\t%d/%d\n", prefix, skillname, level, skill, next);
	return string;
}

stock GetTaxiSkill(playerid)
{
	if(1 <= PlayerInfo[playerid][pTaxiLevel] < 5)
	    return PlayerInfo[playerid][pTaxiLevel] * 2000;
	return -1;
}

stock GiveTaxiSkill(playerid, skill = 1)
{
	if(0 <= PlayerInfo[playerid][pTaxiLevel] < 5)
	{
		if(PlayerInfo[playerid][pTaxiLevel] == 0)	PlayerInfo[playerid][pTaxiLevel] = 1;

	    new string[128], next = GetTaxiSkill(playerid);
		PlayerInfo[playerid][pTaxiSkill] += skill;
		if(PlayerInfo[playerid][pTaxiSkill] >= next)
		{
			PlayerInfo[playerid][pTaxiLevel]++;
			PlayerInfo[playerid][pTaxiSkill] -= next;
			next = GetTaxiSkill(playerid);

			format(string, 128, "~g~Таксист~n~~w~+ Бонус к зарплате: ~y~%d%s", getWageBonus(PlayerInfo[playerid][pTaxiLevel]), "%%");
			ShowPlayerHint(playerid, string);
		}
		else if(PlayerInfo[playerid][pTaxiSkill] % 200 == 0)
		{
			format(string, 128, "Таксист [Yровень: %d]", PlayerInfo[playerid][pTaxiLevel]);
			RepBarShow(playerid, string, PlayerInfo[playerid][pTaxiSkill] - 1, PlayerInfo[playerid][pTaxiSkill], next);
		}
	}
}

stock GetBusSkill(playerid)
{
	if(1 <= PlayerInfo[playerid][pBusLevel] < 5)
	    return PlayerInfo[playerid][pBusLevel] * 700;
	return -1;
}

stock GiveBusSkill(playerid, skill = 1)
{
	if(0 <= PlayerInfo[playerid][pBusLevel] < 5)
	{
		if(PlayerInfo[playerid][pBusLevel] == 0)	PlayerInfo[playerid][pBusLevel] = 1;

	    new string[128], next = GetBusSkill(playerid);
		PlayerInfo[playerid][pBusSkill] += skill;
		if(PlayerInfo[playerid][pBusSkill] >= next)
		{
			PlayerInfo[playerid][pBusLevel]++;
			PlayerInfo[playerid][pBusSkill] -= next;
			next = GetBusSkill(playerid);

			format(string, 128, "~g~Водитель автобуса~n~~w~+ Бонус к зарплате: ~y~%d%s", getWageBonus(PlayerInfo[playerid][pBusLevel]), "%%");
			ShowPlayerHint(playerid, string);
		}
		else if(PlayerInfo[playerid][pBusSkill] % 70 == 0)
		{
			format(string, 128, "Водитель [Yровень: %d]", PlayerInfo[playerid][pBusLevel]);
			RepBarShow(playerid, string, PlayerInfo[playerid][pBusSkill] - 1, PlayerInfo[playerid][pBusSkill], next);
		}

	}
}

stock GetTruckSkill(playerid)
{
	if(1 <= PlayerInfo[playerid][pTruckLevel] < 5)
	    return PlayerInfo[playerid][pTruckLevel] * 20;
	return -1;
}

stock GiveTruckSkill(playerid, skill = 1)
{
	if(0 <= PlayerInfo[playerid][pTruckLevel] < 5)
	{
		if(PlayerInfo[playerid][pTruckLevel] == 0)	PlayerInfo[playerid][pTruckLevel] = 1;

	    new string[128], next = GetTruckSkill(playerid);
		PlayerInfo[playerid][pTruckSkill] += skill;
		if(PlayerInfo[playerid][pTruckSkill] >= next)
		{
			PlayerInfo[playerid][pTruckLevel]++;
			PlayerInfo[playerid][pTruckSkill] -= next;
			next = GetTruckSkill(playerid);

			format(string, 128, "~g~Дальнобойщик~n~~w~+ Бонус к зарплате: ~y~%d%s", getWageBonus(PlayerInfo[playerid][pTruckLevel]), "%%");
			ShowPlayerHint(playerid, string);
		}
		else if(PlayerInfo[playerid][pTruckSkill] % 2 == 0)
		{
			format(string, 128, "Дальнобой [Yровень: %d]", PlayerInfo[playerid][pTruckLevel]);
			RepBarShow(playerid, string, PlayerInfo[playerid][pTruckSkill] - 1, PlayerInfo[playerid][pTruckSkill], next);
		}
	}
}

stock ReloadEmmetStore()
{
	for(new weaponid, i; i < sizeof(EmmetStore); i++)
	{
	    weaponid = 0;
	    if(EmmetStore[i][1] == 0)
		{// Если товар кончился
			EmmetStore[i][0] = 0;
			EmmetStore[i][2] = 0;
		}
	    switch(i)
	    {
	        // Пистолет
	        case 0: if(random(100) < 95) weaponid = EmmetAmmuList[0][random(2)];
	        // Дробовик
	        case 1: if(random(100) < 90) weaponid = EmmetAmmuList[2][random(3)];
	        // Полуавтомат
	        case 2: if(random(100) < 80) weaponid = EmmetAmmuList[1][0];
	        // Автомат
	        case 3: if(random(100) < 75) weaponid = EmmetAmmuList[4][random(2)];
	        // Винтовка
	        case 4: if(random(100) < 50) weaponid = EmmetAmmuList[5][random(2)];
	        // Граната
	        case 5: if(random(100) < 66) weaponid = 16;
	        // Бронежилет
	        case 6: if(random(100) < 95) weaponid = 99;
	    }
	    if(weaponid != 0)
	    {
	        EmmetStore[i][0] = weaponid;
	        if(weaponid == 99) EmmetStore[i][1] = 25 + random(76);
	        else EmmetStore[i][1] = (25 + random(76)) * GunParams[weaponid][GUN_AMMO];
	        if(weaponid == 99) EmmetStore[i][2] = 200;
	        else EmmetStore[i][2] = floatround((1 + (random(15) + 10)/100) * GunParams[weaponid][GUN_PRICE]);
	    }
	}
}

stock FlashPoliceZone(playerid, bool:toggle)
{
	if(toggle && (InGangZone[playerid] == -1 || PursuitStatus[playerid] > 0)) 
	{
		SetPVarInt(playerid, "Player:FlashPoliceZone", true); 
	}
	else 
	{
		DeletePVar(playerid, "Player:FlashPoliceZone");
	}
	UpdatePlayerRadarColor(playerid);
}

stock UpdatePlayerRadarColor(playerid)
{
	if(GetPVarInt(playerid, "Player:FlashPoliceZone"))
	{
		GangZoneShowForPlayer(playerid, GlobalGZ, 0x1560BDBB);	// Blue
		GangZoneFlashForPlayer(playerid, GlobalGZ, 0x9B2D30BB);	// Red
	}
	else if(GetPVarInt(playerid, "Player:InGreenZone"))
	{
		GangZoneShowForPlayer(playerid, GlobalGZ, 0x33AA33BB);	//	Green
	}
	else
	{
		GangZoneHideForPlayer(playerid, GlobalGZ);
	}
}

stock log(const filename[], const message[])
{
	new string[128], lstring[512],
    	year, month, day, hour, minuite, second;

	gettime(hour,minuite,second);
	getdate(year, month, day);

	format(string, sizeof(string), "log/%s.log", filename);
	new File:file = fopen(string, io_append);
	format(lstring, sizeof(lstring), "[%02d/%02d/%04d][%02d:%02d:%02d] %s\r\n", day, month, year, hour, minuite, second, message);
	fwriterus(file, lstring);
	fclose(file);
}

//	Механик
stock CancelMechanicDuty(playerid)
{
	if(Job.GetPlayerNowWork(playerid) == JOB_MECHANIC)
	{
		new string[128];
		// Удаление иконки вызова
		if(IsPlayerLogged(MechanicClientid[playerid]))
		{
		    new clientid = MechanicClientid[playerid];
		    DestroyDynamicMapIcon(MechanicMapIcon[playerid]), MechanicMapIcon[playerid] = INVALID_STREAMER_ID;
		    DestroyDynamicMapIcon(MechanicMapIcon[clientid]), MechanicMapIcon[clientid] = INVALID_STREAMER_ID;
			SendFormatMessage(MechanicClientid[playerid], COLOR_LIGHTBLUE, string, "%s закончил дежурство. Вызовите механика еще раз!", ReturnPlayerName(playerid));
		}
		//SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы закончили дежурство и заработали: {FFFFFF}%d$", TaxiMoney[playerid]);
		MechanicClientid[playerid] = INVALID_PLAYER_ID;
		MechanicStatus[playerid] = 0;
		HideMissionMessage(playerid);
		//Job.ClearPlayerNowWork(playerid);
	}
    return true;
}

Public: UpdatePlayerTime(playerid)
{
    if(FirstSpawn[playerid] == false)
    {
    	new vw	= GetPlayerVirtualWorld(playerid);
    	new int	= GetPlayerInterior(playerid);
    	if(!vw && !int)
    	{
			new hour, minute;
			gettime(hour, minute, _);
			SetPlayerTime(playerid, hour, minute);
		}
    	else if(vw == VW_CITYHALL)	SetPlayerTime(playerid, 22, 00);
    	else if(vw || int)			SetPlayerTime(playerid, 12, 0);
	}
	return true;
}

stock MoveVehicleTrap(playerid, vehicleid)
{
    if(VehInfo[vehicleid][vTrapState] == false)
    {
        VehInfo[vehicleid][vTrapState] = true;
		MoveDynamicObject(VehInfo[vehicleid][vObject][0], 314.20001, 1044.58472, 1946.69995, 1.0, 2.0, 90.0, 0.0);
		MoveDynamicObject(VehInfo[vehicleid][vObject][1], 317.70001, 1044.58472, 1946.69995, 1.0, 2.0, 90.0, 0.0);
		UpdateDynamic3DTextLabelText(VehInfo[vehicleid][vText3D], 0x00FF00FF, "Прыжок разрешен!");

		foreach(LoginPlayer, i)
		    if(IsPlayerInRangeOfPoint(i, 35.0, 315.8, 1026.1, 1950.0) && GetPlayerVirtualWorld(i) == vehicleid)
				PlayerPlaySound(i, 30800, 0.0, 0.0, 0.0);

		if(VehInfo[vehicleid][vDriver] != -1) SendMissionMessage(VehInfo[vehicleid][vDriver], "~b~Грузовой люк: ~w~Открыт");
		if(VehInfo[vehicleid][vDriver] != playerid) SendClientMessage(playerid, COLOR_WHITE, "> Вы "MAIN_COLOR"открыли{FFFFFF} грузовой люк хвостовой части");
    }
    else
    {
        VehInfo[vehicleid][vTrapState] = false;
		MoveDynamicObject(VehInfo[vehicleid][vObject][0], 314.20001, 1034.81970, 1946.90002, 1.0, -4.5, 90.0, 0.0);
		MoveDynamicObject(VehInfo[vehicleid][vObject][1], 317.70001, 1034.81970, 1946.90002, 1.0, -4.5, 90.0, 0.0);
		UpdateDynamic3DTextLabelText(VehInfo[vehicleid][vText3D], 0xFF0000FF, "Прыжок запрещен!");

		foreach(LoginPlayer, i)
		    if(IsPlayerInRangeOfPoint(i, 35.0, 315.8, 1026.1, 1950.0) && GetPlayerVirtualWorld(i) == vehicleid)
				PlayerPlaySound(i, 30802, 0.0, 0.0, 0.0);

		if(VehInfo[vehicleid][vDriver] != -1) SendMissionMessage(VehInfo[vehicleid][vDriver], "~b~Грузовой люк: ~w~Закрыт");
		if(VehInfo[vehicleid][vDriver] != playerid) SendClientMessage(playerid, COLOR_WHITE, "> Вы {FF0000}закрыли{FFFFFF} грузовой люк хвостовой части");
    }
}

stock GMError(playerid, const msg[])
{
	new string[128];
	format(string, sizeof(string), "[Gamemode Error]: %s", msg);
	SendClientMessage(playerid, COLOR_RED, string);
	print(string);
	SendClientMessage(playerid, COLOR_WHITE, "Пожалуйста, сообщите об этом администрации, сделав скриншот и описав ситуацию появления ошибки! Спасибо!");
	return true;
}

//----------
public OnRuntimeError(code, &bool:suppress)
{
	new string[128];
	format(string, sizeof(string), PREFIX_ADMIN "Произошла ошибка в игровом моде [code: %d | suppress: %i]", code, suppress);
	SendAdminMessage(COLOR_LIGHTRED, string);
	return true;
}

main()
{
	print("---------------");
	new sec, minute, hour;
	new day, month, year;
	gettime(hour, minute, sec);
	getdate(year, month, day);

	j_Storage 		= 1000 + random(4000);
	OldMinute 		= minute; OldHour = hour;
	PoliceCallNum 	= (hour * 60 + minute) / 2;// Случайное значение
    GameModeStatus 	= true;

	SendRconCommand("mapname San Andreas");
	printf("Ready! %02d/%02d/%04d", day, month, year);
	printf("Gamemode load time: %dms\n", GetTickCount() - StartUNIXTime);
	
	MODE_TEST();
	return true;
}// end of main()

/*main_ERROR(bool:reboot = false)
{
	print(" ");
	if(reboot == true)
	{
		SetTimer("main_RELOAD", 5000, 0);
		print("Founded error! Trying connection in 5 sec...");
	}
	else print("Founded fatal error! Not possible to load gamemode!");
	return 0;
}

Public: main_RELOAD() main();*/

MODE_TEST()
{
#if defined TESTING_MODE
	CreateTests();
#endif

	/*
	Условный оператор ( ?: ) - единственный оператор в PAWN, который работает сразу с тремя операндами. Синтаксис условного оператора:
	(выражение1) ? (выражение2) : (выражение3)
	Это читается следующим образом: если выражение1 возвращает true, то выполняется выражение2, в противном случае выполняется выражение3.
	Обычно возвращаемое значение присваивается некоторой переменной. Пример:
	z = (x > y) ? x : y; // Это выражение присвоит переменной z большее значение
	*/
	// Сортирует результаты по убыванию денег, без "DESC" - по возрастанию
	// SELECT `id`, `name`, `money` FROM `players` ORDER BY `money` DESC;
}

CreateStaticMenu()
{
	//	KingRing
	KingRingMenu = CreateMenu("King Ring", 0, 29.0, 145.0, 143.0, 80.0);
	AddMenuItem(KingRingMenu, 0, RusText("Large donuts (10$)"));
	AddMenuItem(KingRingMenu, 0, RusText("Average donuts (5$)"));
	AddMenuItem(KingRingMenu, 0, RusText("Small donuts (2$)"));
	AddMenuItem(KingRingMenu, 0, RusText("Water (2$)"));

	//	Burger Shot
	BurgerShotMenu = CreateMenu("Burger Shot", 0, 29.0, 145.0, 143.0, 80.0);
	AddMenuItem(BurgerShotMenu, 0, RusText("Moo Kids Meal (2$)"));
	AddMenuItem(BurgerShotMenu, 0, RusText("Beef Tower (5$)"));
	AddMenuItem(BurgerShotMenu, 0, RusText("Meat Stack (10$)"));
	AddMenuItem(BurgerShotMenu, 0, RusText("Salad Meal (5$)"));

	//	Pizza
	PizzaMenu = CreateMenu("Pizza", 0, 29.0, 145.0, 143.0, 80.0);
	AddMenuItem(PizzaMenu, 0, RusText("Mini Pizza (2$)"));
	AddMenuItem(PizzaMenu, 0, RusText("Big Pizza (5$)"));
	AddMenuItem(PizzaMenu, 0, RusText("Double Pizza (10$)"));
	AddMenuItem(PizzaMenu, 0, RusText("Water (2$)"));

	//	Cluckin Bell
	CluckinBellMenu = CreateMenu("Cluckin Bell", 0, 29.0, 145.0, 143.0, 80.0);
	AddMenuItem(CluckinBellMenu, 0, RusText("Little Meal (2$)"));
	AddMenuItem(CluckinBellMenu, 0, RusText("Big Meal (5$)"));
	AddMenuItem(CluckinBellMenu, 0, RusText("Huge Meal (10$)"));
	AddMenuItem(CluckinBellMenu, 0, RusText("Salad Meal (10$)"));
}

CreatePlayerDrinkMenu(playerid)
{
	new items[][32] = {
		"Beer\t6$",
		"Vodka\t10$",
		"Whiskey\t10$",
		"Champagne\t15$",
		"Water\t2$"
	};
	ShowPlayerSelectMenu(playerid, SM_DRINK, "Bar", items);
	return true;
}

CMD:movelift(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 20.0, -1456.70349, 552.28198, 13.0))
	{
	    if(IsDynamicObjectMoving(AirGate1))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Подожди, лифт уже находится в движении.");
	        return 1;
	    }
	    if(AirGate1Open)    MoveDynamicObject(AirGate1, -1456.70349, 552.28198, 16.9, 1.4);
	    else                MoveDynamicObject(AirGate1, -1456.70349, 552.28198, 9.85, 1.4);
	    AirGate1Open = !AirGate1Open;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, -1414.46997, 567.45001, 11.68))
	{
	    if(IsDynamicObjectMoving(AirGate2))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Подожди, лифт уже находится в движении.");
	        return 1;
	    }
	    if(AirGate2Open)    MoveDynamicObject(AirGate2, -1414.46997, 567.45001, 16.68, 1.4);
	    else                MoveDynamicObject(AirGate2, -1414.46997, 567.45001, 9.64, 1.4);
	    AirGate2Open = !AirGate2Open;
	}
	else
	{
        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости нет ни одного лифта.");
        return 1;
	}
	return 1;
}

CMD:test13(playerid, params[])
{
	new a = strval(params);
	if(a == 1)
	{
		SetPlayerCameraPos(playerid, 243.67886352539, 366.575, 858.1);
		SetPlayerCameraLookAt(playerid, 244.77876281738, 366.575, 857.22467041016);
	}
	else if(a == 2)
	{
		SetPlayerCameraPos(playerid, 243.67886352539, 266.575, 858.1);
		SetPlayerCameraLookAt(playerid, 244.77876281738, 266.575, 857.22467041016);
	}
	else if(a == 3)
	{
		SetPlayerCameraPos(playerid, 143.67886352539, 266.575, 858.1);
		SetPlayerCameraLookAt(playerid, 144.77876281738, 266.575, 857.22467041016);
	}
	else if(a == 4)
	{
		SetPlayerCameraPos(playerid, 43.67886352539, 266.575, 858.1);
		SetPlayerCameraLookAt(playerid, 44.77876281738, 266.575, 857.22467041016);
	}
	else if(a == 5)
	{
		SetPlayerCameraPos(playerid, 543.67886352539, 266.575, 858.1);
		SetPlayerCameraLookAt(playerid, 544.77876281738, 266.575, 857.22467041016);
	}
	else if(a == 6)
	{
		SetPlayerCameraPos(playerid, 643.67886352539, 266.575, 858.1);
		SetPlayerCameraLookAt(playerid, 644.77876281738, 266.575, 857.22467041016);
	}
	else
	{
		SetCameraBehindPlayer(playerid);
	}
	return true;
}

new buttonCrimeFactory[4],
	buttonLSPD[4];
new gateCrimeFactory[4],
	gateLSPD[2];

CreateStaticObject()
{
//	Криминальный завод
	CreateDynamicObject(2952, -2175.882, -207.800, 34.705, 0.2, -65.1, 00.00);	//	объект чтоб можно было заехать на машине внутрь
	CreateDynamicObject(2952, -2163.925, -225.572, 35.215, 0.0, 00.00, 90.00);	//	дверь закрывающая маленький проход 
	
	gateCrimeFactory[0]		= CreateGate(3055, -2180.611, -209.688, 36.755, 0.0, 0.0, -90.0, -2180.611, -209.688, 32.625);	//	ворота для заезда на фургоне (открытый z = 32.625)
	buttonCrimeFactory[0]	= CreateButton(-2180.304, -212.513, 36.945, 0.0, 0.0, 90.00);	//	кнопка
	buttonCrimeFactory[1]	= CreateButton(-2181.110, -212.513, 36.945, 0.0, 0.0, -90.0);	//	кнопка

	gateCrimeFactory[1]		= CreateGate(6400, -2149.680, -240.730, 37.385, 0.0, 0.0, 90.00,	-2145.15, -240.730, 37.385);	//	ворота внутри 1/2	(открытый x = -2145.15)
	gateCrimeFactory[2]		= CreateGate(6400, -2154.190, -240.770, 37.385, 0.0, 0.0, -90.00,	-2158.27, -240.770, 37.385);	//	ворота внутри 2/2	(открытый x = -2154.27)
	buttonCrimeFactory[2]	= CreateButton(-2156.192, -240.291, 36.985, 0.0, 0.0, -180.0);	//	кнопка
	buttonCrimeFactory[3]	= CreateButton(-2156.292, -240.890, 36.985, 0.0, 0.0, 00.000);	//	кнопка

//	Двери в аэропорту
	AirportDoor[0] = CreateDynamicObject(1495, 1684.27, -2335.98, 12.56, 0.00, 0.00, 0.00, VW_AIRPORT); //object (Gen_doorEXT01) (1)
	SetDynamicObjectMaterial(AirportDoor[0], 0, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(AirportDoor[0], 1, 19325, "lsmall_shops", "lsmall_window01", 0x00000000);
	SetDynamicObjectMaterial(AirportDoor[0], 2, 18632, "fishingrod", "plastic", 0xFFFFFFFF);

	AirportDoor[1] = CreateDynamicObject(1495, 1687.27, -2335.94, 12.56, 0.00, 0.00, 180, VW_AIRPORT); //object (Gen_doorEXT01) (2)
	SetDynamicObjectMaterial(AirportDoor[1], 0, 19962, "samproadsigns", "materialtext1", 0x00000000);
	SetDynamicObjectMaterial(AirportDoor[1], 1, 19325, "lsmall_shops", "lsmall_window01", 0x00000000);
	SetDynamicObjectMaterial(AirportDoor[1], 2, 18632, "fishingrod", "plastic", 0xFFFFFFFF);

//	ЛСПД
	buttonLSPD[0]	= CreateButton(1584.417, -1637.853, 13.962, 0.0, 0.0, 180.0); 	// Кодовый замок на воротах ЛСПД снаружи
	buttonLSPD[1]	= CreateButton(1584.396, -1638.303, 13.962, 0.0, 0.0, 00.00); 	// Кодовый замок на воротах ЛСПД внутри

	buttonLSPD[2]	= CreateButton(245.11, 72.37, 1003.99, 0.00, 0.00, 00.00);		// Кнопка (сн)
	buttonLSPD[3]	= CreateButton(244.84, 73.48, 1003.99, 0.00, 0.00, 90.00);		// Кнопка (вн)

	gateLSPD[0]		= CreateGate(985, 1588.55, -1638.33, 13.200, 0.00, 0.00, 0.00,	1595.55, -1638.33, 13.200, 1.9, 5000);	// Ворота в подвал (закр)
	gateLSPD[1]		= CreateGate(1535, 245.46, 72.53000, 1002.6, 0.00, 0.00, 0.00,	244.210, 72.53000, 1002.6, 1.0, 2000);	// Дверь осн (закр)
	LSPDbarr = CreateDynamicObject(968, 1544.69, -1630.85, 13.10, 0.00, 90.00, 90.00);// Шлагбаум у подвала (закр)

//	Подвижный кран на товарном складе
	Crane = CreateDynamicObject(5126, 2197.18, -2325.039, 27.53, 0.0, 0.0, 135.0);

// Статичная подставка (Бизнес Казино "Четыре дракона")
	new obj = CreateDynamicObject(19464, 1954.22339, 919.79791, 991.70001, 0.0, 90.0, 35.0);
	Streamer_ToggleItemStatic(STREAMER_TYPE_OBJECT, obj, true);

	//------------------------------[Objects]-----------------------------------
	KassGate[0] = CreateDynamicObject(986, 2497.41, 2769.11, 11.53, 0.00, 0.00, 90.00);// ЛВ КАСС ворота 1
	KassGate[1] = CreateDynamicObject(985, 2497.41, 2777.07, 11.53, 0.00, 0.00, 90.00);// ЛВ КАСС ворота 2

	// CreateObject(1535, 244.21, 72.53, 1002.60, 0.00, 0.00, 0.00);// Дверь осн (откр)
	AreaGate[0] = CreateDynamicObject(19313, 134.91, 1941.52, 21.78, 0.00, 0.00, 0.00); // Закрытые ворота (возле дырки)
	//CreateObject(19313, 120.39, 1941.52, 21.78, 0.00, 0.00, 0.00); // Открытые ворота (возле дырки)
	AreaGate[1] = CreateDynamicObject(19313, 285.99, 1822.31, 20.00, 0.00, 0.00, 270.00); // Закрытые ворота (возле парковки)
	//CreateObject(19313, 285.99, 1834.09, 20.00, 0.00, 0.00, 90.00); // Открытые ворота (возле парковки)
	AreaGate[2] = CreateDynamicObject(2929, 211.88, 1875.65, 13.90, 0.00, 0.00, 0.00);// Ареа51 ворота в бункер
	//CreateObject(2929, 208.18, 1875.65, 13.90, 0.00, 0.00, 0.00);// Открытые ворота в бункер
	AreaGate[3] = CreateDynamicObject(2927, 215.97, 1875.65, 13.90, 0.00, 0.00, 0.00);// Ареа51 Ворота в бункер
	//CreateObject(2927, 219.57, 1875.65, 13.90, 0.00, 0.00, 0.00);// Открытые ворота в бункер
	ASbarr = CreateDynamicObject(968, -2043.6, -80.58, 35.0, 0.0, -90.0, 0.0);	//	Шлагбаум в автошколе

// Aircraft Carrier
	AirGate1Open = false; AirGate2Open = false;
	AirGate1 = CreateDynamicObject(3115, -1456.70349, 552.28198, 16.90, 0.0, 0.0, 0.0);
	AirGate2 = CreateDynamicObject(3114, -1414.46997, 567.45001, 16.68, 0.0, 0.0, 0.0);

// Fort Carson
	FC_Gate[0] = CreateDynamicObject(2988, -236.49400, 1208.37000, 18.38710, 0.0, 0.0, 270.0);
	FC_Gate[1] = CreateDynamicObject(2988, -244.88930, 1208.37000, 18.38710, 0.0, 0.0, 70.0);

// Alcatraz (Алькатрас)
	PrisonGate[0] = CreateDynamicObject(2990, 540.359, -2748.300, 14.600, 0.00, 0.00, 180.00); // Ворота к площадке
	//CreateDynamicObject(2990, 550.359, -2748.300, 14.600, 0.00, 0.00, 180.00);
	PrisonGate[1] = CreateDynamicObject(2990, 551.429, -2731.300, 14.600, 0.00, 0.00, 270.00); // Ворота к тюремным блокам
	//CreateDynamicObject(2990, 551.429, -2721.300, 14.600, 0.00, 0.00, 270.00);
	PrisonGate[2] = CreateDynamicObject(2990, 540.580, -2714.209, 14.600, 0.00, 0.00, 180.00); // Ворота к столовой
	//CreateDynamicObject(2990, 530.580, -2714.209, 14.600, 0.00, 0.00, 180.00);
	PrisonGate[3] = CreateDynamicObject(2990, 547.320, -2818.209, 14.600, 0.00, 0.00, 0.00); // Ворота к верт.площадке
	//CreateDynamicObject(2990, 537.320, -2818.209, 14.600, 0.00, 0.00, 0.00);
	PrisonGate[4] = CreateDynamicObject(2990, 590.169, -2676.679, 14.600, 0.00, 0.00, 90.00); // Ворота к комнате охраны
	//CreateDynamicObject(2990, 590.169, -2666.679, 14.600, 0.00, 0.00, 90.00);
	PrisonGate[5] = CreateDynamicObject(2990, 628.150, -2704.229, 6.219, 0.00, 0.00, 0.00); // Ворота к лодкам
	//CreateDynamicObject(2990, 638.150, -2704.229, 6.219, 0.00, 0.00, 0.00);
	for(new i = 0; i < sizeof(JailDoorsPos); i++)
	{
		JailDoors[i] = CreateDynamicObject(2930, Arr3<JailDoorsPos[i]>, 0.0, 0.0, 0.46);
	}

// Los Santos Prison
	// Outside gates
	LS_PrisonGate[0] = CreateDynamicObject(19795, 1822.52832, -1540.94080, 14.26770,   0.00000, 0.00000, 164.80000); // To close: Z = 10.8
	LS_PrisonGate[1] = CreateDynamicObject(19795, 1824.32483, -1534.69763, 14.26770,   0.00000, 0.00000, -16.80000);
	LS_PrisonGate[2] = CreateDynamicObject(19796, 1756.92969, -1592.31470, 14.27910,   0.00000, 0.00000, 257.00000); // To close: Z = 10.7
	LS_PrisonGate[3] = CreateDynamicObject(19796, 1752.02393, -1591.19116, 14.27910,   0.00000, 0.00000, 77.00000);
	// Inside gates
	LS_PrisonGate[4] = CreateDynamicObject(19795, 1813.87659, -1533.16516, 13.93400,   0.00000, 0.00000, -1.50000); // To close: Z = 10.4
	LS_PrisonGate[5] = CreateDynamicObject(19795, 1813.72278, -1539.64246, 13.93400,   0.00000, 0.00000, 178.50000);
	LS_PrisonGate[6] = CreateDynamicObject(19796, 1756.62097, -1583.20007, 13.27910,   0.00000, 0.00000, 257.00000); // To close: Z = 9.7
	LS_PrisonGate[7] = CreateDynamicObject(19796, 1751.71716, -1582.06445, 13.27910,   0.00000, 0.00000, 77.00000);
	LS_PrisonGate[8] = CreateDynamicObject(19795, 1781.21533, -1530.76758, 10.20000,   0.00000, 0.00000, -2.00000); // To close: Z = 6.6
	LS_PrisonGate[9] = CreateDynamicObject(19795, 1780.97607, -1537.21082, 10.20000,   0.00000, 0.00000, 178.00000);

//	База ФБР
	FBIGate = CreateDynamicObject(971, 1790.7, -1136.0, 25.50, 0.0, 0.0, 270.0);	//	Ворота на базе ФБР
}
// end of CreateStaticObject()

public OnPlayerPressedButton(playerid, button)
{
	//	Crime Factory
	if(button == buttonCrimeFactory[0] || button == buttonCrimeFactory[1])
	{
        if(IsMafia(PlayerInfo[playerid][pFaction]))
        {
        	OpenGate(gateCrimeFactory[0]);
		}
		else
		{
		    return false;
		}
	}
	else if(button == buttonCrimeFactory[2] || button == buttonCrimeFactory[3])
	{
        if(IsMafia(PlayerInfo[playerid][pFaction]))
        {
        	OpenGate(gateCrimeFactory[1]);
        	OpenGate(gateCrimeFactory[2]);
		}
		else
		{
		    return false;
		}
	}
	//	LSPD
	else if(button == buttonLSPD[0] || button == buttonLSPD[1])
	{
		
		if(PlayerInfo[playerid][pFaction] == F_POLICE)
        {
    		OpenGate(gateLSPD[0]);
		}
		else
		{
		    return false;
		}
	}
	else if(button == buttonLSPD[2] || button == buttonLSPD[3])
	{
		new Float:Y;
		MyGetPlayerPos(playerid, _, Y);
		if(Y > 72.53 || PlayerInfo[playerid][pFaction] == F_POLICE)
        {	// Внутри или коп
        	OpenGate(gateLSPD[1]);
		}
		else
		{
		    return false;
		}
	}
	return true;
}

GameModeInit_Error(bool:reboot = false)
{
	print(" ");
	if(reboot == true)
	{
		SetTimer("GameModeInit_Reload", 5000, 0);
		print("Founded error! Trying connection in 5 sec...");
	}
	else print("Founded fatal error! Not possible to load gamemode!");
	return 0;
}

MySQL_Load()
{
	mysql_log(MYSQL_LOG);
	g_SQL = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MAIN_DB);
	if(mysql_errno())
	{
		print("  Connection to MySQL... ERROR!");
		return false;
	}
	print("  Connection to MySQL... SUCCESSFUL!");

	new query[128], server_db[32];
	mysql_format(g_SQL, query, sizeof query, "SELECT `db` FROM `servers` WHERE `id` = '%d'", SERVER_ID);
	new Cache:result = mysql_query(g_SQL, query);
	if(cache_num_rows() == 0)
	{
		printf("  The `servers` table no data on the server with the id %d...", SERVER_ID);
		return false;
	}
	cache_get_value_index(0, 0, server_db);
	cache_delete(result);
	mysql_close(g_SQL);

	g_SQL = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASS, server_db);
	printf("  Connection to server db: %s...", server_db);
	if(mysql_errno())
	{
		print("  Connection ERROR!");
		return false;
	}
	print("  Connection SUCCESSFUL!\n");
	mysql_set_charset("cp1251", g_SQL);
	//mysql_query_ex("/*!40101 SET NAMES 'cp1251' */");
	//mysql_query_ex("SET CHARACTER SET 'cp1251'");
	mysql_query_ex("UPDATE `players` SET `online` = '-1' WHERE `online` > '-1'");

	////////////////////
	mysql_format(g_SQL, query, sizeof(query), "SELECT `record_online` FROM %s.`servers` WHERE `id` = '%d' LIMIT 1", MAIN_DB, SERVER_ID);
	result = mysql_query(g_SQL, query);
	cache_get_value_name_int(0, "record_online", CurrentPlayerRecords);
	cache_delete(result);
	////////////////////
	mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `banips` WHERE `time` < '%d'", gettime());
	result = mysql_query(g_SQL, query);
	new deleted = cache_affected_rows();
	if(deleted)	printf("  Unbanned ip: %d.", deleted);
	cache_delete(result);
	////////////////////
	result = mysql_query(g_SQL, "SELECT `ip`, `time` FROM `banips`");
	new row = cache_num_rows();
	for(new i = 0, ip[16], time; i < row; i++)
	{
		cache_get_value_name(i, "ip", ip);
		cache_get_value_name_int(i, "time", time);
		BlockIpAddress(ip, (gettime() - time) * 1000);
	}
	printf("  Banned ip: %d.", row);
	cache_delete(result);
	return true;
}

Public: GameModeInit_Reload()	OnGameModeInit();
public OnGameModeInit()
{
	new string[128];
	StartUNIXTime = GetTickCount();
	printf("\nGamemode: [%s]", GAMEMODE_NAME);
	print("   by Borog25 & Impereal");
	print("---------------");

	//////////	Settings 	//////////
	if(!LoadSettings())
	{
		print("  File settings.ini not found");
		return GameModeInit_Error(true);
	}
	if(SERVER_ID == INVALID_DATA)
	{
		print("  In the settings.cfg file does not indicate the number of server");
		return GameModeInit_Error(true);
	}

	new maxslots = GetConsoleVarAsInt("maxplayers");
    if(maxslots != MAX_PLAYERS)
    {
		printf("  ERROR! MAX_PLAYERS(%d) isn't accord with maxplayers(%d) from server.cfg!", MAX_PLAYERS, maxslots);
	    if(maxslots > MAX_PLAYERS) return GameModeInit_Error();
	}

	SetGameModeText("Role Play (RP)");
	SendRconCommand("hostname The Silver Break Role Play");
	SendRconCommand("mapname loading...");
	format(string, sizeof(string), "maxnpc %d", MAX_NPC);
	SendRconCommand(string);

	EnableStuntBonusForAll(0);
	EnableVehicleFriendlyFire();
	ManualVehicleEngineAndLights();
	DisableNameTagLOS(); // Ники игроков не видны через стены
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	MapAndreas_Init(MAP_ANDREAS_MODE_FULL);

	Anticheat.Toggle(ANTICHEAT);
	UpdateWeather();

	//////////		MySQL 	//////////
	if(!MySQL_Load())
	{
		return GameModeInit_Error(true);
	}
	////////////////////////////////////////

	#if defined _vehicle_core_included
		Callback: Vehicle.OnGameModeInit();
	#endif	
	#if defined _core_interface_included
		Callback: IFace.OnGameModeInit();
	#endif
	#if defined	_job_job_theft_included
		Callback: Theft_OnGameModeInit();
	#endif
	#if defined	_job_job_busdriver_included
		Callback: BusDriver_OnGameModeInit();
	#endif	
	#if defined	_job_job_trucker_included
		Callback: Trucker_OnGameModeInit();
	#endif
	#if defined	_job_part_farmer_included
		Callback: Farmer_OnGameModeInit();
	#endif
	#if defined	_job_part_loader_included
		Callback: Loader_OnGameModeInit();
	#endif
	#if defined	_job_part_delivery_included
		Callback: Delivery_OnGameModeInit();
	#endif
	#if defined _service_casino_included
		Callback: Casino_OnGameModeInit();
	#endif
	#if defined _player_achieve_included
		Callback: Achieve_OnGameModeInit();
	#endif
	#if defined _gang_core_included
		Callback: Gang.OnGameModeInit();
	#endif
	#if defined _inventory_included
		Callback: Inv.OnGameModeInit();
	#endif

	new warehouses = LoadWarehouses();
	printf("  Loaded warehouses: %d.", warehouses);

	new houses = LoadHouses();
	if(houses == -1)
	{
	    print("  Houses not found. Try to restore default houses...");
		RestoreDefaultHouses();
		houses = LoadHouses();
	}
	printf("  Houses has owner: %d/%d.", houses, MaxHouses);

	new biz = LoadBiz();
	if(biz == -1)	print("  Businesses not found.");
	else 			printf("  Businesses have owners: %d/%d.", biz, MaxBiz);

	//---	Objects
	printf("  Load objects:");
	SendRconCommand("loadfs objects");

	OnPrisonStatusChange(LastPrisonStatus);	//  start jail period
	ReloadEmmetStore();

	//////////		NPC 	//////////
	printf("  Load NPC:");
	for(new i = 0; i < MAX_NPC; i++)
	{
		NPC_ID[i] = MyCreateNPC(NpcInfo[i][n_Name]);//, NpcInfo[i][n_Script]);
		if(NPC_ID[i] == INVALID_PLAYER_ID)	printf("WARNING! NPC '%s' (%d) was not created!", NpcInfo[i][n_Name], i);
	}

#if defined _FCNPC_included
	for(new i = 0; i < MAX_NPC; i++)
	{
	    if(NPC_ID[i] == INVALID_PLAYER_ID)
	    {
	    	continue;   //  fix
	    }
	    FCNPC_Spawn(NPC_ID[i], NpcInfo[i][n_Skin], Arr3<NpcInfo[i][n_Pos]>);
		FCNPC_SetAngle(NPC_ID[i], NpcInfo[i][n_Pos][3]);
	}
#endif

	for(new i = 0; i < sizeof(ActorInfo); i++)
	{
		ACTOR[i] = CreateActor(ActorInfo[i][a_Skin], Arr4<ActorInfo[i][a_Pos]>);
		SetActorVirtualWorld(ACTOR[i], ActorInfo[i][a_VW]);
		if(ActorInfo[i][a_Nametag])
		{
			format(string, sizeof(string), "%s", ActorInfo[i][a_Name]);// CFB53B
			if(ActorInfo[i][a_Hint]) strcat(string, "\n{AFAFAF}(прицелиться + y)");
	    	ActorNametag[i] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, ActorInfo[i][a_Pos][0], ActorInfo[i][a_Pos][1], ActorInfo[i][a_Pos][2] + 1.0, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ActorInfo[i][a_VW]);
		}
		if(strlen(ActorInfo[i][a_AnimLib]))	ApplyActorAnimation(ACTOR[i], ActorInfo[i][a_AnimLib], ActorInfo[i][a_AnimName], 4.1, 1, 0, 0, 1, 0);
		//if(A_CITYHALL1 <= i <= A_CITYHALL4){	ApplyActorAnimation(ACTOR[i], "ped", "SEAT_idle", 4.1, 1, 0, 0, 0, 0);	}
	}

	////////////////////////////////////////

	for(new i = 0; i < sizeof(BoxingRing); i++)
	{
		BoxingRing[i][RING_RED_PLAYER] = INVALID_PLAYER_ID;
		BoxingRing[i][RING_BLUE_PLAYER] = INVALID_PLAYER_ID;
	}

	// Просчет максимального ранга фракций
	for(new i = 1; i < sizeof(Faction); i++)
	{
		for(new r; r < sizeof(FactionRank[]); r++)
		{
		    if(strlen(FactionRank[i][r]) > 0)
		    {
		    	FactionRankMax[i]++;
		    }
		}
	}

	//	Add Classes
	for(new i = 1; i < sizeof(Faction); i++)
	{
		AddPlayerClass(FactionSkins[i][ FactionRankMax[i] - 1 ], 1958.3783, 1343.1572, 1100.3746, 269.1425, -1, -1, -1, -1, -1, -1);
	}

	//-----------------------------[Vehicles]-----------------------------------
	new t = GetTickCount();

	//----------------------[Only Blocked Server Cars]--------------------------
	new car1, car2; //tmpcar;
	// Машина праведника
	TruthCar = MyCreateVehicle(483, -1111.1207, -1637.3865, 76.3624, 90.0, 1, 1);
	SetVehicleNumberPlate(TruthCar, "EREHTTUO");
	MySetVehicleToRespawn(TruthCar);
	VehInfo[TruthCar][vLocked] = 999;
	VehInfo[TruthCar][vBlockMove] = true;
	UpdateVehicleParamsEx(TruthCar);

		// Машины Форт Карсона
	car1 = MyCreateVehicle(599,-210.7,999.6,19.8453,90.0,20,1); // Police Rancher
	MyCreateVehicle(599,-210.7,994.6,19.7573,90.0,20,1); // Police Rancher 2
	MyCreateVehicle(599,-210.7,989.6,19.7573,90.0,20,1); // Police Rancher 3
	MyCreateVehicle(416,-304.2692,1032.0936,19.7431,270.0,1,3); // Ambulance
	MyCreateVehicle(442,-304.4656,1023.9050,19.4257,270.0,0,15); // Romero (катафалк)
	MyCreateVehicle(491, -232.9827,1220.8879,19.4931,180.0,0,1);// Машина губернатора
	MyCreateVehicle(511, -31.6397,1083.8129,21.1027,0.0);// Самолет
	MyCreateVehicle(442, -639.1992, 1459.3405, 13.3384, 88.7888, 0, 0);	// Катафалк на кладбище ФК
	//MyCreateVehicle(583, 243.0994,1845.1360,8.3017,270.1920,1,0);// Tug на зоне 69

	// Прочие машины
	MyCreateVehicle(577, 1585.8, 1189.499, 10.7676, 180.0, 48, 45); // AT400 (Andromeda in LV)
	MyCreateVehicle(544, -2020.061, 84.3924, 28.1641, 270.0, 3, 1); // Пожарная лестница (СФ)
	MyCreateVehicle(407, -2020.699, 92.7917, 28.2111, 270.0, 3, 1); // Пожарная машина (СФ)
	//MyCreateVehicle(544, 1219.794, -1312.515, 13.598, 90.0, 3, 1);	// Пожарная машина (ЛС)
	//MyCreateVehicle(407, 1221.078, -1303.867, 13.596, 90.0, 3, 1); 	// Пожарная машина (ЛС)
	//MyCreateVehicle(407, 1221.223, -1321.018, 13.603, 90.0, 3, 1); 	// Пожарная машина (ЛС)

	// Машины Алькатраса
	MyCreateVehicle(430, 700.9841, -2761.6611, 0.3639, 0.0, 34, 246); // Police Predator
	MyCreateVehicle(472, 709.2700, -2761.5857, 0.4229, 0.0, 246, 34); // Coastguard
	MyCreateVehicle(497, 565.2260, -2832.5356, 15.7825, 0.0, 246, 34); // Police Maverick
	MyCreateVehicle(433, 582.1, -2674.3, 13.6, 268.1);	// грузовик для грузчиков
	car2 = MyCreateVehicle(499, 641.7137, -2674.9958, 7.2809, 125.0, 246, 34); // Benson
	// Блокировка системных машин
	for(new x = car1; x <= car2; x++)
	{
		VehInfo[x][vLocked] = 999;
		VehInfo[x][vBlockMove] = true;
		UpdateVehicleParamsEx(x);
	}

	// MyCreateVehicle(525, 1564.5, -1710.5, 5.6, 0.0, 0, 90);// Towtrack
	/*MyCreateVehicle(599, 1545.0, -1684.4, 5.8, 90.0, 0, 90);// Rancher
	MyCreateVehicle(599, 1545.0, -1680.3, 5.8, 90.0, 0, 90);// Rancher
	MyCreateVehicle(599, 1545.0, -1676.3, 5.8, 90.0, 0, 90);// Rancher
	MyCreateVehicle(599, 1545.0, -1672.1, 5.8, 90.0, 0, 90);// Rancher
	MyCreateVehicle(599, 1545.0, -1668.0, 5.8, 90.0, 0, 90);// Rancher
	MyCreateVehicle(599, 1545.0, -1663.0, 5.8, 90.0, 0, 90);// Rancher
	MyCreateVehicle(599, 1545.0, -1659.0, 5.8, 90.0, 0, 90);// Rancher
	MyCreateVehicle(599, 1545.0, -1655.1, 5.8, 90.0, 0, 90);// Rancher
	MyCreateVehicle(599, 1545.0, -1651.1, 5.8, 90.0, 0, 90);// Rancher
	MyCreateVehicle(427, 1529.1, -1684.0, 5.8, 270.0, 0, 90);// Enforcer
	MyCreateVehicle(427, 1529.1, -1688.0, 5.8, 270.0, 0, 90);// Enforcer
	MyCreateVehicle(497, 1550.0, -1612.0, 13.5, 180.0, 0, 90);// Helicopter
	MyCreateVehicle(497, 1564.4, -1612.0, 13.5, 180.0, 0, 90);// Helicopter*/

	// Салон 'Coutt And Shoutz' (лоурайдерские)
	SalonCars1[0] = MyCreateVehicle(412,2135.0000,-1128.5000,25.3222,60.0,-1,-1);
	SalonCars1[1] = MyCreateVehicle(534,2135.0000,-1134.0000,25.2462,60.0,-1,-1);
	SalonCars1[2] = MyCreateVehicle(535,2135.0000,-1139.5000,25.2090,60.0,-1,-1);
	SalonCars1[3] = MyCreateVehicle(536,2135.0000,-1145.0000,24.7014,60.0,-1,-1);
	SalonCars1[4] = MyCreateVehicle(566,2120.0000,-1145.0000,24.3514,300.0,-1,-1);
	SalonCars1[5] = MyCreateVehicle(567,2120.0000,-1139.5000,24.9053,300.0,-1,-1);
	SalonCars1[6] = MyCreateVehicle(575,2120.0000,-1134.0000,24.9734,300.0,-1,-1);
	SalonCars1[7] = MyCreateVehicle(576,2120.0000,-1128.5000,25.0052,300.0,-1,-1);

	// Салон 'Grotti' (городские)
	SalonCars2[0] = MyCreateVehicle(526,562.2294,-1270.7886,16.9400,60.0,-1,-1);
	SalonCars2[1] = MyCreateVehicle(419,562.3832,-1278.1786,16.9400,60.0,-1,-1);
	SalonCars2[2] = MyCreateVehicle(600,562.0000,-1288.0000,16.8900,30.0,-1,-1);
	SalonCars2[3] = MyCreateVehicle(517,557.0000,-1288.0000,17.0000,30.0,-1,-1);
	SalonCars2[4] = MyCreateVehicle(492,552.0000,-1288.0000,16.9100,30.0,-1,-1);
	SalonCars2[5] = MyCreateVehicle(422,547.0000,-1288.0000,17.1200,30.0,-1,-1);
	SalonCars2[6] = MyCreateVehicle(540,537.0000,-1288.0000,17.0200,330.0,-1,-1);
	SalonCars2[7] = MyCreateVehicle(500,532.0000,-1288.0000,17.2190,330.0,-1,-1);
	SalonCars2[8] = MyCreateVehicle(400,527.0000,-1288.0228,17.1900,330.0,-1,-1);
	SalonCars2[9] = MyCreateVehicle(550,536.9458,-1275.9215,16.9900,240.0,-1,-1);
	SalonCars2[10] = MyCreateVehicle(475,542.4854,-1270.8151,16.9010,240.0,-1,-1);
	SalonCars2[11] = MyCreateVehicle(439,548.6223,-1266.3193,16.9900,240.0,-1,-1);

	// Салон 'Ottos Autos' (спортивные)
	SalonCars3[0] = MyCreateVehicle(562,-1666.6287,1216.1102,6.9124,270.0,-1,-1);
	SalonCars3[1] = MyCreateVehicle(560,-1668.5402,1205.7271,6.8326,360.0,-1,-1);
	SalonCars3[2] = MyCreateVehicle(558,-1662.5000,1221.5000,13.4485,270.0,-1,-1);
	SalonCars3[3] = MyCreateVehicle(559,-1648.4945,1206.9895,13.3491,90.0,-1,-1);
	SalonCars3[4] = MyCreateVehicle(561,-1668.7797,1206.7297,13.3739,270.0,-1,-1);
	SalonCars3[5] = MyCreateVehicle(565,-1661.4327,1219.8186,20.7290,210.0,-1,-1);
	SalonCars3[6] = MyCreateVehicle(477,-1655.5438,1212.4526,20.8581,120.0,-1,-1);
	SalonCars3[7] = MyCreateVehicle(496,-1651.1085,1207.7632,20.7081,120.0,-1,-1);
	SalonCars3[8] = MyCreateVehicle(506,-1662.2345,1205.8899,20.7981,30.0,-1,-1);
	SalonCars3[9] = MyCreateVehicle(587,-1671.3536,1205.9240,20.8365,300.0,-1,-1);

	// Салон 'Wang Cars' (элитные)
	SalonCars4[0] = MyCreateVehicle(468,-1962.7000,300.0200,35.0400,220.0,-1,-1);
	SalonCars4[1] = MyCreateVehicle(463,-1959.8000,303.1381,34.9339,200.0,-1,-1);
	SalonCars4[2] = MyCreateVehicle(581,-1956.0000,302.9111,34.9479,160.0,-1,-1);
	SalonCars4[3] = MyCreateVehicle(461,-1953.0000,300.0000,34.9926,140.0,-1,-1);
	SalonCars4[4] = MyCreateVehicle(445,-1947.0000,274.0000,35.2532,120.0,-1,-1);
	SalonCars4[5] = MyCreateVehicle(426,-1947.0000,269.0000,35.1384,120.0,-1,-1);
	SalonCars4[6] = MyCreateVehicle(405,-1947.0000,264.0000,35.2388,120.0,-1,-1);
	SalonCars4[7] = MyCreateVehicle(551,-1947.0000,259.0000,35.2479,120.0,-1,-1);
	SalonCars4[8] = MyCreateVehicle(474,-1961.5000,260.0000,35.1647,315.0,-1,-1);
	SalonCars4[9] = MyCreateVehicle(533,-1961.5000,272.0000,35.1171,315.0,-1,-1);
	SalonCars4[10] = MyCreateVehicle(589,-1947.5000,271.3100,40.6463,90.0,-1,-1);
	SalonCars4[11] = MyCreateVehicle(466,-1947.5000,265.5336,40.7164,90.0,-1,-1);
	SalonCars4[12] = MyCreateVehicle(554,-1949.0000,259.0000,41.0307,45.0,-1,-1);
	SalonCars4[13] = MyCreateVehicle(489,-1955.5000,257.0000,41.0994,360.0,-1,-1);
	SalonCars4[14] = MyCreateVehicle(518,-1953.5000,293.0000,40.6296,130.0,-1,-1);
	SalonCars4[15] = MyCreateVehicle(491,-1953.5000,301.0000,40.7742,130.0,-1,-1);

	printf("Time to load static vehicle: %d", GetTickCount() - t);

	// Create 3d text and locked cars
	CreateSalon3DText(SalonCars1, sizeof(SalonCars1), "* [Coutt And Shoutz] *");
	CreateSalon3DText(SalonCars2, sizeof(SalonCars2), "* [GROTTI] *");
	CreateSalon3DText(SalonCars3, sizeof(SalonCars3), "* [Ottos Autos] *");
	CreateSalon3DText(SalonCars4, sizeof(SalonCars4), "* [Wang Cars] *");

	//-----------------------------[ModeInit/Pickups]------------------------------------
	PoliceDutyPickup	= CreateDynamicPickup(1275, 1, 254.1684, 77.638, 1003.64);
	HospitalDutyPickup	= CreateDynamicPickup(1275, 1, -2628.83, 621.83, 1274.26);
	LawbookPickup		= CreateDynamicPickup(2894, 2, 249.65,69.35,1003.5);
	CopGuidePickup		= CreateDynamicPickup(2894, 2, 235.41,72.17,1004.9);
	FineParkPickup		= CreateDynamicPickup(2485, 1, 1573.0726, -1605.7681, 13.2);
	StuffBankEnter		= CreateDynamicPickup(1318, 1, 2155.4836,1612.1664,993.6882, 1);	// Вход в служ помещение в банке
	StuffBankExit		= CreateDynamicPickup(1318, 1, 2148.3372,1605.5266,1001.7789, 1);	// Выход из служ помещение в банке
	StuffBankExit2		= CreateDynamicPickup(1318, 1, 2134.1162,1609.4934,993.6882, 1);	// Выход из служ помещение в банке (2)
	VentBankPickup		= CreateDynamicPickup(1239, 1, 2143.1941,1619.9510,1001.4, 1);	// Вход в вентиляцию в банке
	PrisonEatPickup		= CreateDynamicPickup(1239, 2, 598.9, -2848.9, 1032.7);
	RingInfoPickup[0]	= CreateDynamicPickup(1314, 1, 511.0, -2749.0, 13.15);
	RingInfoPickup[1]	= CreateDynamicPickup(1314, 1, 760.6, 5.7, 1000.7);
	GYMPickup[0]		= CreateDynamicPickup(19555, 1, 769.87, 13.24, 1000.70);
	GYMPickup[1]		= CreateDynamicPickup(19555, 1, 770.36, -23.1, 1000.58);
	MotelPickup			= CreateDynamicPickup(PICKUPID_ENTRY, 1, 2228.06, -1150.4, 1030.0);
	MRoomPickup[0]		= CreateDynamicPickup(PICKUPID_ENTRY, 1, 2282.93, -1140.05, 1051.0);
	MRoomPickup[1]		= CreateDynamicPickup(PICKUPID_ENTRY, 1, 2259.65, -1136.00, 1051.0);
	MRoomPickup[2]		= CreateDynamicPickup(PICKUPID_ENTRY, 1, 2255.01, -1139.83, 1051.0);
	MechanicPickup 		= CreateDynamicPickup(1275, 1, 1110.350, -1225.08, 15.82);
	NewbiePickup 		= CreateDynamicPickup(1314, 1, 1691.34, -2328.56, 13.54, VW_NONE);
	AirportPickup 		= CreateDynamicPickup(PICKUPID_ENTRY2, 1, 1685.7, -2335.0, 14.0, VW_NONE);
	BoardPickup[0]		= CreateDynamicPickup(1239, 1, 929.10, -1620.339, 13.5);
	BoardPickup[1]		= CreateDynamicPickup(1239, 1, 2160.11, -2297.52, 13.5);

	//	склады
	WarehousePickup[0] = CreateDynamicPickup(19605, 1, 2493.2795,-1710.4559,1014.49); // Склад банды Grove Street
	WarehousePickup[1] = CreateDynamicPickup(19605, 1, 487.6515,1414.9171,1080.0);	// Склад банды Ballas
	WarehousePickup[2] = CreateDynamicPickup(19605, 1, 2811.8481,-1166.9017,1025.32); // Склад банды Vagos
	WarehousePickup[3] = CreateDynamicPickup(19605, 1, 1787.2050,-2095.6160,1021.18); // Склад банды Aztecas
	WarehousePickup[4] = CreateDynamicPickup(19605, 1, 300.7873,310.1714,1003.05); 	// Склад банды Rifa
	WarehousePickup[5] = CreateDynamicPickup(19605, 1, 2551.264, -1346.444, 1060.0);	// Склад мафии РМ
	WarehousePickup[6] = CreateDynamicPickup(19605, 1, 162.1590, 1384.7449, 1087.6); 	// Склад мафии ЛКН
	WarehousePickup[7] = CreateDynamicPickup(19605, 1, -2162.67, 678.71, 1049.6); 		// Склад мафии Якудза

	CrimebankPickup[0] = CreateDynamicPickup(1274, 1, 2492.68, -1701.17, 1014.76);	//	Groove Street
	CrimebankPickup[1] = CreateDynamicPickup(1274, 1, 482.096, 1400.174, 1080.25);	//	Ballas
	CrimebankPickup[2] = CreateDynamicPickup(1274, 1, 2816.39, -1173.36, 1025.57);	//	Vagos
	CrimebankPickup[3] = CreateDynamicPickup(1274, 1, 1777.20, -2090.75, 1021.42);	//	Aztecas
	CrimebankPickup[4] = CreateDynamicPickup(1274, 1, 302.038, 301.5905, 1003.53);	//	Rifa

	// Пикап починки авто
	for(new p; p < sizeof(AutoRepairPos); p++)	RecreateRepairPickup(p);

	// Пикапы авто салонов
	// CreateDynamicPickup(1239, 1, -217.0,1211.8094,19.9450, 0);
	CarSalonPickup_F = CreateDynamicPickup(1239, 1, 2131.8499,-1150.9371,24.1029, 0);
	CreateDynamicPickup(1239, 1, 541.3572,-1293.3917,17.2422, 0);
	CreateDynamicPickup(1239, 1, -1649.2346,1209.3027,7.2500, 0);
	CarSalonPickup_L = CreateDynamicPickup(1239, 1, -1961.7168,288.5224,35.4688, 0);

	//	пикапы для работы в тюрьме
	j_fFinalPickup = CreateDynamicPickup(1239, 1, 2549.3, -1283.9, 1044.1, VW_JAIL, 2);
	j_lStartPickup = CreateDynamicPickup(1239, 1, 505.3, -2677.2, 13.1);
	j_matpickup[0] = CreateDynamicPickup(1279, 2, Arr3<j_fMatPos[0]>, VW_JAIL, 2);
	for(new i = 1; i < sizeof(j_fMatPos) - 1; i++)
		CreateDynamicPickup(1279, 2, Arr3<j_fMatPos[i]>, VW_JAIL, 2);
    j_matpickup[1] = CreateDynamicPickup(1279, 2, Arr3<j_fMatPos[ sizeof(j_fMatPos) - 1 ]>, VW_JAIL, 2);

	//	Работа оружейника
	GunDealPickup = CreateDynamicPickup(1239, 1, 2744.7, -2453.7, 13.8);
	//	Работа наркодиллера
	DrugDealPickup[0] = CreateDynamicPickup(1239, 1, -1066.5, -1154.5, 129.2);
	DrugDealPickup[1] = CreateDynamicPickup(1239, 1, -2164.1, -249.25, 36.51);

	//--------------------------------[Map Icons]-------------------------------
	for(new i; i < sizeof(StaticMapIcon); i++)
	{
		static_MapIconID[i] = CreateDynamicMapIcon(StaticMapIcon[i][smp_x], StaticMapIcon[i][smp_y], StaticMapIcon[i][smp_z], StaticMapIcon[i][smp_type], StaticMapIcon[i][smp_color], -1, -1, -1);
	}

	//-------------------------------[Checkpoints]------------------------------
    CP_AUTOSCHOOL		=	CreateDynamicCP(-2026.8,-114.5,1035.2, 1.0, -1,-1,-1, 35.0);		// Автошкола
	CP_BANK				=	CreateDynamicCP(2144.3699,1620.7753,993.6882, 1.0, -1,-1,-1, 35.0);	// Bank
	CP_SEXSHOP 			=	CreateDynamicCP(-104.7,-10.7,1000.7, 1.0, -1,-1,-1, 35.0);			// Sex Shop
	CP_MOTEL			=	CreateDynamicCP(2217.4, -1147.0, 1025.8, 1.0, -1, -1, -1, 35.0);
	CP_SHOOTING			=	CreateDynamicCP(286.3, -30.1, 1001.5, 1.0, -1, -1, -1, 35.0);		// Shooting-Range
	CP_EXIT_TIR			=	CreateDynamicCP(286.1, -29.1, 1001.5, 1.0, -1, -1, -1, 35.0);
	CP_DRUGSTORE		=	CreateDynamicCP(325.5470,1123.4585,1083.9, 1.0, -1,-1,-1, 20.0);	// Нарко в притоне
	CP_GUNDEAL			=	CreateDynamicCP(-615.85, -477.75, 25.68, 1.0, -1, -1, -1, 10.0);	// Переработка материалов

	for(new i = 0; i < sizeof(j_fJobPos); i++){	j_jobcp[i] = CreateDynamicCP(Arr3<j_fJobPos[i]>, 0.3, -1, 2, -1, 3.0);	}	//	Работа на зоне

	//------------------------------[Dynamic Zone]------------------------------
	StripZone[0]	= CreateDynamicRectangle(1212.9, -9.8, 1218.0, -3.1);
	StripZone[1]	= CreateDynamicRectangle(1218.4, 10.5, 1223.1, 5.63);
	PoliceGateZone	= CreateDynamicSphere(1589.1691,-1637.8145,13.4521, 10.0); // Область ворот ЛСПД
	GateInfoZone[0] = CreateDynamicSphere(1544.3156,-1627.3094,13.3828, 10.0); // Область шлакбаума ЛСПД
	GateInfoZone[1] = CreateDynamicSphere(-2047.1804,-80.8768,35.1641, 12.0); // Область шлакбаума автошколы
	RaceZone 		= CreateDynamicSphere(2695.63, -1704.69, 11.84, 2.0);	//	Вход в гонки на автодроме ЛС
	AirportZone[0]	= CreateDynamicSphere(1685.80, -2336.10, 13.56, 5.0, VW_AIRPORT);
	AirportZone[1]	= CreateDynamicRectangle(1684.13, -2335.92, 1687.35, -2334.25, VW_AIRPORT);
	AirportZone[2]	= CreateDynamicRectangle(1646.0074,-2369.5378,1710.7339,-2336.3240, VW_AIRPORT); // Под музыку

	//	Armour Zone
	//	LSPD
	AmmoZone[0] = CreateDynamicRectangle(309.1, -164.1, 310.7, -162.4);
	AmmoZone[1] = CreateDynamicRectangle(310.7, -164.1, 312.5, -162.3);
	AmmoZone[2] = CreateDynamicRectangle(310.7, -162.3, 312.4, -160.7);
	AmmoZone[3] = CreateDynamicRectangle(309.1, -162.4, 310.7, -160.7);
	AmmoZone[4] = CreateDynamicRectangle(313.4, -164.0, 315.0, -162.3);
	AmmoZone[5] = CreateDynamicRectangle(315.0, -164.0, 316.6, -162.3);
	AmmoZone[6] = CreateDynamicRectangle(315.0, -162.3, 316.6, -160.7);
	AmmoZone[7] = CreateDynamicRectangle(313.4, -162.3, 315.0, -160.7);
	AmmoZone[8] = CreateDynamicRectangle(308.4, -159.9, 310.3, -158.5);
	AmmoZone[9] = CreateDynamicRectangle(312.6, -159.4, 314.9, -158.2);
	AmmoZone[10] = CreateDynamicRectangle(317.7, -161.1, 319.4, -158.4);
	//	Ammo 1
	AmmoZone[11] = CreateDynamicRectangle(288.9, -36.2, 290.4, -34.8);
	AmmoZone[12] = CreateDynamicRectangle(288.9, -34.5, 290.5, -32.7);
	AmmoZone[13] = CreateDynamicRectangle(290.4, -36.2, 291.9, -34.5);
	AmmoZone[14] = CreateDynamicRectangle(290.5, -34.5, 291.9, -32.7);
	AmmoZone[15] = CreateDynamicRectangle(294.4, -34.4, 292.9, -32.7);
	AmmoZone[16] = CreateDynamicRectangle(294.4, -36.2, 292.9, -34.4);
	AmmoZone[17] = CreateDynamicRectangle(295.9, -36.2, 294.4, -34.5);
	AmmoZone[18] = CreateDynamicRectangle(295.9, -34.4, 294.4, -32.7);
	AmmoZone[19] = CreateDynamicRectangle(294.7, -38.2, 292.3, -40.4);
	AmmoZone[20] = CreateDynamicRectangle(300.6, -37.2, 299.2, -35.2);
	AmmoZone[21] = CreateDynamicRectangle(298.7, -39.5, 296.6, -37.2);
	//	Ammo Getto
	AmmoZone[22] = CreateDynamicRectangle(291.334, -105.523, 289.034, -106.713);	//	м4
	AmmoZone[23] = CreateDynamicRectangle(293.594, -106.933, 291.334, -105.523);	//	ак
	AmmoZone[24] = CreateDynamicRectangle(289.034, -106.713, 287.664, -105.453);
	AmmoZone[25] = CreateDynamicRectangle(287.664, -107.658, 285.936, -105.348);

	AmmoZone[26] = CreateDynamicRectangle(290.155, -109.658, 289.055, -110.738);	//	глушитель
	AmmoZone[27] = CreateDynamicRectangle(291.315, -110.908, 290.155, -109.658);	//	дигл
	AmmoZone[28] = CreateDynamicRectangle(289.055, -110.738, 287.325, -109.618);	//	обрез
	AmmoZone[29] = CreateDynamicRectangle(293.575, -109.808, 291.315, -110.908);	//	мп5

	AmmoZone[30] = CreateDynamicRectangle(298.632, -105.749, 296.872, -108.009);
	AmmoZone[31] = CreateDynamicRectangle(296.822, -103.309, 298.632, -105.749);
	AmmoZone[32] = CreateDynamicRectangle(287.325, -108.288, 286.005, -110.608);	//	броня

	TrainingZone[0] = CreateDynamicRectangle(2225.4, -1143.0, 2216.27, -1155.16, VW_HOTEL);	//	Подсказка при обучении

	GlobalGZ = GangZoneCreate(-20000.0, -20000.0, 20000.0, 20000.0);
	//------------------------------[3D Text Labels]----------------------------
	// testLOS: 0 - виден через объекты, 1 - не виден
	//for(new x = 0; x <= 2; x++)	CreateDynamic3DTextLabel("Предпринимательство", COLOR_ORANGE, 358.6, 168.0, 1008.9, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, x);
	//for(new x = 3; x <= 5; x++)	CreateDynamic3DTextLabel("Покупка недвижимости", COLOR_ORANGE, 354.4488, 170.0939, 1026.2964, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, x);
	// CreateDynamic3DTextLabel("Заказ авто", COLOR_ORANGE, -1714.8666, -63.7032, 4.0547, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	CreateDynamic3DTextLabel("Информация для\nновичков", 0x007CADFF, 1691.34,-2328.56, 14.1, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VW_NONE);
	CreateDynamic3DTextLabel("Изучение стиля боя", 0x007CADFF, 769.87, 13.24, 1001.40, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	CreateDynamic3DTextLabel("Изучение стиля боя", 0x007CADFF, 770.36, -23.1, 1001.30, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	CreateDynamic3DTextLabel(ACTION_TEXT, COLOR_ACTION, 245.1, 72.75, 1004.5, 8.0);
	CreateDynamic3DTextLabel("Свод законов", 0x000CFFFF, 249.65,69.35,1004.25, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);// LawbookPickup
	CreateDynamic3DTextLabel("Инструктаж", 0xFFFFFFFF, 235.41, 72.17, 1005.4, 14.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);// CopGuidePickup
	CreateDynamic3DTextLabel("Полицейский участок\n{FFFFFF}** Штраф-стоянка **", 0x000CFFFF, 1573.0726, -1605.7681, 14.0, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	CreateDynamic3DTextLabel("Аварийная кнопка\n" ACTION_TEXT, COLOR_ACTION, 320.41678,1023.88660,1951.0, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	CreateDynamic3DTextLabel("Используйте /dance чтобы танцевать", 0xFF6347FF, 487.7, -14.5, 1001.3, 10.0);
	CreateDynamic3DTextLabel("Раздевалка / Инфо", 0xCFB53BFF, -1060.89, -1195.5, 130.2, 15.0);
	CreateDynamic3DTextLabel("Склад", 0xCFB53BFF, -1060.82, -1205.38, 130.1, 15.0);
	Drug3DText = CreateDynamic3DTextLabel(" ", 0x000000FF, 325.5470,1123.4585,1084.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	j_f3DText = CreateDynamic3DTextLabel("Склад: 0 шт.", 0xFF8300FF, 2549.3, -1283.9, 1044.1, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VW_JAIL, 2);
	j_l3DText = CreateDynamic3DTextLabel("Склад: 0 шт.", 0xFF8300FF, 505.3, -2677.2, 13.1, 50);
	UpdateJailStorage();
	// Тренажеры
	for(new i = 0; i < sizeof BenchpressPos; i++)
	{
	    CreateDynamic3DTextLabel(ACTION_TEXT, COLOR_ACTION, Arr3<BenchpressPos[i]>, 2.5);
	    g_BenchpressObject[i] = CreateDynamicObject(2913, BenchpressPos[i][4], BenchpressPos[i][5], BenchpressPos[i][6], BenchpressPos[i][7], BenchpressPos[i][8], BenchpressPos[i][9]);
	}

	//	Койки больницы
	for(new i = 0; i < sizeof(HospitalBerth); i++)
	{
		Berth3DText[i] = CreateDynamic3DTextLabel("Койка свободна\n" ACTION_TEXT, COLOR_ACTION, Arr3<HospitalBerth[i][0]>, 4.0);
	}
	// Заправки
	for(new p = 0; p < sizeof(FillPos); p++)
	{
		CreateDynamicPickup(1244, 1, Arr3<FillPos[p]>);
		CreateDynamic3DTextLabel("* Заправка *\nЗаглушите двигатель и посигнальте", 0xFFFFFFFF, Arr3<FillPos[p]>, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	}
	// Остановки поезда
	for(new i = 0; i < sizeof(StationInfo); i++)
	{
        RailStation3DText[i] = CreateDynamic3DTextLabel(" ", 0x33CCFFFF, StationInfo[i][stPos][0], StationInfo[i][stPos][1], StationInfo[i][stPos][2] + 1.0, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}

	//	Банкоматы
	for(new i = 0; i < sizeof(ATM); i++)
	{
		new Float:X = ATM[i][0], Float:Y = ATM[i][1];
		CreateDynamicObject(2754, Arr6<ATM[i]>);
		GetXYInFrontOfPoint(X, Y, ATM[i][5] + 90.0, 0.7);
		ATM_Zone[i] = CreateDynamicCircle(X, Y, 0.5);
		CreateDynamic3DTextLabel("Банкомат", COLOR_3DTEXT, ATM[i][0], ATM[i][1], ATM[i][2] + 1.25, 8.0);
	}

	// Зоны для тюрьмы
	new Float:zone1[] =
	{//  зона работы/еды
		581.6240, -2713.8054,	487.4910, -2714.1001,	491.8114, -2635.4983,
		524.9461, -2626.6062,	568.9939, -2632.0305,	591.7875, -2645.3855,
		589.7308, -2683.8643
	};
	new Float:zone2[] =
	{//  зона прогулки
		529.0114, -2714.6077,	495.7836, -2714.5776,	494.9553, -2740.1665,
		494.6679, -2754.9326,	493.9542, -2774.7085,	493.7699, -2790.3254,
		495.1075, -2804.2351,	496.9479, -2813.5596,	505.2875, -2817.8433,
		552.6281, -2817.8599,	553.6650, -2793.2856,	553.6649, -2756.8457,
		551.9862, -2748.7175,	535.3809, -2748.7798,	529.1923, -2738.6130,
		529.0114, -2714.6077
	};
	JailGZ = GangZoneCreate(440.2, -3035.7, 826.3, -2565.9);
	JailZone[0] = CreateDynamicRectangle(440.2, -3035.7, 826.3, -2565.9);
	JailZone[1] = CreateDynamicPolygon(zone1, -FLOAT_INFINITY, FLOAT_INFINITY, sizeof(zone1), 0, 0);
	JailZone[2] = CreateDynamicPolygon(zone2, -FLOAT_INFINITY, FLOAT_INFINITY, sizeof(zone2), 0, 0);

	//  GreenZones
	for(new i = 0; i < sizeof GreenZones; i++)
	{
	    area_GreenZones[i] = CreateDynamicRectangle(Arr4<GreenZones[i]>, 0, 0);
	}

	//////////	Timers 	//////////
	SetTimer("AnticheatTimer", 950, true);
	SetTimer("EverySecondTimer", 950, true);
	SetTimer("QuickTimer", 100, true);

	//------------------------------[Others]------------------------------------
	CreateStaticMenu();     //	Меню
	CreateStaticObject();   //	Объекты
	CreateCutSceneDecor();	//	Декорации кат-сцен
	return true;
}// end of OnGameModeInit()

public OnGameModeExit()
{
	mysql_query_ex("UPDATE `players` SET `online` = '-1' WHERE `online` > '-1'");
	#if defined _FCNPC_included
		for(new i = 0; i < MAX_NPC; i++)
		{
			if(NPC_ID[i] != INVALID_PLAYER_ID)
			{
				FCNPC_Destroy(NPC_ID[i]);
			}
		}
	#else
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerNPC(i))	Kick(i);
		}
	#endif

	SaveHouse();
	SaveBiz();

	mysql_close(g_SQL);
	return true;
}

IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
    GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
    GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

    new Float:vertical, Float:horizontal;

    switch (GetPlayerWeapon(playerid))
    {
                    case 34,35,36: {
                    if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
                    return false;
                    }
                    case 30,31: {vertical = 4.0; horizontal = -1.6;}
                    case 33: {vertical = 2.7; horizontal = -1.0;}
                    default: {vertical = 6.0; horizontal = -2.2;}
    }

    new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
    new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
    GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

    if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
    return false;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(GetWeaponSlot(weaponid) == 255)	return false;
	if(!gPlayerLogged[playerid])		return false;
	if(IsPlayerNPC(playerid))			return true;

	new string[128];
	if(showDebug[playerid])
	{
		SendFormatMessage(playerid, -1, string, "OnPlayerWeaponShot [weaponod = %d, hittype = %d, hitid = %d, %f %f %f]", weaponid, hittype, hitid, fX, fY, fZ);
	}

	SetPVarInt(playerid, "Player:LastShotTime", GetTickCount());

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
		// Захват зон
		if(InGangZone[playerid] >= 0 && GangZoneStatus[InGangZone[playerid]] == 0)
		{
			new zone = InGangZone[playerid];
		    if((PlayerInfo[playerid][pFaction] == GangZoneOwner[zone] && PlayerInfo[hitid][pFaction] == GangZoneEnemy[zone])
		    || (PlayerInfo[hitid][pFaction] == GangZoneOwner[zone] && PlayerInfo[playerid][pFaction] == GangZoneEnemy[zone]))
		    {
				SetPlayerArmedWeapon(playerid, 0);
				ShowPlayerHint(playerid, "Во время ожидания~n~нападение ~r~запрещено");
				return false;
		    }
		}
		// Прочее
		if(IsPlayerNPC(hitid) == 0)
		{
			if(GetPVarInt(playerid, "Player:InGreenZone") || GetPVarInt(hitid, "Player:InGreenZone")
			|| IsPlayerInGreenZoneVW(playerid) || IsPlayerInGreenZoneVW(hitid))	// Green Zone
			{
				if(!(GetPlayerWantedLevel(playerid)	&& PlayerInfo[hitid][pFaction] == F_POLICE)
				&& !(GetPlayerWantedLevel(hitid)	&& PlayerInfo[playerid][pFaction] == F_POLICE))
			    {	// Если playerid и hitid не полицейский и преступник
					return false;
				}
			}
		}
	}
	else if(hittype == BULLET_HIT_TYPE_VEHICLE)
	{
	    new driverid = VehInfo[hitid][vDriver];
	    if(driverid != (-1))
	    {
			if(PlayerInfo[playerid][pFaction] == F_POLICE)
			{
			    if(CriminalDanger[driverid] == false)
			    {
					GivePoliceWarn(playerid, 50, "Неправомерное нападение");
					SetPlayerArmedWeapon(playerid, 0);
				}
			}
			else if(PlayerInfo[driverid][pFaction] == F_POLICE)
			{
			    if(InGangZone[playerid] == -1)
			    {
					ToggleCriminalDanger(playerid, true);
					CrimePlayer(playerid, CRIME_COP_KILL);
				}
			}
			// Захват зон
			if(InGangZone[playerid] >= 0 && GangZoneStatus[InGangZone[playerid]] == 0)
			{
				new zone = InGangZone[playerid];
			    if((PlayerInfo[playerid][pFaction] == GangZoneOwner[zone] && PlayerInfo[driverid][pFaction] == GangZoneEnemy[zone])
			    || (PlayerInfo[driverid][pFaction] == GangZoneOwner[zone] && PlayerInfo[playerid][pFaction] == GangZoneEnemy[zone]))
			    {
					SetPlayerArmedWeapon(playerid, 0);
					ShowPlayerHint(playerid, "Во время ожидания~n~нападение ~r~запрещено");
					return false;
			    }
			}
	    }
	}
	else if(hittype == BULLET_HIT_TYPE_PLAYER_OBJECT)
	{
 		if(p_isShooting{playerid})
		{
			for(new i = 1; i < 8; i++)
			{
				if(hitid == p_ShootingTargetObjects[playerid][i])
				{
					p_ShootingHits{playerid}++;
					ProgressBarUpdate(playerid, ((PlayerInfo[playerid][pShooting] - 1) * 3 * 7) + (p_ShootingWave{playerid} * 7) + p_ShootingHits{playerid}, (3 * 3 * 7), "Progress");
					if(p_ShootingHits{playerid} == 7)
					{
						new Float:obj_pos[3];
						GetPlayerObjectPos(playerid, p_ShootingTargetObjects[playerid][0], Arr3<obj_pos>);
						MoveTirTarget(playerid,	obj_pos[0] - TIR_MODIFY_POS, obj_pos[1], obj_pos[2]);
						SetTimerEx("NextShootingTarget", 1500, false, "d", playerid);
						return true;
					}
				}
			}
		}
	}
	// Преследование
	if(PS_NONE < PursuitStatus[playerid] < PS_CRIMINAL)
	{
		ToggleCriminalDanger(playerid, true);
		CrimePlayer(playerid, CRIME_RESIST);
		if(PursuitCrimTransit[playerid])	CrimePlayer(playerid, CRIME_CARRY_CRIMINAL);
	}
	return true;
}

stock GivePlayerDamage(playerid, Float:amount)
{
    new Float:health = MyGetPlayerHealth(playerid);
    new Float:armour = MyGetPlayerArmour(playerid);
    if(armour > 0.0)
    {
        if(amount >= armour)
        {
            health = health - (amount - armour);
            MySetPlayerArmour(playerid, 0.0);
            MySetPlayerHealth(playerid, health);
        }
        else MySetPlayerArmour(playerid, armour-amount);
    }
    else MySetPlayerHealth(playerid, health-amount);
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	// Float:amount (положительный)
	// bodypart: 9 - голова, 8 - правая нога, 7 - левая нога, 6 - правая рука, 5 - левая рука, 4 - член, 3 - корпус
	if(issuerid == INVALID_PLAYER_ID)	return false;
	if(IsPlayerNPC(playerid) || gPlayerLogged[playerid] == false)
	{
		return true;
	}
	new string[128];
	if(showDebug[playerid])
	{
		SendFormatMessage(playerid, -1, string, "OnPlayerTakeDamage [issuerid = %d, amount = %f, weaponid = %d, bodypart = %d]", issuerid, amount, weaponid, bodypart);
	}

	//	бокс
	if(gPlayerRing[playerid] != (-1))
	{
		new Float:health = MyGetPlayerHealth(playerid);
		if(issuerid != INVALID_PLAYER_ID && gPlayerBoxEnemy[issuerid] == playerid)
		{
			UpdateAttackHealth(issuerid);
		}
		if((health - amount) < 15.0)
		{
			FinishBox(playerid, (weaponid == 54) ? 0 : 1);
		}
		return true;
	}

	//	Система самообороны
	new gtc			= GetPVarInt(issuerid,		"Player:Attack:LastAttack");
	new Float:dmg	= GetPVarFloat(issuerid,	"Player:Attack:GiveDmg") + amount;
	if(GetTickCount() > gtc + 60000)	dmg = amount;
	if(dmg > 5.0)
	{
		if(!IsForce(PlayerInfo[issuerid][pFaction]))
		{
			//	ставим флаг атакующий
			SetPVarInt(issuerid, "Player:Attack:Attacker",	true);
			SetPVarInt(issuerid, "Player:Attack:GTC",		GetTickCount());
			foreach(LoginPlayer, i)
			{
				if(PlayerInfo[i][pFaction] != F_POLICE)
				{
					MySetPlayerMarkerForPlayer(i, issuerid, 0xFF0000FF);
				}
			}
		}
	}
	SetPVarFloat(issuerid,	"Player:Attack:GiveDmg",	dmg);
	SetPVarInt(issuerid,	"Player:Attack:LastAttack",	GetTickCount());


	if(issuerid != INVALID_PLAYER_ID)
	{
	    if(weaponid == 50 && amount < 1.0)
	    {
	        new vehid = GetPlayerVehicleID(issuerid);
	        if(vehid > 0)
	        {
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(vehid, X, Y, Z);
		        MySetPlayerPos(playerid, X, Y, Z + 2.0);
		        ClearAnimations(playerid);
	        }
	        return false;
	    }
	
		new weap = GetPlayerWeapon(issuerid);
		if(weap != weaponid || GetPlayerState(issuerid) != PLAYER_STATE_ONFOOT)								return false;
		else if(weaponid >= 0 && weaponid <= 15 || weaponid == 37 || weaponid == 41 || weaponid == 42)
		{
			if(GetDistanceBetweenPlayers(playerid, issuerid) > 4.0)											return false;
			if(GetTickCount() - GetPVarInt(issuerid, "Player:LastAttack") > 500 + GetPlayerPing(playerid))	return false;
		}

//		GivePlayerDamage(playerid, amount);
//		gDamageUnix[issuerid] = gettime();
//		gDamageSum[issuerid] = amount);
		/*if(22 <= weaponid <= 34)
		{
			PlayerPlaySound(issuerid, 6401, 0.0, 0.0, 0.0);
		}*/
		if(PlayerInfo[issuerid][pFaction] == F_POLICE)
		{	// Напал полциейский
			if(PLAYER_STATE_ONFOOT <= GetPlayerState(playerid) <= PLAYER_STATE_PASSENGER)
			{
				if(robbery_step[playerid] == 1)	robbery_money[playerid] -= 50;
				if(CriminalDanger[playerid] == false)
				{// Неправомерное применение силы
				    GivePoliceWarn(issuerid, 50, "Неправомерное нападение");
				    SetPlayerArmedWeapon(issuerid, 0);
				}
				else
				{
					if(GetPlayerWeapon(issuerid) == WEAPON_NITESTICK)
					{
						if(PlayerCuffedTime[playerid])
						{
							SendClientMessage(issuerid, COLOR_WHITE, PREFIX_ERROR "Игрок уже оглушен.");
						}
						else
						{
							FadeColorForPlayer(playerid, 0, 168, 107, 255, 0, 0, 255, 0, 50);
							amount = 0;
							format(string, sizeof(string), "оглушил %s'а.", ReturnPlayerName(playerid));
							PlayerAction(issuerid, string);
							SendClientMessage(issuerid, COLOR_WHITE, "Преступник временно оглушен, зажмите ALT для проведения ареста");
							if(GetPVarInt(playerid, "Police:Pursuit:Handsup"))	PursuitHandsupClear(playerid);
							GameTextForPlayer(playerid, "~r~Tazed", 3000, 3);
							ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0);
							BlockPlayerAnimation(playerid, true);
							PlayerCuffedTime[playerid] = 20;
						}
					}
				}
			}
		}
		else if(PlayerInfo[playerid][pFaction] == F_POLICE)
		{	// Напали на полицейского
			if(IsPlayerNPC(issuerid) == 0)
			{
				if(weaponid != 50 || bodypart != 3 || GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
				    if(InGangZone[issuerid] == -1)
				    {
						ToggleCriminalDanger(issuerid, true);
			        	CrimePlayer(issuerid, CRIME_COP_KILL);
		        	}
				}
			}
		}
		if(HEADSHOT && bodypart == 9)
		{
			MySetPlayerHealth(playerid, 0.0);
			GameTextForPlayer(playerid, "Head shot!", 3000, 4);
			GameTextForPlayer(issuerid, "Head shot!", 3000, 4);
		}
		//if(weaponid == 3) MyApplyAnimation(playerid, "PED", "GETUP_FRONT", 4.0, 0, 1, 1, 0, 0);
	}

	/*if(1 <= GetPlayerState(playerid) <= 3)
	{
	    new Float:health = MyGetPlayerHealth(playerid);
	    new Float:armour = MyGetPlayerArmour(playerid);
	    if(0 <= weaponid <= 15)
	    {
			new string[128], Float:effect;
	        if(armour)
	        {
	            switch(random(6))
	            {
	                case 0: effect = amount*Power[issuerid];
	                case 1,2,3: effect = amount*(Power[issuerid]/2);
	                case 4: effect = amount*(Power[issuerid]/3);
	                case 5:
	                {
	                    if(weaponid == 0)
	                    {
						    new Float:health2 = MyGetPlayerHealth(issuerid);
						    MySetPlayerHealth(issuerid, health2-2.0);
		                    SendClientMessage(issuerid, COLOR_GREY, "Вы повредили руку об броню");
	                    }
	                }
	            }
	        }
	        else effect = amount*Power[issuerid];
			MySetPlayerArmour(playerid, armour);
			MySetPlayerHealth(playerid, health-effect);
		    format(string, 128, "%s[%d] got %0.2f damage (h: %0.2f | %0.2f)",ReturnPlayerName(playerid),playerid, effect, health,health-effect);
		    MySendClientMessageToAll(COLOR_WHITE, string);
	    }
	    else
	    {
		    if(armour)
		    {
		        if(amount >= armour)
		        {
		            health = health - (amount - armour);
		            MySetPlayerArmour(playerid, 0.0);
		            MySetPlayerHealth(playerid, health);
		        }
		        else MySetPlayerArmour(playerid, armour-amount);
		    }
		    else MySetPlayerHealth(playerid, health-amount);
	    }
    }*/

    // Эффект повреждений
    if(amount > 4)
    {
		FadeColorForPlayer(playerid, 255, 0, 0, floatround(amount, floatround_ceil) * 10, 255, 0, 0, 0, floatround(amount, floatround_ceil));
    }
    return true;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(IsPlayerNPC(playerid))
	{
		return true;
	}
	GivePlayerDamage(damagedid, amount);
	if(22 <= weaponid <= 34)
	{
		PlayerPlaySound(playerid, 6401, 0.0, 0.0, 0.0);
	}
	return true;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    /*if(ANTICHEAT)
	{
		new string[128];

		if(VehInfo[vehicleid][vPlayers] == 0 && IsPlayerInRangeOfPoint(playerid, 20.0, Arr3<oldpos>) == 0 && GetDistanceFromPointToPoint(new_x, new_y, new_z, Arr3<oldpos>) > 10.0)
		{
			if(oldpos[2] > 0.0) MySetVehiclePos(vehicleid, Arr3<oldpos>);
			format(string, sizeof(string), "[AdmWrn]: %s[%d] подозревается в телепортации автомобилей (vehicleid = %d)", ReturnPlayerName(playerid), playerid, vehicleid);
			SendAdminMessage(COLOR_LIGHTRED, string);
			GiveAnticheatWarn(playerid, VEHICLE_TELEPORT);
			return false;
		}
	}*/
	if(VehInfo[vehicleid][vBlockMove] && GetDistanceFromPointToPoint(new_x, new_y, new_z, Arr3<VehInfo[vehicleid][vPos]>) > 1.0)
	{
		MySetVehiclePos(vehicleid, Arr4<VehInfo[vehicleid][vPos]>);
		return false;
	}
	// Рассинхрон авто для пассажира в АФК
	if(passenger_seat) return false; // [BT]
	return true;
}

Public: OnPlayerPauseStateChange(playerid, pausestate)
{
	#if defined _gang_gang_zones_included
		Gang.GZ_OnPlayerPause(playerid, pausestate);
	#endif

	new string[128];
	if(pausestate)
	{	//  Вошел в АФК
		OldSpeed[playerid] = 0;	//	fix аварии после выхода из афк

		StopPursuit(playerid, 3);
	}
	else
	{	
		if(gPlayerLogged[playerid])
		{
			//  Вышел с АФК
			new afk_time = GetPlayerAFKTime(playerid);
			format(string, sizeof(string), "Вы были в AFK {CFB53B}%02d:%02d.", afk_time / 60, afk_time % 60);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SetPlayerChatBubble(playerid, " ", COLOR_WHITE, 30.0, 1);
		}

		// Освобождение из тюрьмы
		if(0 < PlayerInfo[playerid][pJailTime] < gettime())
		{
			//JailDelivery(playerid);
		}

		//---	Spectate
		if(SpectateID[playerid] != INVALID_PLAYER_ID)
		{
			UpdatePlayerSpectate(playerid, SpectateID[playerid]);
			//Timer_UpdatePlayerSpectate(playerid, SpectateID[playerid]);
		}
	}
	return true;
}

TogglePlayerStreamerAllItem(playerid, toggle)
{
	if(toggle)
	{
		//	Включаем игроку элементы стримера
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, true);
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_RACE_CP, true);
	  	Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_AREA, true);
	  	Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, true);
	}
	else
	{
		//	Выключаем игроку элементы стримера
	  	Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_PICKUP, false);
	  	Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_RACE_CP, false);
	  	Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_AREA, false);
	  	Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_CP, false);
	}
	return true;
}

Public: PlayerEverySecondTimer(i)
{
 	if(gPlayerLogged[i] == false)
    {
    	if(LOGTIMEOUT && ++gLoggedTime[i] == MAX_LOGGED_TIME)
    	{
    		SendClientMessage(i, COLOR_SERVER, "Превышен таймаут авторизации, вы были кикнуты.");
    		KickEx(i);
    	}
    	return true;
    }
    // Only for Logged Players

    //	--- vars
    new string[128];
    new hour, minute, second;
	new timeUNIX = gettime(hour, minute, second);
	new vehicleid = GetPlayerVehicleID(i),
		inter = GetPlayerInterior(i),
		vw = GetPlayerVirtualWorld(i),
		pState = GetPlayerState(i),
		targetid = GetPlayerTargetPlayer(i),
		targetactor = GetPlayerTargetActor(i),
		money = MyGetPlayerMoney(i),
		Float:X, Float:Y, Float:Z, Float:A,
		biz = GetBizWhichPlayer(i);
    if(vehicleid == 0)	MyGetPlayerPos(i, X, Y, Z, A);
    else				MyGetVehiclePos(vehicleid, X, Y, Z, A);
	new Float:pHealth = MyGetPlayerHealth(i);
	new Float:Dist = floatsqroot(floatpower(X - PlayerInfo[i][pPosX], 2) + floatpower(Y - PlayerInfo[i][pPosY], 2) + floatpower(Z - PlayerInfo[i][pPosZ], 2));

	//---	Protection Dialogs
	if(Dialogid[i] != INVALID_DIALOGID && DialogTimeleft[i] > 0 && --DialogTimeleft[i] == 0)
	{
		GameTextForPlayer(i, "~r~Dialog canceled", 3000, 4);
		DialogTimeleft[i] = INVALID_DATA;
		CallLocalFunction("OnDialogResponse", "iiiis", i, Dialogid[i], 0, 0, " ");
		if(DialogTimeleft[i] == INVALID_DATA)	MyHidePlayerDialog(i);	//	если в OnDialogResponse не показало нового диалога, закрываем текущий
	}
	//	--- Counters
	if(p_PrisonTimer{i})					SetPlayerVisualTimer(i, PrisonStatusTime, false);	//	Update Prison Timer
	if(EffectCheck{i} > 0)					EffectCheck{i}--;									//  Effect
	if(gPickupTime[i] > 0)					gPickupTime[i]--;									// Счетчик обновления возможности входа/выхода
	if(AskTime[i] > 0 && --AskTime[i] == 0)	OnPlayerYNStateChange(i, AskWhat[i], false);		// Автоматический отказ по истечении времени предложения
	if(p_ShootingCountdown{i} > 0 && --p_ShootingCountdown{i} == 0)	StartPlayerTirShooting(i);	//	начало стрельбы в тире
	if(PlayerInfo[i][pMuteTime] > 0 && --PlayerInfo[i][pMuteTime] <= 0)	// Счетчик молчанки
	{
	    PlayerInfo[i][pMuteTime] = 0;
	    SendClientMessage(i, COLOR_WHITE, "Время молчанки закончилось, вы снова можете говорить");
	}
	if(gExpTime[i] > 0 && --gExpTime[i] == 0)	// Система выдачи опыта через время
	{
	    if(gExpCount[i] > 0.5)	GivePlayerEXP(i, floatround(gExpCount[i]));
	    gExpCount[i] = 0.0, gExpTime[i] = 0;
	}
	if(PlayerCuffedTime[i] > 0)
	{
	    if(--PlayerCuffedTime[i] <= 0)
	    {
	    	BlockPlayerAnimation(i, false);
			ClearAnimations(i);
	        PlayerCuffedTime[i] = 0;
	    }
	}
	if(GetPVarInt(i, "Player:Attack:Attacker"))
	{
		if(GetTickCount() > GetPVarInt(i, "Player:Attack:GTC") + (5 * 60 * 1000))
		{
			DeletePVar(i, "Player:Attack:Attacker");
			foreach(LoginPlayer, j)
			{
				if(PlayerInfo[j][pFaction] != F_POLICE)
				{
					MySetPlayerMarkerForPlayer(j, i, GetPlayerColor(i));
				}
			}
		}
	}

	//---	Missions
	if(mission_id[i] == MIS_START_WORK)
	{
		if(money < 300)
		{
			format(string, sizeof(string), "Заработайте на права. Выполнено ~g~%d/300$", MyGetPlayerMoney(i));
			ShowMissionInfo(i, string);
		}
		else
		{
			StoryMissionComplete(i, MIS_SOURCE_TRAINING, 0, 0);
			StoryMissionStart(i, MIS_SOURCE_TRAINING);
		}
	}

	//---	Перезарядка угона авто для угонщиков
	#if defined	_job_job_theft_included	
		if(PlayerInfo[i][pTheftTime] != 0 && PlayerInfo[i][pTheftTime] + THEFT_RELOAD_TIME < timeUNIX)
		{
			PlayerInfo[i][pTheftTime] = 0;
			if(Job.GetPlayerJob(i) == JOB_THEFT) ShowPlayerHint(i, "Вы снова можете доставлять угнанные авто в гараж!");
		}
	#endif	

	#if defined _police_pursuit_included
		UpdateIconReinforce(i);
	#endif

	//	---
	if(PLAYER_STATE_ONFOOT <= pState <= PLAYER_STATE_PASSENGER)
	{
		#if defined _player_phone_included	
			Phone_CallTimer(i);
		#endif
		#if defined	_job_job_taxi_included
			Taxi_PlayerEverySecondTimer(i, Dist);
		#endif

		// Обновление позиции игрока
        if(PlayerBusy{i} == false && X != 0.0 && Y != 0.0)
        {
        	if(vehicleid == 0 || (VehInfo[vehicleid][vModelType] != MTYPE_BOAT && VehInfo[vehicleid][vModelType] != MTYPE_HELIC && VehInfo[vehicleid][vModelType] != MTYPE_PLANE))
	        {
	        	PlayerInfo[i][pPosX] = X;
		        PlayerInfo[i][pPosY] = Y;
		        PlayerInfo[i][pPosZ] = Z;
		        PlayerInfo[i][pPosA] = A;
			    PlayerInfo[i][pPosINT] = inter;
			    PlayerInfo[i][pPosVW] = vw;
	        }
	    }
        IFace.HealthUpdate(i, pHealth);
		if(second % 5 == 0)	
		{
			UpdatePlayerZone(i);
			UpdatePlayerGPSZone(i);		// GPS навигатор
		}

		if(0 < PlayerInfo[i][pAJailTime] < gettime())
		{
			SetPlayerSpawn(i);
			MySpawnPlayer(i);
		}

		//	AFK
		if(IsPlayerAFK(i))
		{
			new afk_time = GetPlayerAFKTime(i);
			format(string, sizeof(string), "В AFK {CFB53B}(%02d:%02d)", afk_time / 60, afk_time % 60);
			SetPlayerChatBubble(i, string, COLOR_WHITE, 30.0, 2000);
		}
		//---	OnPlayerAimVehicle
        new VehicleTarget = GetPlayerCameraTargetVehicle(i);
		if(VehicleTarget != gTargetVehicle[i])
		{
			gTargetVehicle[i] = VehicleTarget;
			if(gTargetVehicle[i] != INVALID_VEHICLE_ID && gPressedKeyAIM[i])
			{
				OnPlayerAimVehicle(i, gTargetVehicle[i]);
			}
		}

		//	hint
		if(GetPVarInt(i, "Player:HintPressH"))
		{
			if(targetid == INVALID_PLAYER_ID && targetactor == INVALID_ACTOR_ID)
			{
				if(GetPVarType(i, "Player:InAmmoZone") == PLAYER_VARTYPE_NONE)
				{
					TextDrawHideForPlayer(i, TD_PressH);
				}
				DeletePVar(i, "Player:HintPressH");
			}
		}
		else if(!(22 <= GetPlayerWeapon(i) <= 33))
		{
			if(targetid != INVALID_PLAYER_ID)
			{
				TextDrawShowForPlayer(i, TD_PressH);
				SetPVarInt(i, "Player:HintPressH", 1);
			}
			else if(targetactor != INVALID_ACTOR_ID)
			{
				new bool:find = false;
				for(new a = 0; a < sizeof(ACTOR); a++)
				{
					if(ACTOR[a] == targetactor)
					{
						find = true;
						if(ActorInfo[a][a_Hint])
						{
							TextDrawShowForPlayer(i, TD_PressH);
							SetPVarInt(i, "Player:HintPressH", 1);
						}
						break;
					}
				}
				if(!find)
				{
					TextDrawShowForPlayer(i, TD_PressH);
					SetPVarInt(i, "Player:HintPressH", 1);
				}
			}
		}
		//---	Бонус на площади (в честь открытия)
		//if(IsPlayerInSquare(i, 1706.45, -1926.98, 1726.52, -1907.03))
		//{
		//    if(second % 15 == 0) MyGivePlayerMoney(i, 1);	// 3600 / 15 = 240$/час
		//}
		//---	Hospital
		if(GetPVarType(i, "Player:Hospital:Berth") == PLAYER_VARTYPE_INT)
		{
			if(second % 3 == 0)
			{
			    if(GetPlayerSpeed(i) > 1.0)
			    {
					CancelPlayerBerth(i);
			    }
			    else
			    {
					new Float:health = MyGetPlayerHealth(i);
					if(health < 100.0)
					{
						MySetPlayerHealth(i, health + 1.0);
					}
					else
					{
						SendClientMessage(i, COLOR_GREEN, "Вы абсолютно здоровы!");
						CancelPlayerBerth(i);
					}
				}
			}
			GameTextForPlayer(i, "~w~HEALING~n~Press ~r~N~w~ to stop", 1200, 4);
		}
		//	Наркотики
		if(DrugsCrack[i])
		{
			if(IsPlayerInAnyVehicle(i)) RemovePlayerFromVehicle(i);
			else 						MyApplyAnimation(i, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
		}
		if(UseDrugsTime[i] > 0)
		{
		    if(--UseDrugsTime[i] <= 120)
		    {
		        if(DrugsCrack[i])
		        {
		            DrugsCrack[i] = false;
		            ClearAnimations(i);
		        }
		        if(!UseDrugsTime[i])	UpdatePlayerWeather(i);
		    }
		}
		//---   Robbery
		if(robbery_biz[i] == (-1))
		{
			if(biz != INVALID_DATA && targetactor == BizInfo[biz][bActor] && 22 <= GetPlayerWeapon(i) <= 33 && IsGang(PlayerInfo[i][pFaction]))
			{
				RobberyStart(i);
			}
		}
		else if(robbery_step[i] == 1)
		{
			if(robbery_money[i] > 0)
			{
				format(string, sizeof(string), "Доставьте деньги до дома банды: %d$", robbery_money[i]);
				SendMissionMessage(i, string, 1300);
			}
			else	RobberyFinish(i, 1, false);
		}
		//---   box
        if(gPlayerRing[i] != (-1))
		{
			if(GetDistanceFromMeToPoint(i, Arr3<BoxingRingPos[ gPlayerRing[i] ][RING_POS]>) > 4.0)
			{
				new lr = GetPVarInt(i, "LeaveRing");
				if(lr == 10)
				{
					FinishBox(i, 0);
					DeletePVar(i, "LeaveRing");
				}
				else
				{
					SetPVarInt(i, "LeaveRing", lr + 1);
					format(string, sizeof(string), "~n~~r~%d sec~n~~w~Вернитесь на ринг!", 10 - lr);
					GameTextForPlayer(i, RusText(string, isRus(i)), 1000, 4);
				}
			}
			else if(GetPVarInt(i, "LeaveRing") > 0)
			{
				DeletePVar(i, "LeaveRing");
			}
		}
        //	---
        if(PlayerCuffedTime[i] > 0)
        {
			new animlib[32],  animname[32];
	        GetAnimationName(GetPlayerAnimationIndex(i), animlib, 32, animname, 32);
	        if(!strcheck(animlib, "CRACK") && !strcheck(animname, "crckdeth4"))
	        {
	        	ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0);
	        	//format(string, sizeof(string), "[AdmWrn]: %s[%d] оказался без анимации во время оглушения", ReturnPlayerName(i), i);
				//SendAdminMessage(COLOR_LIGHTRED, string);
	        }
		}
        //	---	hunger
    	if(second % 40 == 0)
    	{
			if(PlayerInfo[i][pHunger] > 0)
            {
            	PlayerInfo[i][pHunger]--;
            	IFace.HungerUpdate(i);
            }
            else if(IsPlayerAFK(i) == false)
			{
				pHealth -= 1.0;
				MySetPlayerHealth(i, pHealth);
			}
    	}
    	if(pHealth < 100 && second % 15 == 0)
    	{
    		if(PlayerInfo[i][pHunger] > 80)
    		{
    			pHealth += 1.0;
				MySetPlayerHealth(i, pHealth);
    		}
    	}
		//	---	achievements
	#if defined _player_achieve_included	
		if(GetPlayerDistanceFromPoint(i, -2300.22, -1649.94, 483.5) < 50.0)
		{
			GivePlayerAchieve(i, ACHIEVE_RESEARCHER);	//	Достижение 'Исследователь'
		}
	#endif
		if(BB_Time > 0)
		{
			new Float:pos[3];
			GetVehiclePos(BB_Car, Arr3<pos>);
			if(GetPlayerDistanceFromPoint(i, Arr3<pos>) < 30.0)
			{
			#if defined _player_achieve_included	
				GivePlayerAchieve(i, ACHIEVE_WALTER);	//	Достижение 'Синий мет'
			#endif
				if(BB_Time > 2)	BB_Time = 2;            //  Если игрок нашел Уолтера, Уолтер сваливает через 2 минуты
			}
		}
		//	--- drink
		if(pState == PLAYER_STATE_ONFOOT && GetPlayerDrunkLevel(i) && ++PlayerDrunkTime{i} == 8)
		{
			if(GetPlayerDrunkLevel(i) > 25000)
			{
				if(random(10) == 0)					MyApplyAnimation(i, "FOOD","EAT_Vomit_P", 4.0, 0, 1, 0, 0, 0);
				else 								MyApplyAnimation(i, "PED", "WALK_DRUNK", 4.0, 0, 1, 0, 0, 0);
			}
			else if(GetPlayerDrunkLevel(i) > 15000)	MyApplyAnimation(i, "PED", "WALK_DRUNK", 4.0, 0, 1, 0, 0, 0);
			PlayerDrunkTime{i} = 0;
		}
		//	--- car break check
		//if(GetPlayerComb(i) == COMB_THEFT_AUTO)
		//{   // Взлом замка через код
			//new keys, ud, lr;
		    //GetPlayerKeys(i, keys, ud, lr);
		    //if(ud || lr || (keys && keys != KEY_ANALOG_LEFT && keys != KEY_ANALOG_RIGHT && keys != KEY_WALK))
		    //{	//  если нажал какую то левую кнопку отменять взлом
			//	clearHackCar(i);
		    //}
			//else 
		//	if(VehInfo[ GetPVarInt(i, "LastLockCar") ][vLocked] == 0)
		//	{
		//		GameTextForPlayer(i, "~w~Vehicle already ~g~open", 3000, 4);
		//		clearHackCar(i);
		//	}
		//}
	    // Прыжки с вертолета Cargobob
	    if(GetPlayerInterior(i) == 9 && GetVehicleModel(vw) == 548 && Z < 1925.0)
	    {
			new Float:anX, Float:anY, Float:anZ, Float:anA;
			MyGetVehiclePos(vw, anX, anY, anZ, anA);
			anX += (6.0 * floatsin(-anA + 180.0, degrees));
			anY += (6.0 * floatcos(-anA + 180.0, degrees));

			MyClearPlayerWeaponSlot(i, 11);
	        SetTimerEx("MyGivePlayerParachute", 1000, false, "i", i);

	        MySetPlayerPos(i, anX, anY, anZ);
	        SetPlayerVirtualWorld(i, 0);
	        SetPlayerInterior(i, 0);
	        PlayerBusy{i} = false;
	    }
	    //---	fix furniture
		if(GetPVarType(i, "Fur:HouseID") != PLAYER_VARTYPE_NONE)
		{
			new h = GetPVarInt(i, "Fur:HouseID");
			new Class = HouseInfo[h][hClass] - 1,
        		Int = HouseInfo[h][hInt] - 1;
			if(IsPlayerInRangeOfPoint(i, 50.0, Arr3<InterCoords[Class][Int]>) == 0)
			{
				MySetPlayerPos(i, Arr3<InterCoords[Class][Int]>, InterCoords[Class][Int][3] + 180.0);
				CancelEditHomeObject(i);
			}
		}
		// Преследование пешком (нельзя использовать return)
	#if defined _police_pursuit_included
		if(PlayerInfo[i][pFaction] == F_POLICE && 22 <= GetPlayerWeapon(i) <= 33)
		{
			if(targetid != INVALID_PLAYER_ID)
			{
				StartPursuit(i, targetid);
			}
		}
	#endif		
		//---	Тир
		if(p_isShooting{i})
		{
			new weapon, ammo;
			GetPlayerWeaponData(i, 2, weapon, ammo);
			if(weapon != 22 || ammo == 0)	FinishPlayerShooting(i, true);
		}
		//---	Проверка заключенных в тюрьме
		if(PlayerInfo[i][pJailTime] > 0)
		{
		    if(second % 3 == 2 && !IsPlayerAFK(i))
		    {
				if(!IsPlayerInRangeOfPoint(i, 350.0, 570.2847, -2772.5239, 33.7913)		//	территория тюрьмы
				&& !(VW_JAIL <= GetPlayerVirtualWorld(i) < VW_JAIL + 1000))				//	интерьеры тюрьмы
				{
				    PlayerInfo[i][pJailTime] = 0;
					Iter_Remove(Prisoners, i);
					JailJobClear(i);
					UpdatePlayerSkin(i);
					DeleteJailNumber(i);
					PlayerTextDrawHide(i, p_JailPeriod);
					HidePlayerPrisonTime(i);
				    CrimePlayer(i, CRIME_RUNAWAY);
				    GameTextForPlayer(i, "~r~!!!WARNING!!!~n~~w~You are wanted", 5000, 4);
				}
		    }
		    if(IsPlayerSwiming(i))	MySetPlayerHealth(i, pHealth - 4.0);
		}
		else if(PlayerInfo[i][pJailTime] == 0)
		{
		    if(PlayerInfo[i][pFaction] != F_POLICE && IsPlayerInSquare(i, 440.2, -3035.7, 826.3, -2565.9) && GetPlayerWantedLevel(i) < 8)
		    {
				if(InJailTimer[i] > 0)
				{
					if(--InJailTimer[i] == 0)
					{
						CrimePlayer(i, CRIME_IN_JAIL);
					}
					else
					{
					    format(string, sizeof(string), "~r~WARNING!~n~~r~%d sec~n~~w~Leave the prison!", InJailTimer[i]);
						GameTextForPlayer(i, string, 2000, 4);
					}
				}
				else
				{
			        InJailTimer[i] = 20;
					SendClientMessage(i, COLOR_WHITE, PREFIX_HINT "Это закрытая территория тюрьмы! Покиньте ее или вас объявят в розыск!");
				}
			}
			else if(InJailTimer[i] > 0)
			{
			    InJailTimer[i] = 0;
			    GameTextForPlayer(i, "~g~allright", 3000, 4);
			}
		}
		// Система заключения
		if(JailTime[i]-- > 0)
		{
		    if(second % 5 == 0 && IsPlayerInJail(i) == 0)
		    {
				SetPlayerInterior(i, 6);
				MySetPlayerPos(i, 264.6288, 77.5742, 1001.0391, 270.0);
				format(string, 128, "[AdmWrn]: %s[%d] попытался сбежать из камеры предв.заключения", ReturnPlayerName(i), i);
				SendAdminMessage(COLOR_LIGHTRED, string);
		    }
		    if(JailTime[i] == 55)	ShowDialog(i, DMODE_LAWYER);
		    else if(JailTime[i] <= 0)
		    {
		    	if(Dialogid[i] == DMODE_LAWYER)	MyHidePlayerDialog(i);
		        new wantedlvl = -PlayerInfo[i][pJailTime];
		        GameTextForPlayer(i, "_", 1000, 4);
		        switch(wantedlvl)
		        {
		            case 0:
		            {
				        PlayerInfo[i][pJailTime] = 0;
		                MySetPlayerPos(i, 244.2467, 70.0835, 1003.6406, 180.0);
		                SendClientMessage(i, COLOR_GREEN, "Суд признал вас невиновным, вы свободны");
		                PlayerPlaySound(i, 36201, 0.0, 0.0, 0.0);
		            }
		            case 1..3:
		            {
		                new price = wantedlvl * FINE_PER_WANTED;
		                MySetPlayerPos(i, 244.2467, 70.0835, 1003.6406, 180.0);
		                SendFormatMessage(i, COLOR_DBLUE, string, "Суд признал вас виновным и снял с вас штраф в размере $%d", price);
				        PlayerInfo[i][pJailTime] = 0;
		                MyGivePlayerMoney(i, -price);
		                if(PlayerInfo[i][pLaw] > (-50))
		                {
		                	if(PlayerInfo[i][pLaw] - wantedlvl < (-50))
						        wantedlvl = 50 - PlayerInfo[i][pLaw];
							PlayerInfo[i][pLaw] -= wantedlvl;
		                	SendFormatMessage(i, COLOR_DBLUE, string, "У вас снизилась законопослушность: %d (-%d)", PlayerInfo[i][pLaw], wantedlvl);
		                }
		                PlayerPlaySound(i, 31202, 0.0, 0.0, 0.0);
		            }
		            case 4..9:
		            {
		                new stmp[512], days = wantedlvl - 3;
				        PlayerInfo[i][pJailTime] = timeUNIX + days * TIME_PER_WANTED * 60;
				        format(stmp, sizeof stmp, "{FFFFFF}Суд признал вас виновным и назначил {FF6347}%d{FFFFFF} минут в колонии{AA3333}\n\n\n", days * TIME_PER_WANTED);
						//if(PlayerInfo[i][pGunLic])
						//{
						//    PlayerInfo[i][pGunLic] = 0;
						//    format(stmp, sizeof stmp, "%s• У вас изъята лицензия на ношение оружия.\n\n", stmp);
						//}
						if(PlayerInfo[i][pLaw] > (-50))
						{
						    if(PlayerInfo[i][pLaw] - wantedlvl < (-50))
						        wantedlvl = 50 - PlayerInfo[i][pLaw];
							PlayerInfo[i][pLaw] -= wantedlvl;
							format(stmp, sizeof stmp, "%s• У вас снизилась законопослушность на -%d, всего: %d\n\n", stmp, wantedlvl, PlayerInfo[i][pLaw]);
						}
						format(stmp, sizeof(stmp), "%s• У вас изъято все оружие и патроны.", stmp);
						MyShowPlayerDialog(i, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Информация", stmp, "Закрыть");
						for(new w = 0; w < 13; w++)
						{
							gWeaponID[i][w] = 0;
							gWeaponAmmo[i][w] = 0;
						}
						MyResetPlayerWeapons(i);
						PrisonCycle(i, 0); // Отправка в колонию
		            }
		            default:
		            {
						JailDelivery(i);
						format(string, 128, "[AdmWrn]: Игрок %s[%d] освобожден из КПЗ из-за ошибки [wantedlvl: %d]", ReturnPlayerName(i), i, wantedlvl);
						SendAdminMessage(COLOR_LIGHTRED, string);
		            }
		        }
		    }
		    else
		    {
			    format(string, 128, "~r~%d ~w~sec", JailTime[i]);
			    GameTextForPlayer(i, string, 2000, 4);
		    }
		}
		//---
		if(pState == PLAYER_STATE_DRIVER)
		{
			// Проверка здоровья автомобиля
			if(burning_timer[i] == 0 && vehicleid == PlayerVehicle[i] && Z > 0.0)
			{
				new Float:vHealth;
				GetVehicleHealth(vehicleid, vHealth);
				if(IsVehicleWithEngine(vehicleid) && vHealth < 250.0)
				{
				    if(GetVehicleEngine(vehicleid)) StartEngine(vehicleid, false);
					GameTextForPlayer(i, "~r~!!!FIRE FIRE FIRE!!!~n~~w~Hold ~y~~k~~VEHICLE_FIREWEAPON~", 1000, 4);
				}
			}

	        if(IsVehicleWithEngine(vehicleid) && Dist < 110.0)
	        {	// Счетчик пробега авто
	            PlayerInfo[i][pRunCar] += Dist * 0.001;

	        #if defined _player_achieve_included
	            if(PlayerInfo[i][pRunCar] >= 1000.0)
	            {
					GivePlayerAchieve(i, ACHIEVE_CARRIER);	//	Достижение 'Водила'
            	}
            #endif

	            CarInfo[vehicleid][cMileage] += Dist * 0.001;
	            if(GetVehicleEngine(vehicleid))
	            {	// Система расхода топлива
		            VehInfo[vehicleid][vFuel] -= CONSUM_FUEL * Dist * 0.001;
		            IFace.Veh_Update(i, 0);
				}
	        }
		}
		// Работа Водителем автобуса
	#if defined	_job_job_busdriver_included
		if(BusDriverStatus[i] > 0 && BusDriverLeave[i] > 0)
		{
		    if(--BusDriverLeave[i] <= 0)	Job.ClearPlayerNowWork(i, Job.REASON_TIMEOUT);
		    else
		    {
                format(string, sizeof(string), "Вернитесь в автобус! Осталось: ~r~%02d:%02d", BusDriverLeave[i]/60, BusDriverLeave[i]%60);
                SendMissionMessage(i, string, 0);
		    }
		}
	#endif
		// Работа Дальнобойщика
	#if defined	_job_job_trucker_included	
        if(TruckerStatus[i] > 1 && TruckerLeave[i] > 0)
        {
            if(--TruckerLeave[i] <= 0)		Job.ClearPlayerNowWork(i, Job.REASON_TIMEOUT);
            else
            {
                if(TruckerStatus[i] == 2)
                {	// Потерял тягач
                    format(string, sizeof(string), "Вы потеряли тягач! Осталось: ~r~%02d:%02d", TruckerLeave[i]/60, TruckerLeave[i]%60);
                    SendMissionMessage(i, string, 0);
                }
                else if(TruckerStatus[i] == 3)
                {	// Потерял прицеп
                    format(string, sizeof(string), "Вы потеряли прицеп! Осталось: ~r~%02d:%02d", TruckerLeave[i]/60, TruckerLeave[i]%60);
                    SendMissionMessage(i, string, 0);
                }
            }
        }
    #endif 
		if(MechanicStatus[i] == 1 && MechanicClientid[i] != INVALID_PLAYER_ID)
		{// Обновление позиции механика и клиента
		    new clientid = MechanicClientid[i];
		    DestroyDynamicMapIcon(MechanicMapIcon[i]), 			MechanicMapIcon[i]			=	INVALID_STREAMER_ID;
		    DestroyDynamicMapIcon(MechanicMapIcon[clientid]),	MechanicMapIcon[clientid]	=	INVALID_STREAMER_ID;
		    if(IsPlayerLogged(clientid) == 0)
		    {
		    	MechanicClientid[i] = INVALID_PLAYER_ID;
		    	SendClientMessage(i, COLOR_LIGHTRED, "Ваш клиент вышел с сервера, заказ отменен!");
		    	HideMissionMessage(i);
		    }
		    else if(MechanicStatus[i] < 2)
		    {
				if(GetDistanceBetweenPlayers(i, MechanicClientid[i]) > 10.0)
				{
				    new Float:ClientPos[3];
				    GetPlayerPos(clientid, Arr3<ClientPos>);
					MechanicMapIcon[i] = CreateDynamicMapIcon(Arr3<ClientPos>, 55, 0, -1, -1, i, 20000.0, MAPICON_GLOBAL);
					MechanicMapIcon[clientid] = CreateDynamicMapIcon(X, Y, Z, 55, 0, -1, -1, clientid, 20000.0, MAPICON_GLOBAL);
					Streamer_Update(i, STREAMER_TYPE_MAP_ICON);
					Streamer_Update(clientid, STREAMER_TYPE_MAP_ICON);
				}
				else
				{
				    SendMissionMessage(i, "~n~~n~~n~Вы добрались до клиента.");
				    MechanicClientid[i] = INVALID_PLAYER_ID;
					MechanicStatus[i] = 0;
				}
			}
		}
	}
	return true;
}

Public: EverySecondTimer()
{
	new string[128];
	new hour, minute, second;
	new timeUNIX = gettime(hour, minute, second);
	//new Float:pHealth;
	if(OldMinute != minute) EveryMinuteTimer();
	//  Время периодов в тюрьме
	if(--PrisonStatusTime == 0)
	{
		if(++LastPrisonStatus == 5)	LastPrisonStatus = 1;
		OnPrisonStatusChange(LastPrisonStatus);
	}
	// Полицейские миссии
	if(Iter_Count(Cop) > 0 && random(8 * 60 / Iter_Count(Cop)) == 0)//&& PoliceMission[sizeof(PoliceMission) - 1][pmNum] == 0)
	{
	    PoliceMissionCreate();
	}
	if((second % 2) == 0)	// Проверка срока
	{
	    for(new x; x < sizeof(PoliceMission); x++)
	        if(PoliceMission[x][pmUNIX] <= timeUNIX)
		        PoliceMissionRemove(x);
	}
    // Счетчик рестарта
	if(RestTime > 0)
	{
	    RestTime -= 1;
		IFace.UpdateRestartInfo(RestTime);
		switch(RestTime)
		{
		    case 0: { RestartServer(); }
			case 1..5, 15, 30, 45, 60:
			{
			    // Озвучка
			    if(RestTime == 5) 			foreach(Player, i) { PlayerPlaySound(i, 7416, 0.0, 0.0, 0.0); }
			    else if(1 <= RestTime <= 3) foreach(Player, i) { PlayerPlaySound(i, 7420 - RestTime, 0.0, 0.0, 0.0); }
	        }
	    }
	}
	// Счетчик нарко в притоне
	if(second % 3 == 0 && DrugStore < 1000)
	{
	    DrugStore += 1;
	    format(string, sizeof(string), "Наркотиков\n{FFFFFF}%d грамм", DrugStore);
	    UpdateDynamic3DTextLabelText(Drug3DText, 0xFFFF00FF, string);
	}

	// Трейлеры работы дальнобойщиков
	#if defined	_job_job_trucker_included
		Trucker_TrailersTimer();
	#endif
	#if defined	_job_job_taxi_included
		Taxi_EverySecondTimer();
	#endif

	//	Ожидание механика
	if(MechanicCall != -1 && MechanicCallTime > 0)
	{
		if(--MechanicCallTime <= 0)
		{
		    SendMissionMessage(MechanicCall, "~n~~n~~n~~r~Не поступило ответа, попробуйте позже.");
		    MechanicCall = -1; MechanicCallTime = 0;
		}
		else
		{
		    format(string, 128, "~n~~n~~n~Вы вызвали механика, ожидайте: ~y~%d сек", MechanicCallTime);
		    SendMissionMessage(MechanicCall, string, 0);
		}
	}
	//Объявления
	if(gAdvertTime > 0) gAdvertTime--;
	for(new i = 0; i < MAX_ADVERT_COUNT; i++)
	{
		if(gAdvert[i][adTime] > 0)	gAdvert[i][adTime]--;
		else if(gAdvert[i][adStatus] == 0)
		{
			strdel(gAdvert[i][adSender], 0, 24);
			strdel(gAdvert[i][adText], 0, 100);
			strdel(gAdvert[i][adCheker], 0, 24);
			gAdvert[i][adPhone] = 0;
			gAdvert[i][adBusy] = false;
			gAdvert[i][adStatus] = 0;
			gAdvert[i][adTime] = 0;
			gAdvertCount--;
		}
		else if(gAdvert[i][adStatus] == 2)
		{
			new checkerid;
			SendFormatMessageToAll(COLOR_AD, string, "%s | Отправитель: %s (тел: %d)", gAdvert[i][adText], gAdvert[i][adSender], gAdvert[i][adPhone]);
			if(gAdvert[i][adEdit])	format(string, 128, "  Объявление отредактировал:");
			else 					format(string, 128, "  Объявление проверил:");
			if(sscanf(gAdvert[i][adCheker], "r", checkerid))	format(string, 128, "%s %s %s", string, gAdvert[i][adRang], gAdvert[i][adCheker]);
			else 												format(string, 128, "%s %s %s [%d]", string, gAdvert[i][adRang], gAdvert[i][adCheker], checkerid);
			SendClientMessageToAll(COLOR_GREEN, string);
			strdel(gAdvert[i][adSender], 0, 24);
			strdel(gAdvert[i][adText], 0, 100);
			strdel(gAdvert[i][adCheker], 0, 24);
			gAdvert[i][adPhone] = 0;
			gAdvert[i][adBusy] = false;
			gAdvert[i][adStatus] = 0;
			gAdvert[i][adTime] = 0;
			gAdvert[i][adEdit] = false;
			gAdvertCount--;
		}
	}
	//	Боксерские поединки
	for(new i = 0; i < sizeof(BoxingRing); i++)
	{
		if(BoxingRing[i][RING_TIME] > 0)
		{
			BoxingRing[i][RING_TIME]--;
			if(BoxingRing[i][RING_STATE] == 1)
			{
				if(0 < BoxingRing[i][RING_TIME] <= 3)
				{
					format(string, 32, "~n~~n~~n~~n~~r~%d", BoxingRing[i][RING_TIME]);
					GameTextForPlayer(BoxingRing[i][RING_RED_PLAYER], string, 1000, 6);
					GameTextForPlayer(BoxingRing[i][RING_BLUE_PLAYER], string, 1000, 6);
				}
				else if(BoxingRing[i][RING_TIME] == 0)
				{
					BoxingRing[i][RING_STATE] = 2;
					BoxingRing[i][RING_TIME] = 180;
					GameTextForPlayer(BoxingRing[i][RING_RED_PLAYER], "~n~~n~~n~~n~~g~FIGHT!", 2000, 6);
					GameTextForPlayer(BoxingRing[i][RING_BLUE_PLAYER], "~n~~n~~n~~n~~g~FIGHT!", 2000, 6);
					TogglePlayerControllable(BoxingRing[i][RING_RED_PLAYER], true);
					TogglePlayerControllable(BoxingRing[i][RING_BLUE_PLAYER], true);
					SetPlayerVisualTimer(BoxingRing[i][RING_RED_PLAYER], BoxingRing[i][RING_TIME], true);
					SetPlayerVisualTimer(BoxingRing[i][RING_BLUE_PLAYER], BoxingRing[i][RING_TIME], true);
					ShowAttackHealth(BoxingRing[i][RING_RED_PLAYER], BoxingRing[i][RING_BLUE_PLAYER]);
					ShowAttackHealth(BoxingRing[i][RING_BLUE_PLAYER], BoxingRing[i][RING_RED_PLAYER]);
				}
			}
			else if(BoxingRing[i][RING_STATE] == 2)
			{
				if(BoxingRing[i][RING_TIME] == 0){
					FinishBox(BoxingRing[i][RING_RED_PLAYER], 2);
				}
			}
		}
	}
	//	Ограничение ограблений магазинов
	for(new f = 1; f < sizeof(Faction); f++)
	{
		if(GangRobberyReload[f] > 0 && --GangRobberyReload[f] == 0)
			SendFactionMessage(f, COLOR_GREEN, "[Ограбления]: Ваша банда готова к новым ограблениям!");
	}
	// Пасхалки
	if(BB_Time > 0)
	{
		if(BB_Text == 0 && (second % 20) == 0 && (random(10) % 3) == 0)
		{
			BB_Text = random(10) + 1;
			BB_TextNum = 0;
		}
		else if(BB_Text && (second % 4) == 0)
		{
			new Float:pos[3];
			GetVehiclePos(BB_Car, Arr3<pos>);
	    	switch(BB_Text)
	    	{
	    		case 1:
	    		{
					SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Это мое личное пространство, и я не дам себя оскорблять, сучара!");
					BB_Text = 0;
	    		}
	    		case 2:
	    		{
	    			switch(BB_TextNum)
	    			{
	    				case 0:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Джесси, ты теперь миллионер, и до сих пор ноешь? Да в каком мире ты живешь?");
	    				case 1:
	    				{
	    					SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: В мире, где тех, кто реально горбатится, не трахают кулаком в жопу.");
	    					BB_Text = 0;
	    				}
	    			}
	    		}
	    		case 3:
	    		{
	    			switch(BB_TextNum)
	    			{
	    				case 0:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: У меня планы.");
	    				case 1:
	    				{
	    					SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Курить марихуану, жрать «Читос» и дрочить не подходит под определение «планы».");
	    					BB_Text = 0;
	    				}
	    			}
	    		}
	    		case 4:
	    		{
	    			switch(BB_TextNum)
	    			{
	    				case 0:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Идти можешь?");
	    				case 1:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Да.");
	    				case 2:
	    				{
	    					SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Так иди отсюда нахер и никогда не возвращайся.");
	    					BB_Text = 0;
	    				}
	    			}
	    		}
	    		case 5:
	    		{
	    			switch(BB_TextNum)
	    			{
	    				case 0:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Ну такой... Как называется? Зелёный?");
	    				case 1:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Цвета шалфея.");
	    				case 2:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Цвета шалфея? Ты, что, блять, в мебельном работаешь? Боже!");
	    				case 3:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Цвет шалфея – так его называют. Я не виноват, что ты, тупица, знаешь только слово зеленый.");
	    				case 4:
	    				{
	    					SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Хуесырный. Такое слово я знаю, как тебе?");
	    					BB_Text = 0;
	    				}
	    			}
	    		}
	    		case 6:
	    		{
	    			switch(BB_TextNum)
	    			{
	    				case 0:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Ты полагаешь, что у меня разыгралось чувство собственничества по отношению к моей формуле?");
	    				case 1:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Или, возможно, чрезмерная гордость, как тебе кажется, просто захлестнула меня?");
	    				case 2:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Разве не так?");
	    				case 3:
	    				{
	    					SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Конечно же нет. Просто я уважаю химию. Химию надо уважать.");
	    					BB_Text = 0;
	    				}
	    			}
	    		}
	    		case 7:
	    		{
	    			SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Майк угрожал тебе. Майк угрожал мне. Наверняка, он угрожал кому-то сегодня перед завтраком — это же Майк!");
	    			BB_Text = 0;
	    		}
	    		case 8:
	    		{
	    			switch(BB_TextNum)
	    			{
	    				case 0:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Есть третий вариант: мы сами станем Туко.");
	    				case 1:
	    				{
	    					SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: То есть ты будешь занюхивать мет с ножа и избивать своих подчиненных?");
	    					BB_Text = 0;
	    				}
	    			}
	    		}
	    		case 9:
	    		{
	    			SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Ты приехал на метлаборатории в аэропорт?!");
	    			BB_Text = 0;
	    		}
	    		case 10:
	    		{
	    			switch(BB_TextNum)
	    			{
	    				case 0:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Там километрах в четырех здоровый такой коровятник, но людей я не видел.");
	    				case 1:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Коровятник?!");
	    				case 2:	SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Jessie: Ага. Ну где они живут, коровы. Да забей, братан! Ну чё, блин, варим здесь?");
	    				case 3:
	    				{
	    					SendRadiusMessageEx(Arr3<pos>, 20.0, 0xC8C8C8C8, "- Walter: Коровятник. Господи, помоги…");
	    					BB_Text = 0;
	    				}
	    			}
	    		}
	    		default:	BB_Text = 0;
	    	}
	    	BB_TextNum++;
		}
	}

	// Цикл на транспорт (EverySecondTimer())
	foreach(Vehicle, v)
	{
		//	Custom система спавна
		if(VehInfo[v][vRespawnTime] && --VehInfo[v][vRespawnTime] == 0)
	    {
			MySetVehicleToRespawn(v);
	    }
	    //---	rent
	    if(VehInfo[v][vRentTime] && --VehInfo[v][vRentTime] == 0)
	    {
    		new owner = GetPlayeridToUserID(VehInfo[v][vRentOwner]);
	    	if(owner == INVALID_PLAYER_ID)
	    	{
	    		MySetVehicleToRespawn(v);
	    	}
	    	else
	    	{
	    		TogglePlayerControllable(owner, false);
	    		ShowDialog(owner, DMODE_EXTEND_RENTCAR);
	    	}
	    }
	    //---
	    if(second % 30 == 0)
	    {
	    	if(CarInfo[v][cType] == C_TYPE_JOB && CarInfo[v][cOwnerID] == JOB_MECHANIC)
			{
				UpdateVehicleLabel(v);
			}
	    }
		if((second % 5) == 0)
		{
            // Система расхода топлива
            if(IsVehicleWithEngine(v))
            {
				if(GetVehicleEngine(v))
				{
				    VehInfo[v][vFuel] -= CONSUM_ENGINE * 5;
				    if(VehInfo[v][vFuel] <= 0)
					{
				        VehInfo[v][vFuel] = 0;
						StartEngine(v, false);
				    }
				}
			}
		}
		if(VehInfo[v][vAlarm])	// сигнализация
		{
		    if(VehInfo[v][vAlarm] > 0)
		    {
				if(--VehInfo[v][vAlarm] == 0)	setVehicleAlarm(v, false);
				else
				{
					VehInfo[v][vAlarmLight] = !VehInfo[v][vAlarmLight];
					UpdateVehicleParamsEx(v);
				}
		    }
		}
		if(VehInfo[v][vTrailerID] != GetVehicleTrailer(v))
		{
		    if(VehInfo[v][vTrailerID] == 0)
			{
				VehInfo[v][vTrailerID] = GetVehicleTrailer(v);
				CallLocalFunction("OnVehicleAttachTrailer", "dd", v, VehInfo[v][vTrailerID]);
			}
		    else
			{
				CallLocalFunction("OnVehicleDetachTrailer", "dd", v, VehInfo[v][vTrailerID]);
				VehInfo[v][vTrailerID] = GetVehicleTrailer(v);
			}
		}
	}

	// Цикл на наблюдателей
	foreach(Spectators, s)
	{
		Interface_SpecPanel_Update(s, SpectateID[s]);
	}
	return true;
}// end of EverySecondTimer

CreateVanWalter()
{
	if(BB_Car)	DestroyVanWalter();
	new pos = random(sizeof(BreakingBad));
	BB_Car = MyCreateVehicle(508, Arr4<BreakingBad[pos]>, 1, 1);
	VehInfo[BB_Car][vLocked] = 999;
	UpdateVehicleParamsEx(BB_Car);
	BB_Object = CreateDynamicObject(18748, Arr3<BreakingBad[pos]>, 0.0, 0.0, 0.0);
	AttachDynamicObjectToVehicle(BB_Object, BB_Car, 0.0, -1.0, 0.5, 0.0, 0.0, 0.0);
	BB_MapIcon = CreateDynamicMapIcon(Arr3<BreakingBad[pos]>, 23, -1, -1, -1, -1, 40.0);
	BB_Time = 5 + random(10);
	//SendAdminMessage(COLOR_ADMIN, "Уолтер приехал в пустыню.", ADMIN_DEVELOPER);
	return true;
}

DestroyVanWalter()
{
	if(!BB_Car) return false;
	MyDestroyVehicle(BB_Car),			BB_Car = 0;
	DestroyDynamicObject(BB_Object), 	BB_Object = INVALID_STREAMER_ID;
	DestroyDynamicMapIcon(BB_MapIcon), 	BB_MapIcon = INVALID_STREAMER_ID;
	BB_Time = 0, BB_Text = 0;
	//SendAdminMessage(COLOR_ADMIN, "Уолтер уехал из пустыни.", ADMIN_DEVELOPER);
	return true;
}

EveryMinuteTimer()
{
	//new string[128],
	new	hour, minute, second,
		timeUNIX = gettime(hour, minute, second);
	OldMinute = minute;
	if(OldHour != hour) 	EveryHourTimer();
    if(minute % 15 == 0)	UpdateWeather();	// Обновление погоды

	//	Движение крана на товарном складе
	if(minute % 2 == 0)
	{
		if(CranePos)	MoveDynamicObject(Crane, 2197.18, -2325.039, 27.53, 0.7);
		else 			MoveDynamicObject(Crane, 2216.68, -2305.539, 27.53, 0.7);
		CranePos = !CranePos;
	}

	//	Пасхалка: фургон из Во все тяжкие
	if(BB_Time > 0 && --BB_Time <= 0)		DestroyVanWalter();
	else if(minute % 5 == 0 && random(2))	CreateVanWalter();

    // Ночной авторестарт
    if(hour == 3 && minute == 45)
    {
        RestartServer(30 * 60);
    }

    // Автопоявление трейлеров (для работы дальнобойщиков)
    #if defined	_job_job_trucker_included
   		Trucker_UpdateTrailers();
   	#endif

    // Цикл по игрокам
	foreach(LoginPlayer, i)
	{
	    if(++PlayerInfo[i][pGametime] > 60)	PlayerInfo[i][pGametime] = 60;
	    if(Job.GetPlayerContract(i))		Job.SetPlayerContract(i, Job.GetPlayerContract(i) - 1);

	    // Сохранение аккаунта
		if(minute % 5 == 0)	UpdatePlayerStatics(i);
	    UpdatePlayerTime(i);
		// Освобождение из тюрьмы
		if(0 < PlayerInfo[i][pJailTime] < timeUNIX && IsPlayerAFK(i) == false)
		{
			if(gPlayerRing[i] == (-1))
			{
				JailDelivery(i);
			}
		}
		if(PlayerInfo[i][pVip])
		{
			if(PlayerInfo[i][pVipUNIX] <= unixtime())
			{
				PlayerInfo[i][pVip] = 0;
				PlayerInfo[i][pVipUNIX] = 0;
				SendClientMessage(i, COLOR_LIGHTGREEN, "Ваш премиум аккаунт закончился, для продления используйте меню.");
			}
		}
		// Система сброса розыска
		if(WantedTime[i] > 0)
		{
		    if(PursuitStatus[i] > PS_NONE)	WantedTime[i] = 20;
		    else if(--WantedTime[i] == 0 && GetPlayerWantedLevel(i) > 0)
		    {
		    	new bool:found;
		    	foreach(Cop, copid)
				{
					if(IsPlayerStreamedIn(copid, i))
					{
						found = true;
					}
				}
				if(!found)
				{
					ToggleCriminalDanger(i, false);
				    MySetPlayerWantedLevel(i, GetPlayerWantedLevel(i) - 1);
				    ShowPlayerHint(i, "Полиция забывает о вас~n~Розыск был понижен");
				}
		    }
		}
	}

	// Цикл по машинам
	if(minute + 1 % 5 == 0)
	{
		foreach(Vehicle, v)
		{
		    if(CarInfo[v][cID] > 0)
		    {
		    	UpdateVehicleStatics(v);
		    }
		}
	}

	// Отправка информационных сообщений
	if(minute % 10 == 0)
	{
	    for(new rand, i; i < 10; i++)
	    {
	        rand = random(sizeof(InfoText));
	        if(rand == lastinfotext)	continue;
	        foreach(LoginPlayer, p)		ShowPlayerHint(p, InfoText[rand], 15000);
			//SendFormatMessageToAll(COLOR_WHITE, string, PREFIX_HINT "%s", InfoText[rand]);
			lastinfotext = rand;
			break;
		}
	}

	// Мини миссии
	if((minute - 1) % 20 == 0)	StartRandomGame();
	return true;
}

EveryHourTimer() // PayDay()
{
	new string[128];
	static Float:oldbank, Float:proc, Float:tax, Float:wage, Float:benefit, exp, Float:salary;
	foreach(LoginPlayer, i)
	{
	    proc = 0.0; tax = 0.0; wage = 0.0; benefit = 0.0; exp = 0, salary = 0.0;

	    //	Деньги с территорий бандам
	    if(IsGang(PlayerInfo[i][pFaction]))
	    {
			new gangzones = getGangZoneCount(PlayerInfo[i][pFaction]);
	        GiveFactionMoney(PlayerInfo[i][pFaction], floatround(gangzones * GANGZONE_PROFIT * 0.1));
	        GivePlayerCrimeWage(i, gangzones * GANGZONE_PROFIT * 0.9);
	    }

		// Банковский процент
	    oldbank = PlayerInfo[i][pBank];
	    if(oldbank > 0)
		{
			proc = oldbank / 1000;
			if(PlayerInfo[i][pVip]) proc *= 2;
			GivePlayerBank(i, proc);
		}

	    SendClientMessage(i, COLOR_WHITE, "");
	    SendClientMessage(i, COLOR_WHITE, "");
	    SendClientMessage(i, COLOR_WHITE, "");
		SendClientMessage(i, COLOR_GREEN, "|___ Извещение из банка ___|");

		if(PlayerInfo[i][pFaction] > 0 && PlayerInfo[i][pRank] > 0)
		{
			if(FactionSalary[ PlayerInfo[i][pFaction] ][ PlayerInfo[i][pRank] - 1 ] > 0)
			{
				salary = float(FactionSalary[ PlayerInfo[i][pFaction] ][ PlayerInfo[i][pRank] - 1 ]) * ((PlayerInfo[i][pVip]) ? 1.25 : 1.0);
				if(PlayerInfo[i][pVip])	SendFormatMessage(i, COLOR_WHITE, string, "  Ставка: $%.2f {33AA33}(x1.25){FFFFFF}", salary);
				else 					SendFormatMessage(i, COLOR_WHITE, string, "  Ставка: $%.2f", salary);
			}
		}
		if(Job.GetPlayerWage(i))
		{
			wage += Job.GetPlayerWage(i) * ((PlayerInfo[i][pVip]) ? 1.25 : 1.0);
	   		tax += (salary + wage) / 10;	// Налог
	   		if(PlayerInfo[i][pVip])	SendFormatMessage(i, COLOR_WHITE, string, "  Зарплата: $%.2f {33AA33}(x1.25){FFFFFF}   Налог: {FF6347}$%.2f", wage, tax);
			else 					SendFormatMessage(i, COLOR_WHITE, string, "  Зарплата: $%.2f   Налог: {FF6347}$%.2f", wage, tax);
		}
		if(PlayerInfo[i][pFaction] == F_NONE && Job.GetPlayerJob(i) == JOB_NONE)
		{
			benefit += BENEFIT * ((PlayerInfo[i][pVip]) ? 1.25 : 1.0);
			if(PlayerInfo[i][pVip])	SendFormatMessage(i, COLOR_WHITE, string, "  Пособие по безработице: $%.2f {33AA33}(x1.25)", benefit);
			else 					SendFormatMessage(i, COLOR_WHITE, string, "  Пособие по безработице: $%.2f", benefit);
		}
		//---
		SendFormatMessage(i, COLOR_GRAD2, string, "  Начисления:     $%.2f (0.1%s)", proc, "%%");
	    //---	Выдача зарплаты
	    if(wage > 10000.0 || wage < 0.0)
	    {
	    	//	Безопасность
	    	wage = 0.0;
	    	format(string, sizeof(string), "[AdmWrn]: %s[%d] пришло в зарплату $%.2f [Работа: %d | Фракция: %d]", ReturnPlayerName(i), i, wage, Job.GetPlayerJob(i), PlayerInfo[i][pFaction]);
			SendAdminMessage(COLOR_LIGHTRED, string);
			printf("ERROR #113: Player %s got wage $%.2f [job: %d | faction: %d]", ReturnPlayerName(i), wage, Job.GetPlayerJob(i), PlayerInfo[i][pFaction]);
	    }
	    else
	    {
	    	GivePlayerBank(i, wage + benefit - tax);
	    }
		//---
		SendFormatMessage(i, COLOR_WHITE, string, "  Новый баланс: $%.2f %s($%.2f)", PlayerInfo[i][pBank], ((PlayerInfo[i][pBank] > oldbank) ? ("{33AA33}") : ("{FF6347}")), PlayerInfo[i][pBank] - oldbank);
		
		// Повышение законопослушности
		if(GetPlayerWantedLevel(i) == 0)
		{
			PlayerInfo[i][pLaw]++;
			if(PlayerInfo[i][pLaw] > 50) 			PlayerInfo[i][pLaw] = 50;
			else if(PlayerInfo[i][pLaw] < -50) 		PlayerInfo[i][pLaw] = -50;
			else
			{
				SendFormatMessage(i, COLOR_WHITE, string, "  Законопослушность: +1 (%d)\n", PlayerInfo[i][pLaw]);
			}
		}

		SendClientMessage(i, COLOR_GREEN, "|-----------------------------------------------|");

	#if defined _player_achieve_included
		if(Job.GetPlayerWage(i) > 0)
		{
			GivePlayerAchieve(i, ACHIEVE_PAYDAY);	//	Достижение 'Корманные деньги'
		}
	#endif
		
		// Сброс предупреждений в полиции
		if(PlayerInfo[i][pCopWarn] > 100)	PlayerInfo[i][pCopWarn] -= 100;
		else 								PlayerInfo[i][pCopWarn] = 0;

		// Выдача опыта
		exp = floatround(((PlayerInfo[i][pVip] ? 150 : 100) / 100) * (PlayerInfo[i][pGametime] / (60.0 / 100.0)));
		GivePlayerEXP(i, exp);
	
	    Job.SetPlayerWage(i, 0.0);	// Обнуление зарплаты
		PlayerInfo[i][pGametime] = 0;
		PlayerInfo[i][pTraining] = 0;

		PlayerPlaySound(i, 6400, 0.0, 0.0, 0.0);
		GameTextForPlayer(i, "~y~PayDay~n~~w~Paycheck", 5000, 1);
	}

	//---------	Списание средств с недвижимости, бизнесов, отелей ------------
	new message[128];
	//	Получаем дату последнего списания счетов
	mysql_format(g_SQL, string, sizeof(string), "SELECT payment_day FROM %s.servers WHERE id = '%d'", MAIN_DB, SERVER_ID);
	new Cache:result = mysql_query(g_SQL, string);
	new payment_day;
	cache_get_value_name_int(0, "payment_day", payment_day);
	cache_delete(result);

	new cur_day = gettime(OldHour, _, _) / 86400;	//	порядковый номер дня для сравнения
	if(payment_day < cur_day)	//	требуется списание
	{
	//	Проверка дней аренды
		//	Проверяем тех кто онлайн
		foreach(LoginPlayer, i)
		{
			if(PlayerInfo[i][pRent])
			{
				PlayerInfo[i][pPaymentDays]--;
				//	если арендуется жилье, а не отель
				if(PlayerInfo[i][pRent] > 0)
				{
					new h = FoundHouse(PlayerInfo[i][pRent]);
					if(h >= 0)
					{

						new owner = GetPlayeridToUserID(HouseInfo[h][hOwnerID]);
						if(owner == INVALID_PLAYER_ID)
						{
							//	переводим деньги через базу
							mysql_format(g_SQL, string, sizeof(string), "UPDATE `players` SET `bank` = `bank` + '%d' WHERE `id` = '%d'", HouseInfo[h][hRentPrice], HouseInfo[h][hOwnerID]);
							mysql_query_ex(string);
						}
						else
						{
							//	если в игре, переводим в банк в игре
							GivePlayerBank(owner, HouseInfo[h][hRentPrice]);
						}
					}
				}
				if(PlayerInfo[i][pPaymentDays] <= 0)
				{
					PlayerInfo[i][pRent] = 0;
					PlayerInfo[i][pPaymentDays] = 0;
					format(message, sizeof(message), "[Аренда]: Вы были выселены из арендуемого жилья за неуплату");
					SendClientMessage(i, COLOR_LIGHTRED, message);
				}
				else if(PlayerInfo[i][pPaymentDays] <= 3)
				{
					format(message, sizeof(message), "[Аренда]: У вас осталось %d предоплаченых дней аренды жилья", PlayerInfo[i][pPaymentDays]);
					SendClientMessage(i, COLOR_LIGHTRED, message);
				}
			}
		}

		//	Обновляем тех кто офлайн
		mysql_tquery(g_SQL, "SELECT `id`, `rent`, `payment_days` FROM `players` WHERE `rent` <> 0 AND `online` = -1", "PaymentPlayers", "");

		new owner, i;
	//	Обновляем дни оплаты домов
		for(new h = 0; h < MaxHouses; h++)
		{
			if(HouseInfo[h][hOwnerID] > 0)
			{
				HouseInfo[h][hPaymentDays]--;
				owner = HouseInfo[h][hOwnerID];
				i = GetPlayeridToUserID(owner);

				if(HouseInfo[h][hPaymentDays] < (-3))
				{
					//	Если долг больше 3 дней, продаем
					format(message, sizeof(message), "[Банк]: Ваш дом был продан государству за долги");
					SellHouse(h, false);
				}
				else if(HouseInfo[h][hPaymentDays] <= 0)
				{
					format(message, sizeof(message), "[Банк]: Оплатите ваш дом, иначе он будет продан за долги");
					SaveHouse(h);
				}
				else
				{
					SaveHouse(h);
					continue;
				}
				if(i == INVALID_PLAYER_ID)	SendOfflineMessage(owner, message);
				else 						SendClientMessage(i, COLOR_LIGHTRED, message);
			}
		}

	//	Обновляем дни оплаты бизнесов
		for(new b = 0; b < MaxBiz; b++)
		{
			if(BizInfo[b][bOwnerID] > 0)
			{
				BizInfo[b][bPaymentDays]--;
				owner = BizInfo[b][bOwnerID];
				i = GetPlayeridToUserID(owner);

				if(BizInfo[b][bPaymentDays] < (-3))
				{
					//	Если долг больше 3 дней, продаем
					format(message, sizeof(message), "[Банк]: Ваш бизнес был продан государству за долги");
					SellBiz(b, false);
				}
				else if(BizInfo[b][bPaymentDays] <= 0)
				{
					format(message, sizeof(message), "[Банк]: Оплатите ваш бизнес, иначе он будет продан за долги");
					SaveBiz(b);
				}
				else
				{
					SaveBiz(b);
					continue;
				}
				if(i == INVALID_PLAYER_ID)
					SendOfflineMessage(BizInfo[b][bOwnerID], message);
				else
					SendClientMessage(i, COLOR_LIGHTRED, message);
			}
		}

	//	Обновляем дату списания
		mysql_format(g_SQL, string, sizeof(string), "UPDATE %s.servers SET payment_day = '%d' WHERE id = '%d'", MAIN_DB, cur_day, SERVER_ID);
		mysql_query_ex(string);
	}

	/////////	Analytics of Online 	//////////
	format(string, sizeof(string), "INSERT INTO `analytics_online` SET `players` = '%d', `time` = UNIX_TIMESTAMP()", Iter_Count(LoginPlayer));
	mysql_query_ex(string);
	//////////////////////////////////////////////

	ReloadEmmetStore(); // Обновление товаров у Еммета
	//	автозапуск гонки
	if(GetSVarInt("Race:AutoStart:Timer"))	KillTimer(GetSVarInt("Race:AutoStart:Timer"));
	SetSVarInt("Race:AutoStart:Timer", SetTimer("AutoStartRace", (15 * 60 * 1000), false));
	return true;
}

Public: PaymentPlayers()
{
	new string[128], message[128];
	new id, rent, days;
	for(new i = 0; i < cache_num_rows(); i++)
	{
		cache_get_value_index_int(i, 0, id);
		cache_get_value_index_int(i, 1, rent);
		cache_get_value_index_int(i, 2, days);

		days--;

		//	если арендуется жилье, а не отель
		if(rent > 0)
		{
			new h = FoundHouse(rent);
			if(h >= 0)
			{
				new owner = GetPlayeridToUserID(HouseInfo[h][hOwnerID]);	
				if(owner == INVALID_PLAYER_ID)
				{
					//	переводим деньги через базу
					mysql_format(g_SQL, string, sizeof(string), "UPDATE `players` SET `bank` = `bank` + '%d' WHERE `id` = '%d'", HouseInfo[h][hRentPrice], HouseInfo[h][hOwnerID]);
					mysql_query_ex(string);
				}
				else
				{
					//	если в игре, переводим в банк в игре
					GivePlayerBank(owner, HouseInfo[h][hRentPrice]);
				}
			}
		}

		if(days <= 0)
		{
			format(message, sizeof(message), "[Аренда]: Вы были выселены из арендуемого жилья за неуплату");
			mysql_format(g_SQL, string, sizeof(string), "UPDATE `players` SET `rent` = 0, `payment_days` = 0 WHERE `id` = '%d'", id);
		}
		else if(days <= 3)
		{
			format(message, sizeof(message), "[Аренда]: У вас осталось %d предоплаченых дней аренды жилья", days);
			mysql_format(g_SQL, string, sizeof(string), "UPDATE `players` SET `payment_days` = '%d' WHERE `id` = '%d'", days, id);
		}
		mysql_query_ex(string);
		if(strlen(message))	SendOfflineMessage(id, message);
	}
	return true;
}

// source(0 - disconnect, 1 - connect)
ZeroVars(playerid, source = 0)
{	
	new nowtick = GetTickCount();

	//	It's vars will be zeroing only when player disconnects
	if(source == 0)
	{
		//	Timers
		if(LoginCameraTimer[playerid])	
		{
			KillTimer(LoginCameraTimer[playerid]);
			LoginCameraTimer[playerid] = 0;
		}
		KillTimer(GetPVarInt(playerid, "Player:Timer"));

		//	Iterators
		Iter_Remove(LoginPlayer, playerid);
		Iter_Remove(Prisoners, playerid);
		Iter_Remove(Cop, playerid);
		Iter_Remove(Racer, playerid);
		Iter_Remove(Spectators, playerid);

		//////////		Vars		//////////
		gPlayerRegged[playerid] 		= REG_STATE_UNDEFINED;
		gPlayerShowLoginCam[playerid] 	= false;
		gPlayerLogged[playerid] 		= false;
		gPlayerDisconnecting[playerid] 	= false;
		gPlayerDeath[playerid]			= false;
		gLoggedTime[playerid] 			= 0;
		gPlayerLogTries{playerid} 		= 0;
		gInModShop[playerid] 			= 0;
		gLastVehicle[playerid] 			= 0;
		gEnteringVehicle[playerid] 		= 0;
		gLeavingGang[playerid] 			= false;
		gPickupTime[playerid] 			= 0;
		gMapIcon_CP[playerid] 			= 0;
		////////////////////////////////////////
		openWithInv[playerid]	 		= false;
		openWithATM[playerid] 			= false;
		openWithMenu[playerid] 			= false;
		////////////////////////////////////////
		playerDrink{playerid} 			= 0;
		playerDrinkCount{playerid} 		= 0;
		PlayerDrunkTime{playerid} 		= 0;
		playerSmokeCount{playerid} 		= 0;
	    ////////////////////////////////////////
		mission_id[playerid] 			= 0;
		mission_pobject[playerid] 		= 0;
		mission_veh[playerid] 			= 0;
		mission_timer[playerid] 		= 0;
		mission_count[playerid] 		= 0;
		////////////////////////////////////////
		PM_Type[playerid] 				= 0;
		PursuitReinforcReload[playerid] = 0;
		PursuitReinforc[playerid] 		= 0;
		PursuitStatus[playerid] 		= PS_NONE;
		PursuitTickcount[playerid] 		= 0;
		PursuitLamp[playerid] 			= false;
		PursuitCrimTransit[playerid] 	= false;
		PursuitAllowArrest[playerid] 	= false;
		PursuitIllegalItem[playerid] 	= false;
		PursuitLastUNIX[playerid] 		= 0;
		pursuit_timer[playerid] 		= 0;
		PursuitArest[playerid] 			= 0;
		PursuitCancelHandsup[playerid] 	= 0;
		CriminalMarkers[playerid] 		= 0;
		criminal_timer[playerid] 		= 0;
		////////////////////////////////////////
		redit_id[playerid] 				= 0;
		PlayerFoodHands[playerid] 		= 0;
		gWeaponStatus{playerid} 		= false;
		////////////////////////////////////////
		Mark[playerid][0] 				= 0.0;
		Mark[playerid][1] 				= 0.0;
		Mark[playerid][2] 				= 0.0;
		Mark[playerid][3] 				= 0.0;
		MarkINT[playerid] 				= 0;
		MarkVW[playerid] 				= 0;
		////////////////////////////////////////
		AskAmount[playerid] 			= 0;
		AskAmount2[playerid] 			= 0;
		AskTime[playerid] 				= 0;
		AskWhat[playerid] 				= ASK_NONE;
		////////////////////////////////////////
		HouseNum[playerid]				= 0;
		HouseZone[playerid] 			= 0;
		HouseClass[playerid] 			= 0;
		////////////////////////////////////////
		GangWarKills[playerid] 			= 0;
		GangWarDeath[playerid] 			= 0;
		GangZoneLeaving[playerid] 		= 0;
		////////////////////////////////////////
		MechanicStatus[playerid] 		= 0;
		////////////////////////////////////////
		robbery_money[playerid] 		= 0;
		robbery_timer[playerid] 		= 0;
		////////////////////////////////////////
		InMask[playerid] 				= false;
		OldSpeed[playerid] 				= 0;
		AdminDuty[playerid] 			= false;
		RegBizIdx[playerid] 			= 0;
		graffiti_timer[playerid]	 	= 0;
		burning_timer[playerid] 		= 0;
		MembersPage[playerid] 			= 0;
		MembersNum[playerid] 			= 0;
		PlayerVehicle[playerid] 		= 0;
		pAdverReload[playerid] 			= 0;
		j_jobstep{playerid} 			= 0;
		engine_timer[playerid] 			= 0;
		showDebug[playerid] 			= false;
		FW_Missile[playerid] 			= 0;
		CarryTimer[playerid] 			= 0;
		MissionInfoTimer[playerid] 		= 0;
		p_PrisonTimer{playerid} 		= false;
		DialogTimeleft[playerid] 		= 0;
		JailTime[playerid] 				= 0;
		gPlayerUsingLoopingAnim[playerid] = false;
		PlayerBusy{playerid} 			= false;
		weaponid_new[playerid] 			= 0;
		gExpTime[playerid] 				= 0;
	    gExpCount[playerid] 			= 0;
	    WantedTime[playerid] 			= 0;
	    gBlockAction[playerid] 			= BLOCK_NONE;

	    //strdel(AskOffer[playerid], 0, sizeof(AskOffer[]));
		strdel(jail_numer[playerid], 0, sizeof(jail_numer[]));

		//////////	Enumerations	//////////
			//	Player info
    	for(new E_PLAYER:e; e < E_PLAYER; e++)
		    PlayerInfo[playerid][e] = 0;
	
			//	Mission info
		for(new i; i < MISSION_SOURCE; i++)
		    gMissionProgress[playerid][i] = 0;
		
			//	Spawn info
		for(new E_SPAWN:e; e < E_SPAWN; e++)
			g_SpawnInfo[playerid][e] = 0;

		//////////		Modules		//////////
		#if defined _core_interface_included
			IFace.ZeroVars(playerid);
		#endif
		#if defined _player_achieve_included
			Achieve_ZeroVars(playerid);
		#endif
	}

	#if defined _ac_core_included
  		AC_ClearVars(playerid);
	#endif

	#if defined _inventory_weapon_included
		Inv.ClearWeaponData(playerid);
	#endif

	#if defined _interface_hint_included
		Hint_ZeroVars(playerid);
	#endif

	#if defined _player_phone_included
		Phone_ZeroVars(playerid);
    #endif

	FirstSpawn[playerid] 			= true;
	pNameTags[playerid] 			= true;
	AskOfferID[playerid] 			= -1;
	gPickupID[playerid] 			= -1;
	PickupedHouse[playerid] 		= -1;
	InGangZone[playerid] 			= -1;
	robbery_biz[playerid] 			= -1;
	robbery_offerid[playerid] 		= -1;
	gTickPushed[playerid] 			= nowtick;
	gTickEngine[playerid] 			= nowtick;
	StartupAntiflood[playerid] 		= nowtick;
	SpectateID[playerid] 			= INVALID_PLAYER_ID;
	gTargetid[playerid] 			= INVALID_PLAYER_ID;
	PursuitArestPlayer[playerid]	= INVALID_PLAYER_ID;
	MechanicClientid[playerid] 		= INVALID_PLAYER_ID;
	//////////		GPS 	////////////////
	gps_Data[playerid][GPS_CP] 		= INVALID_STREAMER_ID;
	gps_Data[playerid][GPS_MAP] 	= INVALID_STREAMER_ID;
	gps_Data[playerid][GPS_OBJ] 	= INVALID_STREAMER_ID;
	////////////////////////////////////////
	TestObject[playerid] 			= INVALID_STREAMER_ID;
	GotoObject[playerid] 			= INVALID_STREAMER_ID;
	gCheckpoint[playerid] 			= INVALID_STREAMER_ID;
	PickupedBiz[playerid] 			= INVALID_DATA;
	Dialogid[playerid] 				= INVALID_DIALOGID;

	//	Clear Game Functions
	for(new i = 0; i < 11; i++)		SetPlayerSkillLevel(playerid, i, 500);
	for(new i = 0; i < 10; i++)		RemovePlayerAttachedObject(playerid, i);
	return true;
}
// End ZeroVars()

Public: OnPlayerLogged(playerid)
{
	new string[256];

	#if defined _player_achieve_included
		Achieve_LoadPlayer(playerid);
	#endif

	// Запрет огня по своим для некоторых фракций
	new faction = PlayerInfo[playerid][pFaction];
	if(IsGang(faction) || IsMafia(faction))	SetPlayerTeam(playerid, faction);
	else if(faction == F_POLICE)			SetPlayerTeam(playerid, faction);
	else 									SetPlayerTeam(playerid, NO_TEAM);

	//
	Iter_Add(LoginPlayer, playerid);
	UpdatePlayerData(playerid, "online", playerid);

	//Check
	new h = FoundHouse(PlayerInfo[playerid][pHousing]);
	if(h >= 0 && HouseInfo[h][hOwnerID] != PlayerInfo[playerid][pUserID])
	{
		PlayerInfo[playerid][pHousing] = 0;
	}
	//---
	gPlayerLogTries{playerid} = 0;
	gPlayerLogged[playerid] = true;
	gWeaponStatus{playerid} = true;
	if(AUTOADMIN && PlayerInfo[playerid][pAdmin] > 0) AdminDuty[playerid] = true;
	if(PlayerInfo[playerid][pBanUNIX] > 0) PlayerInfo[playerid][pBanUNIX] = 0;
	//	Поиск арендуемой авто
	foreach(Vehicle, v)
	{
		if(VehInfo[v][vRentOwner] == PlayerInfo[playerid][pUserID])
		{
			SetPVarInt(playerid, "RentCar", v);
		}
	}
	//	in game params
	EnablePlayerCameraTarget(playerid, true);
	IFace.Load_Player(playerid);
	UpdatePlayerColor(playerid);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	UpdatePlayerGraffitiCP(playerid); 	//  toggle graffiti
	UpdateGangZone(-1, playerid);		//	toggle gang zones
	ToggleHouseIcons(playerid, PlayerInfo[playerid][pHouseIcon]);
	UpdatePlayerHouseMapIcon(playerid);
	Job.UpdatePlayerMapIcon(playerid);
	GangZoneShowForPlayer(playerid, JailGZ, 0x8B4513BB);
	SetPlayerFightingStyle(playerid, FightStyles[ PlayerInfo[playerid][pFightStyle] ]);
	SetPlayerWalkingStyle(playerid, PlayerInfo[playerid][pWalk]);
	// Скрыть ник для тех, у кого они скрыты в настройках
	foreach(LoginPlayer, i)
	{
		if(!pNameTags[i])	ShowPlayerNameTagForPlayer(i, playerid, false);
	}

	new enterObject = CreatePlayerObject(playerid, 2912, 0.0, 0.0, -100.0, 0, 0, 0);
	SetPlayerObjectMaterial(playerid, enterObject, 0, 18646, "MatColours", "green", 0x10FFFFFF);
	SetPlayerObjectMaterial(playerid, enterObject, 1, 18646, "MatColours", "green", 0x10FFFFFF);
	SetPVarInt(playerid, "System:Player:EnterObject", enterObject);
		
	//	удаление стандартных объектов
	CallRemoteFunction("RemoveStaticObjects", "d", playerid);

	// Сообщения
	SendFormatMessageToAll(COLOR_GRAD6, string, "[Connect]: %s прокрадывается на сервер ", ReturnPlayerName(playerid));
	format(string, sizeof(string), "%s (ip: %s, money: $%d, bank: $%.2f)", string, ReturnPlayerIP(playerid), MyGetPlayerMoney(playerid), PlayerInfo[playerid][pBank]);
	Admin_Log(string);

	//	Players Online Recorder
	new players = Iter_Count(LoginPlayer);
	if(CurrentPlayerRecords < players)
	{
		new date[3];
		getdate(Arr3<date>);
		CurrentPlayerRecords = players;
		SendFormatMessageToAll(COLOR_ORANGE, string, "[NEWS]: Только что был зафиксирован новый рекорд онлайна: %d игрок(ов) (%02d/%02d/%04d)", CurrentPlayerRecords, date[2], date[1], date[0]);
		mysql_format(g_SQL, string, sizeof(string), "UPDATE %s.`servers` SET `record_online` = '%d', `date_record` = UNIX_TIMESTAMP() WHERE `id` = '%d'", MAIN_DB, CurrentPlayerRecords, SERVER_ID);
		mysql_query_ex(string);
	}

	PreloadAnimLibs(playerid);
	SetPlayerSpawn(playerid);
	UpdatePlayerSkin(playerid);
	MySpawnPlayer(playerid);
	return true;
}

//	Callbacks: Players
public OnPlayerConnect(playerid)
{
	if(IsPlayerNPC(playerid))	return true;
	if(GameModeStatus == false)
	{
		SendClientMessage(playerid, COLOR_SERVER, "Sorry, gamemode is not loaded yet. Reconnect 5 second...");
		SetTimerEx("OnPlayerConnect", 5000, false, "d", playerid);
		return true;
	}

	new string[256], same_ips;
	for(new i = 0; i < GetPlayerPoolSize(); i ++)
	{
		if(playerid == i) continue;
		if(strcheck(ReturnPlayerIP(i), ReturnPlayerIP(playerid)))
		{
			format(string, sizeof(string), "IP игрока %s[%d] идентичен IP игрока %s[%d] [IP: %s]", ReturnPlayerName(playerid), playerid, ReturnPlayerName(i), i, ReturnPlayerIP(playerid));
			SendAdminMessage(COLOR_LIGHTRED, string);
			same_ips++;
		}
	}
	if(same_ips >= 5)
	{
  		printf("Подозревается атака! IP: %s", ReturnPlayerIP(playerid));
  		format(string, sizeof(string), "Только что была отбита атака ботами! [IP: %s]", ReturnPlayerIP(playerid));
  		SendAdminMessage(COLOR_LIGHTRED, string);
  		Kick(playerid);
  		format(string, sizeof(string), "banip %s", ReturnPlayerIP(playerid));
  		SendRconCommand(string);
	}

	mysql_format(g_SQL, string, sizeof(string), "SELECT `id`, `exitunix`, `banunix` FROM `players` WHERE `username` = '%s'", ReturnPlayerName(playerid));
	mysql_pquery(g_SQL, string, "OnPlayerGetRegister", "d", playerid);

	SendClientMessage(playerid, COLOR_SERVER, "Gamemode data loading...");
	SetPVarInt(playerid, "Player:Timer", SetPlayerTimerEx(playerid, "PlayerEverySecondTimer", 950, true, "d", playerid));
	PreloadAnimLib(playerid, "MISC");			//	Чтобы проигралась анимка актера
	PreloadAnimLib(playerid, "COP_AMBIENT");	//	Чтобы проигралась анимка в кат сценке

	#if defined _core_interface_included
		Callback: IFace.OnPlayerConnect(playerid);
	#endif

	//	Set settings
	new hour, minute;
	gettime(hour, minute, _);
	SetPlayerTime(playerid, hour, minute);
	ClearChatbox(playerid, 20);
	SetPlayerColor(playerid, 0xAFAFAFFF);
	ZeroVars(playerid, true);

	//---	Set MySQL ORM
    new ORM:ormid = PlayerInfo[playerid][ORM_ID] = orm_create("players", g_SQL);
	orm_addvar_int(ormid, PlayerInfo[playerid][pUserID], "id");
	orm_setkey(PlayerInfo[playerid][ORM_ID], "id");

	orm_addvar_int(ormid, PlayerInfo[playerid][pLevel], "level");
	orm_addvar_int(ormid, PlayerInfo[playerid][pExp], "exp");
	orm_addvar_int(ormid, PlayerInfo[playerid][pVip], "vip");
	orm_addvar_int(ormid, PlayerInfo[playerid][pVipUNIX], "vipunix");
	// `online`
	orm_addvar_int(ormid, PlayerInfo[playerid][pSex], "sex");
	orm_addvar_int(ormid, PlayerInfo[playerid][pSkin], "skin");
	orm_addvar_int(ormid, PlayerInfo[playerid][pMoney], "money");
	orm_addvar_int(ormid, PlayerInfo[playerid][pWantedLvl], "wantedlvl");
	orm_addvar_int(ormid, CriminalDanger[playerid], "danger");
	// `teamunix`
	orm_addvar_int(ormid, PlayerInfo[playerid][pLeader], "leader");
	orm_addvar_int(ormid, PlayerInfo[playerid][pFaction], "faction");
	orm_addvar_int(ormid, PlayerInfo[playerid][pRank], "rank");
	orm_addvar_int(ormid, PlayerInfo[playerid][pCopWarn], "copwarn");
	orm_addvar_int(ormid, PlayerInfo[playerid][pCopCases], "copcases");
	orm_addvar_int(ormid, PlayerInfo[playerid][pSpawn], "spawn");
	orm_addvar_float(ormid, PlayerInfo[playerid][pPosX], "posx");
	orm_addvar_float(ormid, PlayerInfo[playerid][pPosY], "posy");
	orm_addvar_float(ormid, PlayerInfo[playerid][pPosZ], "posz");
	orm_addvar_float(ormid, PlayerInfo[playerid][pPosA], "posa");
	orm_addvar_int(ormid, PlayerInfo[playerid][pPosINT], "posint");
	orm_addvar_int(ormid, PlayerInfo[playerid][pPosVW], "posvw");
	// `regdate`
	orm_addvar_int(ormid, PlayerInfo[playerid][pExitUNIX], "exitunix");
	orm_addvar_int(ormid, PlayerInfo[playerid][pJailTime], "jailtime");
	orm_addvar_int(ormid, PlayerInfo[playerid][pWarns], "warns");
	orm_addvar_int(ormid, PlayerInfo[playerid][pWarnUNIX], "warnunix");
	orm_addvar_int(ormid, PlayerInfo[playerid][pMuteTime], "mutetime");
	orm_addvar_int(ormid, PlayerInfo[playerid][pAskMute], "askmute");
	orm_addvar_int(ormid, PlayerInfo[playerid][pAdmin], "admin");
	orm_addvar_int(ormid, PlayerInfo[playerid][pBanUNIX], "banunix");
	orm_addvar_int(ormid, PlayerInfo[playerid][pHousing], "house");
	orm_addvar_int(ormid, PlayerInfo[playerid][pRent], "rent");
	orm_addvar_int(ormid, PlayerInfo[playerid][pPaymentDays], "payment_days");
	orm_addvar_int(ormid, PlayerInfo[playerid][pCensored], "censored");
	orm_addvar_int(ormid, PlayerInfo[playerid][pLaw], "law");
	orm_addvar_float(ormid, PlayerInfo[playerid][pBank], "bank");
	orm_addvar_float(ormid, PlayerInfo[playerid][pCrimeWage], "crime_wage");
	orm_addvar_int(ormid, PlayerInfo[playerid][pUpgrade], "upgrade");
	orm_addvar_float(ormid, PlayerInfo[playerid][pRunCar], "runcar");
	orm_addvar_float(ormid, PlayerInfo[playerid][pSaveHealth], "health");
	orm_addvar_float(ormid, PlayerInfo[playerid][pSaveArmour], "armour");
	orm_addvar_int(ormid, PlayerInfo[playerid][pHunger], "hunger");
	orm_addvar_int(ormid, PlayerInfo[playerid][pPhoneNumber], "p_number");
	orm_addvar_float(ormid, PlayerInfo[playerid][pPhoneBalance], "p_balance");
	orm_addvar_int(ormid, PlayerInfo[playerid][pPhoneEnable], "p_enable");
	orm_addvar_int(ormid, PlayerInfo[playerid][pCarLic], "carlic");
	orm_addvar_int(ormid, PlayerInfo[playerid][pGunLic], "gunlic");
	//orm_addvar_int(ormid, PlayerInfo[playerid][pGunDealLic], "gundeal_lic");
	//orm_addvar_int(ormid, PlayerInfo[playerid][pTheftLic], "theft_lic");
	orm_addvar_int(ormid, PlayerInfo[playerid][pTheftTime], "theft_time");
	//orm_addvar_int(ormid, PlayerInfo[playerid][pDrugDealLic], "drugdeal_lic");
	orm_addvar_int(ormid, PlayerInfo[playerid][pTaxiLevel], "taxi_level");
	orm_addvar_int(ormid, PlayerInfo[playerid][pTaxiSkill], "taxi_skill");
	orm_addvar_int(ormid, PlayerInfo[playerid][pBusLevel], "bus_level");
	orm_addvar_int(ormid, PlayerInfo[playerid][pBusSkill], "bus_skill");
	orm_addvar_int(ormid, PlayerInfo[playerid][pTruckLevel], "truck_level");
	orm_addvar_int(ormid, PlayerInfo[playerid][pTruckSkill], "truck_skill");
	orm_addvar_int(ormid, PlayerInfo[playerid][pNewsUnix], "news_unix");
	orm_addvar_int(ormid, PlayerInfo[playerid][pNewsCount], "news_count");
	orm_addvar_int(ormid, PlayerInfo[playerid][pKills], "kills");
	orm_addvar_int(ormid, PlayerInfo[playerid][pDeaths], "deaths");
	orm_addvar_int(ormid, PlayerInfo[playerid][pExpsum], "expsum");
	orm_addvar_int(ormid, PlayerInfo[playerid][pInterface], "interface");
	orm_addvar_int(ormid, PlayerInfo[playerid][pLowerPanel], "lower_panel");
	orm_addvar_int(ormid, PlayerInfo[playerid][pRusifik], "rusifik");
	orm_addvar_int(ormid, PlayerInfo[playerid][pHouseIcon], "house_icons");
	orm_addvar_int(ormid, PlayerInfo[playerid][pToggleZone], "toggle_zone");
	orm_addvar_float(ormid, PlayerInfo[playerid][pPower], "power");
	orm_addvar_int(ormid, PlayerInfo[playerid][pTraining], "training");
	orm_addvar_int(ormid, PlayerInfo[playerid][pShooting], "shooting");
	orm_addvar_int(ormid, PlayerInfo[playerid][pWalk], "walk");
	orm_addvar_int(ormid, PlayerInfo[playerid][pAnim], "anim");
	orm_addvar_int(ormid, PlayerInfo[playerid][pFightStyle], "fight_style");
	orm_addvar_int(ormid, PlayerInfo[playerid][pGametime], "gametime");
	//	missions:
	orm_addvar_int(ormid, gMissionProgress[playerid][MIS_SOURCE_TRAINING], "mission_training");
	#if defined _job_core_included
		Job.SetORM(ormid, playerid);
	#endif
	return true;
}// end of OnPlayerConnect(playerid)

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid))
   	{
	#if	!defined _FCNPC_included
		for(new i = 0; i < MAX_NPC; i++)
		{
			if(strcmp(ReturnPlayerName(playerid), NpcInfo[i][n_Name], true) == 0)
			{
				NPC_ID[i] = playerid;
				SetSpawnInfo(playerid, 0, NpcInfo[i][n_Skin], Arr4<NpcInfo[i][n_Pos]>, 0, 0, 0, 0, 0, 0);
			}
		}
	#endif
	}
	else
	{
		TogglePlayerSpectating(playerid, true);
		if(gPlayerLogged[playerid])
		{
			UpdatePlayerSkin(playerid);
			TogglePlayerSpectating(playerid, false);
		}
	}
	return true;
}

public OnPlayerRequestSpawn(playerid)
{
    return false;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(IsPlayerNPC(playerid))	return true;

	gPlayerDisconnecting[playerid] = true;

	// #if defined _job_core_included
	// 	Job.ClearPlayerNowWork(playerid, Job.REASON_DISCONNECT);
	// #endif
	 #if defined _player_phone_included
		Phone_CancelCall(playerid);
	#endif

	new string[128];
	UpdatePlayerStatics(playerid);
	//---
	CancelSelectTextDraw(playerid);
	Streamer_ToggleAllItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL, true);
	MyDisablePlayerCheckpoint(playerid);

	//HidePlayerInventory(playerid);
	//	update vehicle
	new v = GetPlayerVehicleID(playerid);
	if(v > 0)	UpdateVehInfo(v);
	CancelPlayerBerth(playerid);					// Очистка больничной койки
    CancelEditHomeObject(playerid);					// Очистка редактирования мебели
    StopPursuit(playerid, 2);       				// Очистка погони (если была) по причине выхода
	CopList_REMOVE(playerid);						// Очистка копа из списка
    PoliceMissionCancel(playerid, "quit");			// Очистка полицейской миссии
    HidePlayerGPSPoint(playerid);					// Очистка GPS
	DestroyCriminalMarker(playerid);
	BenchpressClear(playerid);						// Отмена жима штанги
	JailJobClear(playerid);							// Работа на зоне
	AS_ClearVars(playerid);							// Автошкола
	ClearPlayerShooting(playerid, true);			// отмена стрельбы в тире
	FinishBox(playerid, 0);							// Отмена боксерского спаринга
	RaceLeave(playerid);							// Выход из гонки
	StoryMissionCancel(playerid);					// Очистка миссии
	RobberyClear(playerid, 1);						// Очистка ограбления магазина
	
	DeleteJailNumber(playerid);						// Удаление номера над головой преступника
	CancelMechanicDuty(playerid);					// Очистка работы механиком

	DestroyDynamic3DTextLabel(criminal_3d[playerid]), criminal_3d[playerid] = Text3D:INVALID_STREAMER_ID;

	DestroyDynamicObject(GotoObject[playerid]), GotoObject[playerid] = INVALID_STREAMER_ID;
	DestroyDynamicObject(TestObject[playerid]), TestObject[playerid] = INVALID_STREAMER_ID;

	KillTimer(MissionInfoTimer[playerid]);
	KillTimer(criminal_timer[playerid]);
				
	if(PlayerVehicle[playerid])					BlockVehicleEffect(PlayerVehicle[playerid]);						//	FIX: урон при выходе игрока сидя в авто (резкая остановка)
	if(PlayerInfo[playerid][pJailTime])			Iter_Remove(Prisoners, playerid);									// Очистка зека из списка
	if(PlayerVehicle[playerid])					ExitVehicle(playerid);												// Система контроля авто
    if(AskWhat[playerid] == ASK_POLICE_FINE)	PlayerInfo[playerid][pJailTime] = -GetPlayerWantedLevel(playerid);	// Выход с неоплаченной квитанцией
    if(GetPVarInt(playerid, "EditAdID"))		gAdvert[GetPVarInt(playerid, "EditAdID") - 1][adStatus] = 0;
    if(GetPVarType(playerid, "Admin:InTicket") != PLAYER_VARTYPE_NONE)
    {
    	gAsk[GetPVarInt(playerid, "Admin:InTicket")][askStatus] = false;
    }
    //	отключение спектейта
	foreach(Spectators, i)	
	{	
		if(SpectateID[i] == playerid)
		{
			callcmd::specoff(i, "");	
		}
	}	
	//---	RentCar
	new rentcar = GetPVarInt(playerid, "RentCar");
	if(rentcar)
	{
		if(VehInfo[rentcar][vRentTime] <= 0)
		{
			MySetVehicleToRespawn(rentcar);
		}
	}
	if(GetPVarInt(playerid, "Roped"))
    {
        for(new i = 0; i < ROPE_LENGTH; i++)
        	DestroyDynamicObject(RopeObjects[playerid][i]);
	}
	//	Закрытие двери в аэропорту
	if(GetPVarInt(playerid, "Player:NearAirportDoor") == 1 && NearAirportDoorPlayers > 0)
    {
        if(--NearAirportDoorPlayers == 0)
        {
        	MyMoveDynamicObject(AirportDoor[0], 1684.27, -2335.98, 12.56, 1.5, -1000.0, -1000.0, -1000.0);
			MyMoveDynamicObject(AirportDoor[1], 1687.27, -2335.94, 12.56, 1.5, -1000.0, -1000.0, -1000.0);
        }
    }

	if(FirstSpawn[playerid] == false)
	{
		if(reason == 0)
		{
			format(string, sizeof(string), "[Disconnect]: %s[%d] отключился от сервера (Обрыв связи)", ReturnPlayerName(playerid), playerid);
			MySendClientMessageToAll(COLOR_GRAD2, string);
		}
		else if(reason == 1)
		{
			format(string, sizeof(string), "[Disconnect]: %s[%d] отключился от сервера (Выходит)", ReturnPlayerName(playerid), playerid);
			SendAdminMessage(COLOR_GRAD2, string); // for admin
		}
		else if(reason == 2)
		{
			format(string, sizeof(string), "[Disconnect]: %s[%d] отключился от сервера (Кикнут/Забанен)", ReturnPlayerName(playerid), playerid);
			MySendClientMessageToAll(COLOR_GRAD2, string);
		}
	}
	ZeroVars(playerid);
	return true;
}

stock SetPlayerSpawn(playerid)
{
	//	change spawn points
	if(PlayerInfo[playerid][pSpawn] == SPAWN_HOUSE)
	{
		if(PlayerInfo[playerid][pHousing] == 0 && PlayerInfo[playerid][pRent] == 0)
		{
			if(PlayerInfo[playerid][pFaction])	PlayerInfo[playerid][pSpawn] = SPAWN_FACTION;
			else 								PlayerInfo[playerid][pSpawn] = SPAWN_NEWBIE;
		}
	}
	else if(PlayerInfo[playerid][pSpawn] == SPAWN_FACTION)
	{
		if(PlayerInfo[playerid][pFaction] == 0)
		{
			if(PlayerInfo[playerid][pHousing] != 0 || PlayerInfo[playerid][pRent] != 0)
					PlayerInfo[playerid][pSpawn] = SPAWN_HOUSE;
			else 	PlayerInfo[playerid][pSpawn] = SPAWN_NEWBIE;
		}
	}
	/////
	new Float:pos[4];

	if(PlayerInfo[playerid][pAJailTime])
	{
		if(PlayerInfo[playerid][pAJailTime] > gettime())
		{
			PlayerBusy{playerid} = true;
			TogglePlayerStreamerAllItem(playerid, false);
			pos[0] = -181.5, pos[1] = 3301.5, pos[2] = 24.5, pos[3] = 90.0;
			SetRandPos(pos[0], pos[1], 3.0);
			MySetPlayerSpawnPos(playerid, Arr4<pos>, 10, VW_AJAIL);
			PlayerInfo[playerid][pSaveHealth] = 100.0;
		    SetPlayerHunger(playerid, 100);
		}
		else
		{
			PlayerBusy{playerid} = false;
			TogglePlayerStreamerAllItem(playerid, true);
			MySetPlayerSpawnPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ] + 0.2, PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pPosINT], PlayerInfo[playerid][pPosVW]);
			PlayerInfo[playerid][pAJailTime] = 0;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Вы отсидели срок своего наказания, больше не нарушайте!");
		}
	}
	else if(PlayerInfo[playerid][pJailTime] > 0)
	{
		if(PlayerInfo[playerid][pJailTime] < unixtime())
		{
			JailDelivery(playerid, false);
		}
		else
		{
			SetPlayerPrisonPos(playerid, LastPrisonStatus);
		}
		PlayerInfo[playerid][pSaveHealth] = 50.0;
	    SetPlayerHunger(playerid, 50);
	}
	else if(PlayerInfo[playerid][pJailTime] < 0)
	{
		MySetPlayerSpawnPos(playerid, 264.6, 77.6, 1001.0, 270.0, 6, VW_LSPD);
	}
	else if(AS_ElementNumber[playerid] > 0)
	{
		MySetPlayerSpawnPos(playerid, -2026.77, -114.345, 1035.172, 1.0, 3, VW_AUTOSCHOOL);
	}
	else if(IsGang(PlayerInfo[playerid][pFaction]) && InGangZone[playerid] >= 0)
	{	//	Система захвата зон
		new zone = InGangZone[playerid];
		pos[0] = GangZones[zone][0] + random(floatround(GangZones[zone][2] - GangZones[zone][0]));
		pos[1] = GangZones[zone][1] + random(floatround(GangZones[zone][3] - GangZones[zone][1]));
		MapAndreas_FindZ_For2DCoord(Arr3<pos>);
		MySetPlayerSpawnPos(playerid, pos[0], pos[1], pos[2] + 2.0, 0.0);
	}

	//	Если не прошел миссию с отелем - спавним все время в аэро
	/*else if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] < 1)
	{
		pos[0] = SpawnCoord[0], pos[1] = SpawnCoord[1], pos[2] = SpawnCoord[2], pos[3] = SpawnCoord[3];
		SetRandPos(pos[0], pos[1], 2.0);
		MySetPlayerSpawnPos(playerid, Arr4<pos>);
		PlayerInfo[playerid][pSaveHealth] = 50.0;
	    SetPlayerHunger(playerid, 100);
	}*/

	else if(GetPVarInt(playerid, "Player:SpawnHospital"))
	{
		new const Float:HospitalPos[2][4] =
		{
			{ -2673.0, 642.0, 1275.3, 270.0 },
			{ -2661.0, 642.0, 1275.2, 270.0 }
		};
		new rand = random(2);
		pos[0] = HospitalPos[rand][0], pos[1] = HospitalPos[rand][1], pos[2] = HospitalPos[rand][2], pos[3] = HospitalPos[rand][3];
		SetRandPos(pos[0], pos[1], 1.5);
		MySetPlayerSpawnPos(playerid, Arr4<pos>, 1, VW_HOSPITAL);
		if(PlayerInfo[playerid][pVip])
	    {
			PlayerInfo[playerid][pSaveHealth] = 100.0;
			PlayerInfo[playerid][pSaveArmour] = 100.0;
			SetPlayerHunger(playerid, 100);
	    }
	    else
	    {
	    	PlayerInfo[playerid][pSaveHealth] = 10.0;
	    	SetPlayerHunger(playerid, 50);
	    }
	    DeletePVar(playerid, "Player:SpawnHospital");
	}
	else
	{
		if(FirstSpawn[playerid] && PlayerInfo[playerid][pExitUNIX] + MAX_ABSENCE_TIME * 60 > unixtime() && PlayerInfo[playerid][pPosX] && PlayerInfo[playerid][pPosY])
		{	//	перезашел раньше чем через 15 минут
			MySetPlayerSpawnPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pPosINT], PlayerInfo[playerid][pPosVW]);
		}
		else
		{
			if(PlayerInfo[playerid][pSpawn] == SPAWN_HOUSE)
			{
				new h = (-1);
				if(PlayerInfo[playerid][pHousing] > 0)		h = FoundHouse(PlayerInfo[playerid][pHousing]);	//  прописан в доме
				else if(PlayerInfo[playerid][pRent] > 0)	h = FoundHouse(PlayerInfo[playerid][pRent]);	//	арендует дом
				if(h != (-1))
				{
					new Class = HouseInfo[h][hClass] - 1;
					new Int = HouseInfo[h][hInt] - 1;
					new Float:A = InterCoords[Class][Int][3] + 180;
					new Float:X = InterCoords[Class][Int][0] + (2.0 * floatsin(-A, degrees));
					new Float:Y = InterCoords[Class][Int][1] + (2.0 * floatcos(-A, degrees));
					MySetPlayerSpawnPos(playerid, X, Y, InterCoords[Class][Int][2], InterCoords[Class][Int][3], 1, VW_HOUSE + HouseInfo[h][hID]);
				}
				//	Комнаты в отеле Jefferson
				else if(PlayerInfo[playerid][pRent] < 0)
				{
					new hotel_roow = PlayerInfo[playerid][pRent] * (-1) - 1; // = {0, 1, 2}
					MySetPlayerSpawnPos(playerid, Arr4<HotelRooms[hotel_roow][H_POS]>, HotelRooms[hotel_roow][H_INT], playerid);
				}
			}
			else if(PlayerInfo[playerid][pSpawn] == SPAWN_FACTION)
			{
				MySetPlayerSpawnPos(playerid, Arr4<Faction[PlayerInfo[playerid][pFaction]][F_SPAWN]>, Faction[PlayerInfo[playerid][pFaction]][F_INT], Faction[PlayerInfo[playerid][pFaction]][F_VW]);
			}
			else
			{
				pos[0] = SpawnCoord[0], pos[1] = SpawnCoord[1], pos[2] = SpawnCoord[2], pos[3] = SpawnCoord[3];
				SetRandPos(pos[0], pos[1], 2.0);
				MySetPlayerSpawnPos(playerid, Arr4<pos>);
			}

			/*if(PlayerInfo[playerid][pVip])
		    {
				PlayerInfo[playerid][pSaveHealth] = 100.0;
				PlayerInfo[playerid][pSaveArmour] = 100.0;
				SetPlayerHunger(playerid, 100);
		    }
		    else
		    {
		    	PlayerInfo[playerid][pSaveHealth] = 10.0;
	    		SetPlayerHunger(playerid, 50);
		    }*/
		}
	}
	return true;
}

public OnPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
	{
		//SetPlayerColor(playerid, 0xB1C8FB33);
	#if !defined _FCNPC_included
		for(new i = 0; i < sizeof(NpcInfo); i++)
		{
			if(NPC_ID[i] != playerid)	continue;
			for(new t = 0; t < sizeof(TrainInfo); t++)
			{
				if(i != TrainInfo[t][trNPC])	continue;
		       	MyPutPlayerInVehicle(playerid, TrainInfo[t][trID], 0);
		    #if defined RNPC_VERSION
		        if(++TDriverCount == sizeof(TrainInfo))	StartTrainCycle();
		    #endif
		    	return true;
			}
		}
	#endif
		return true;
	}

	gPlayerDeath[playerid] = false;

	new string[128];
	new hour;
	new timeUNIX = gettime(hour, _, _);

	//TogglePlayerControllable(playerid, false);	//	fix

	new Float:pos[4], int, vw;
	GetSpawnPos(playerid, Arr4<pos>, int, vw);
	Streamer_UpdateEx(playerid, Arr3<pos>, vw, int);

	//---	Set game params
	if(PlayerInfo[playerid][pSaveHealth] > 160.0)		PlayerInfo[playerid][pSaveHealth] = 160.0;
	else if(PlayerInfo[playerid][pSaveHealth] < 10.0)	PlayerInfo[playerid][pSaveHealth] = 10.0;
	MySetPlayerHealth(playerid, 	PlayerInfo[playerid][pSaveHealth]);
	MySetPlayerArmour(playerid, 	PlayerInfo[playerid][pSaveArmour]);
	MySetPlayerMoney(playerid,		PlayerInfo[playerid][pMoney]);
	SetPlayerInterior(playerid,		int);
	SetPlayerVirtualWorld(playerid,	vw);

	if(GetPVarInt(playerid, "RegCutSceneState"))
	{
		return true;
	}
	
	//FirstSpawnCam(playerid, 0);
	GameTextForPlayer(playerid, " ", 1000, 4);
	PlayerPlaySound(playerid, 1188, 0.0, 0.0, 0.0);

	//---	First spawn (OnPlayerSpawn)
	if(FirstSpawn[playerid])
	{
		//	Set Settings
		StopAudioStreamForPlayer(playerid);

		ClearChatbox(playerid, 10);
		new timename[20];
		switch(hour)
		{
		    case 0..5: 		timename = "С бодрой ночью";
		    case 6..11: 	timename = "Доброе утро";
		    case 12..17: 	timename = "Добрый день";
		    case 18..23: 	timename = "Добрый вечер";
		}
		//SendClientMessage(playerid, COLOR_GREEN, "===============================");
		SendFormatMessage(playerid, COLOR_WHITE, string, "%s, "MAIN_COLOR"%s{FFFFFF}", timename, ReturnPlayerName(playerid));
		SendClientMessage(playerid, COLOR_WHITE, "Добро пожаловать на "MAIN_COLOR"S{FFFFFF}ilver "MAIN_COLOR"B{FFFFFF}reak");
		if(PlayerInfo[playerid][pAdmin] > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Не забывайте про админ-дежурство");
			if(!Anticheat.GetToggle()) SendClientMessage(playerid, COLOR_LIGHTRED, "Админ, античит отключен, будь осторожнее");
		}
		SendClientMessage(playerid, COLOR_WHITE, "Адрес нашего сайта: " MAIN_COLOR SITE_ADRESS);
		SendClientMessage(playerid, COLOR_WHITE, "");
		//SendClientMessage(playerid, COLOR_GREEN, "===============================");
		// Email check
		if(strlen(GetPlayerEmail(playerid)) == 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Укажите свой email адрес {FFFFFF}(/mm > Безопасность)");
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Это даст возможность восстановить утерянный пароль");
		}
		if(PlayerInfo[playerid][pVip] && PlayerInfo[playerid][pVipUNIX] < unixtime())
		{
			PlayerInfo[playerid][pVip] = 0, PlayerInfo[playerid][pVipUNIX] = 0;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Ваш Премиум аккаунт закончился, для продления используйте меню.");
		}
		
		// Обновление ранга лидера
		if(IsPlayerLeader(playerid))
		{
		    PlayerInfo[playerid][pRank] = FactionRankMax[PlayerInfo[playerid][pFaction]];
		}
		// Очистка предупреждений
		if(PlayerInfo[playerid][pWarns] > 0 && PlayerInfo[playerid][pWarnUNIX] + 7 * 24 * 60 * 60 <= timeUNIX)
		{
		    if(--PlayerInfo[playerid][pWarns] > 0) PlayerInfo[playerid][pWarnUNIX] = timeUNIX;
		    SendClientMessage(playerid, COLOR_LIGHTRED, "[WARN]: Прошла неделя спустя последнего варна, поэтому вам его снимают");
		}
		// Автоудаление из организации
		if(PlayerInfo[playerid][pFaction] == -1)
		{
		    SetPlayerFaction(playerid, F_NONE);
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Внимание! Вас исключили из организации, пока вы были офлайн");
		}
	
		if(Job.GetPlayerPartWage(playerid) > 0)
		{
		    SendFormatMessage(playerid, COLOR_LIGHTRED, string, "До выхода из игры вы заработали: {FFFFFF}%d$", Job.GetPlayerPartWage(playerid));
		    MyGivePlayerMoney(playerid, Job.GetPlayerPartWage(playerid)), Job.SetPlayerPartWage(playerid, 0);
		}
		// Подключаем игрока к захвату
		if(IsGang(PlayerInfo[playerid][pFaction]))
		{
	        for(new z; z < sizeof(GangZones); z++)
	        {
	            if(GangZoneEnemy[z] > 0 && (PlayerInfo[playerid][pFaction] == GangZoneOwner[z] || PlayerInfo[playerid][pFaction] == GangZoneEnemy[z]))
	            {
					Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, GangZoneMapIcon[z], E_STREAMER_PLAYER_ID, playerid);
					Streamer_Update(playerid, STREAMER_TYPE_MAP_ICON);
	                break;
	            }
			}
		}
		//	Получение и вывод накопившихся офлайн сообщений
		mysql_format(g_SQL, string, sizeof(string), "SELECT `message`, `date` FROM `offline_message` WHERE `user_id` = '%d'", PlayerInfo[playerid][pUserID]);
		new Cache:result = mysql_query(g_SQL, string);
		if(cache_num_rows() > 0)
		{
			new lstring[512], date, m_date[6];
			lstring = "{FFFFFF}Пока вы были офлайн, вам пришли сообщения:\n";
			for(new m = 0; m < cache_num_rows(); m++)
			{
				cache_get_value_name(m, "message", string);
				cache_get_value_name_int(m, "date", date);
				gmtime(date, Arr6<m_date>);
				format(lstring, sizeof(lstring), "%s\n"MAIN_COLOR"[%02d/%02d/%04d %02d:%02d]{FFFFFF}\n%s\n", lstring, m_date[1], m_date[2], m_date[0], m_date[3], m_date[4], string);
			}
			MyShowPlayerDialog(playerid, DMODE_OFFLINE_MESSAGE, DIALOG_STYLE_MSGBOX, "Информация", lstring, "Понятно", "", 0);
		}
		cache_delete(result);
	}
	else
	{
		//////////		Clear 		//////////
		BlockPlayerAnimation(playerid, false);
		PlayerCuffedTime[playerid] = 0;
		Iter_Remove(Spectators, playerid);
		BenchpressClear(playerid);	//	Очистка жима штанги
		AS_ClearVars(playerid);		//	Очистка автошколы
		if(GetPVarInt(playerid, "Thing:RadioID"))
		{
			DeletePVar(playerid, "Thing:RadioID");
			StopAudioStreamForPlayer(playerid);
		}
		//////////////////////////////////////
		//	IFace
		TextDrawHideForPlayer(playerid, Busted);
		TextDrawHideForPlayer(playerid, Wasted);
		IFace.ToggleGroup(playerid, IFace.TV_EFFECT, false);
		IFace.ToggleGroup(playerid, IFace.SPEEDO, false);
		StopPlayerFade(playerid);

		#if defined _job_core_included
			if(Jobs[ Job.GetPlayerNowWork(playerid) ][J_CLEAR_TYPE])
			{
				Job.ClearPlayerNowWork(playerid, Job.REASON_DEATH);
			}
		#endif
	}

	if(PlayerInfo[playerid][pJailTime] < 0)
	{	// Если в КПЗ
		JailTime[playerid] = 60;
		SendClientMessage(playerid, COLOR_LIGHTRED, "Вас посадили в камеру предварительного заключения до вынесения приговора");
	}
	else if(PlayerInfo[playerid][pJailTime] > 0)	// Если в тюрьме
	{
		if(PlayerInfo[playerid][pJailTime] < timeUNIX)
		{	// Освобождение из тюрьмы
		    PlayerInfo[playerid][pJailTime] = 0;
			GameTextForPlayer(playerid, "~w~You are ~r~Free", 5000, 4);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Вы заплатили долг обществу, теперь вы свободны");
			PlayerTextDrawHide(playerid, p_JailPeriod);
			Iter_Remove(Prisoners, playerid);
			HidePlayerPrisonTime(playerid);
			JailJobClear(playerid);
			if(p_JailOccupied[playerid] != INVALID_PLAYER_ID)
			{
				g_JailOccupied[ p_JailOccupied[playerid] ]--;
                p_JailOccupied[playerid] = INVALID_PLAYER_ID;
			}
		}
		else
		{
			if(GetPVarInt(playerid, "PrisonCycle"))
			{
				IFace.ToggleGroup(playerid, IFace.TV_EFFECT, true);
				SetPlayerCameraPos(playerid, 693.5, -2917.4, 1701.3);
				SetPlayerCameraLookAt(playerid, 690.0, -2917.4, 1700.8);
				SetTimerEx("MyFreezePlayer", 1000, false, "d", playerid);
				SetPVarInt(playerid, "Prison:FlyCamera:Timer", SetTimerEx("PrisonCycle", 2000, false, "dd", playerid, 5));
			}
			else
			{
				new statusname[20];
				if(LastPrisonStatus == 1)		statusname = "~y~Работа";
			    else if(LastPrisonStatus == 2)	statusname = "~y~Столовая";
			    else if(LastPrisonStatus == 3)	statusname = "~y~Прогулка";
			    else if(LastPrisonStatus == 4)	statusname = "~y~Отбой";
				Iter_Add(Prisoners, playerid);
				ShowPlayerPrisonTime(playerid);
				PlayerTextDrawSetString(playerid, p_JailPeriod, RusText(statusname, isRus(playerid)));
				PlayerTextDrawShow(playerid, p_JailPeriod);
				if(strlen(jail_numer[playerid]) == 0)
				{
					format(jail_numer[playerid], sizeof(jail_numer[]), "#%03d-%04d", random(999), random(9999));
					jail_number_3dtext[playerid] = CreateDynamic3DTextLabel(jail_numer[playerid], COLOR_LIGHTYELLOW, 0.0, 0.0, 0.3, 20.0, playerid, INVALID_VEHICLE_ID, 1);
				}
			}
		}
	}
	return true;
}// end of OnPlayerSpawn

//////	Вызывается после полного спавна игрока, а не в процессе
stock OnPlayerSpawnFinish(playerid)
{
	if(GetPVarInt(playerid, "RegCutSceneState") == 0)
	{
		// if(PlayerInfo[playerid][pJailTime] == 0)
		//	Inv.LoadPlayerUsedWeapon(playerid);	//	MyChangePlayerWeapon(playerid, false);
		Inv.GetPlayerUsingItem(playerid);

	#if defined _player_achieve_included	
		if(PlayerInfo[playerid][pDeaths] >= 100)
		{
			GivePlayerAchieve(playerid, ACHIEVE_DEATH);	//	Достижение 'Смертник'
		}
	#endif
		//if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] < 4)	StoryMissionStart(playerid, MIS_SOURCE_TRAINING);
		if(FirstSpawn[playerid])
		{
			if(IsPlayerInDynamicArea(playerid, AirportZone[2]))
			{
				PlayAudioStreamForPlayer(playerid, AUDIOFILE_PATH "/airport.mp3");
			}
			MySetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLvl]);
			ToggleCriminalDanger(playerid, CriminalDanger[playerid]);
			IFace.ToggleGroup(playerid, IFace.INTERFACE, PlayerInfo[playerid][pInterface]);

			#if defined _player_achieve_included
				Achieve_Check(playerid);
			#endif
			FirstSpawn[playerid] = false;
		}
		else
		{
			#if defined _inventory_in_hands_included
				Inv.UpdateThingInHand(playerid);
			#endif

			#if defined _inventory_acsr_included
				Acsr.UpdatePlayerAcsr(playerid);
			#endif

		//	money
			if(GetPVarInt(playerid, "DeathMoney"))
			{
				MySetPlayerMoney(playerid, GetPVarInt(playerid, "DeathMoney"));
				DeletePVar(playerid, "DeathMoney");
			}
		//	Система захвата зон
			if(IsGang(PlayerInfo[playerid][pFaction]) && InGangZone[playerid] >= 0)
			{
				SetTimerEx("gzgodmode", 500, false, "ii", playerid, 8);
			}
			SetTimerEx("MyUnfreezePlayer", 1500, false, "i", playerid);
		}
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		UpdatePlayerWeather(playerid);
		UpdatePlayerTime(playerid);
	}
	else
	{
		MyUnfreezePlayer(playerid);
		SetTimerEx("FixRegAnim", 500, false, "i", playerid);
	}
	DeletePVar(playerid, "AC:Spawn:BlockCheck");
	return true;
}

/*flags:testcam(CMD_DEVELOPER);
CMD:testcam(playerid, params[])
{
	FirstSpawnCam(playerid, 0);
	return true;
}

Public: FirstSpawnCam(playerid, step)
{
	new Float:pos[3];
	GetPlayerPos(playerid, Arr3<pos>);
	switch(step)
	{
		case 0:
		{
			FadeColorForPlayer(playerid, 34, 139, 34, 150, 34, 139, 34, 40, 10);
			InterpolateCameraPos(playerid, pos[0], pos[1], pos[2] + 500.0, pos[0], pos[1], pos[2] + 5.0, 1000 * 30);
			InterpolateCameraLookAt(playerid, pos[0], pos[1], pos[2] - 50.0, pos[0], pos[1], pos[2] - 50.0, 1000 * 30);
			SetTimerEx("FirstSpawnCam", 2000, false, "dd", playerid, 1);
		}
		case 1:
		{
			FadeColorForPlayer(playerid, 34, 139, 34, 150, 34, 139, 34, 40, 10);
			InterpolateCameraPos(playerid, pos[0], pos[1], pos[2] + 200.0, pos[0], pos[1], pos[2] + 5.0, 1000 * 15);
			InterpolateCameraLookAt(playerid, pos[0], pos[1], pos[2] - 50.0, pos[0], pos[1], pos[2] - 50.0, 1000 * 15);
			SetTimerEx("FirstSpawnCam", 2000, false, "dd", playerid, 2);
		}
		case 2:
		{
			new Float:x = pos[0], Float:y = pos[1], Float:a;
			GetPlayerFacingAngle(playerid, a);
			GetXYInFrontOfPoint(x, y, a - 180.0, 3.0);

			FadeColorForPlayer(playerid, 34, 139, 34, 150, 34, 139, 34, 40, 10);
			InterpolateCameraPos(playerid, pos[0], pos[1], pos[2] + 30.0, x, y, pos[2] + 0.7, 1000 * 5);
			InterpolateCameraLookAt(playerid, pos[0], pos[1], pos[2] - 20.0, pos[0], pos[1], pos[2] + 0.7, 1000 * 5);
			SetTimerEx("FirstSpawnCam", 5000, false, "dd", playerid, 3);
		}
		case 3:
		{
			StopPlayerFade(playerid);
			SetCameraBehindPlayer(playerid);

			ToggleCriminalDanger(playerid, CriminalDanger[playerid]);
			if(RestTime > 0)	IFace.ToggleGroup(playerid, IFace.RESTART, true);
			MySetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLvl]);
			#if defined _player_achieve_included
				Achieve_Check(playerid);
			#endif

			MyUnfreezePlayer(playerid);
		}
	}
	return true;
}*/

Public: FixRegAnim(playerid)
{
	MyApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 0, 0, 1, 0);
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerNPC(playerid))	return true;

	gPlayerDeath[playerid] = true;

	#if defined _gang_gang_zones_included
		Gang.GZ_OnPlayerDeath(playerid, killerid, reason);
	#endif
	#if defined _police_core_included
		Police_OnPlayerDeath(playerid, killerid, reason);
	#endif
	// #if defined _job_core_included
	// 	Job.OnPlayerDeath(playerid, killerid, reason);
	// #endif

	#if defined _player_phone_included
		Phone_CancelCall(playerid);
	#endif
	#if defined	_job_job_taxi_included
		CancelUseTaxi(playerid);	// Очистка пассажирского такси
	#endif

	new string[256];
	new ShowWasted = true;
	if(AS_ElementNumber[playerid] == 0)	ShowWasted = false;
	if(IsPlayerLogged(killerid))
	{
		if(reason != WEAPON_COLLISION)
		{
			if(Anticheat.GetToggle())
			{
				if(GetDistanceBetweenPlayers(playerid, killerid) > 280)
				{
					format(string, sizeof(string), "подозревается в ложной смерти от %s[%d]", ReturnPlayerName(killerid), killerid);
					AC_PlayerMessage(playerid, string);
				    GiveAnticheatWarn(playerid, FAKE_KILL);
				}
			}
			PlayerInfo[killerid][pKills]++;
			FadeColorForPlayer(killerid, 65, 105, 225, 70, 255, 0, 0, 0, 5);	//	эффект синего экрана при убийстве
		}

		//	achievements
	#if defined _player_achieve_included	
		if(PlayerInfo[killerid][pKills] >= 100)			GivePlayerAchieve(killerid, ACHIEVE_KILLER);	//	Достижение 'Киллер'
		if(PlayerInfo[killerid][pAdmin] >= ADMIN_ADMIN)	GivePlayerAchieve(playerid, ACHIEVE_ADMINKILL);	//	Достижение 'Какая честь'
	#endif

	}

	//---	Clear game params
	MyChangePlayerWeapon(playerid, true);
	SetPlayerDrunkLevel(playerid, 0);
	MyHidePlayerDialog(playerid);
	Dialog_Close(playerid);
	MyDisablePlayerCheckpoint(playerid);
	IFace.HealthUpdate(playerid, 0.0);

	//---	set gamemode params
	if(PlayerInfo[playerid][pJailTime] < unixtime())
	{
		UpdatePlayerSkin(playerid, false);
	}

	//---	clear
	PlayerInfo[playerid][pSaveArmour] = 0.0; // [BT]
	PlayerInfo[playerid][pDeaths]++;
	gExpTime[playerid] = 0; gExpCount[playerid] = 0;
	PM_Type[playerid] = 0;	PM_Place[playerid] = 0;	// Очистка полицейской миссии
	gPlayerUsingLoopingAnim[playerid] = false;
	DeletePVar(playerid, "Player:Attack:Attacker");
	DeletePVar(playerid, "Player:JobPartner");

	_CarryDown(playerid);	//CarryClear(playerid);
	PlayerTextDrawHide(playerid, InfoBar);
	FlashPoliceZone(playerid, false);
	HideMissionInfo(playerid);
	CancelPlayerBerth(playerid);		// Очистка больничной койки
	CancelEditHomeObject(playerid);		// Очистка редактирование мебели (если редактируется)
	JailJobClear(playerid);				// Работа на зоне
	BenchpressClear(playerid);			// Отмена жима штанги
	ClearPlayerShooting(playerid);		// Отмена стрельбы в тире
	RaceLeave(playerid);				// Выход из гонки
	StoryMissionCancel(playerid);		// Выход из заставки
	RobberyClear(playerid, 2);			// Очистка ограбления магазина
	CancelMechanicDuty(playerid);		// Очистка работы механиком
	
	if(GetPVarInt(playerid, "Roped"))
    {
		DeletePVar(playerid, "Roped");
        for(new i = 0; i < ROPE_LENGTH; i++)
        	DestroyDynamicObject(RopeObjects[playerid][i]);
	}
	//---	Spawn
	if(ShowWasted)	TextDrawShowForPlayer(playerid, Wasted);
	SetPVarInt(playerid, "DeathMoney", MyGetPlayerMoney(playerid));
	SetPVarInt(playerid, "Player:SpawnHospital", true);
	SetPlayerSpawn(playerid);
	return true;
}

//	Callbacks: Vehicles
public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
		case 416, 523, 427, 490, 528, 407, 544, 596, 597, 598, 599, 601:
		{
			if(newstate)
			{
		    	VehInfo[vehicleid][vSiren] = true;
		    	SetVehicleFlasher(vehicleid, 3);
		    }
		    else
		    {
		    	VehInfo[vehicleid][vSiren] = false;
		    	SetVehicleFlasher(vehicleid, 0);
		    }
		    //UpdatePlayerColor(playerid);
		}
	}
    return true;
}

public OnVehicleSpawn(vehicleid)
{
	if(VehInfo[vehicleid][vSpawnDestroy])
	{
		MyDestroyVehicle(vehicleid);
		return 1;
	}

	setVehicleAlarm(vehicleid, false);
	SetVehicleEngine(vehicleid, false);
	SetVehicleBonnet(vehicleid, false);
	SetVehicleBoot(vehicleid, false);
	MySetVehicleHealth(vehicleid, 999);
    VehInfo[vehicleid][vRadio] = 0;
    VehInfo[vehicleid][vPlayers] = 0;
	VehInfo[vehicleid][vLights] = false;
	if(CarInfo[vehicleid][cType] != C_TYPE_PLAYER)
	{
		if(VehInfo[vehicleid][vLocked] == 1)	VehInfo[vehicleid][vLocked] = 0;
		VehInfo[vehicleid][vFuel] = GetVehicleMaxFuel(vehicleid);
	}
	UpdateVehicleParamsEx(vehicleid);

	// Тюнинг
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cSpoiler]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cHood]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cRoof]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cSideskirt]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cNitro]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cLamps]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cExhaust]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cWheels]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cHydraulics]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cFrontBumper]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cRearBumper]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cVentR]);
	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cVentL]);
	ChangeVehiclePaintjob(vehicleid, CarInfo[vehicleid][cPaintJob]);
	MyChangeVehicleColor(vehicleid, CarInfo[vehicleid][cColor1], CarInfo[vehicleid][cColor2]);

	//---	обнуление аренды
	if(VehInfo[vehicleid][vRentOwner] != 0)
	{
		new owner = GetPlayeridToUserID(VehInfo[vehicleid][vRentOwner]);
		if(owner != INVALID_PLAYER_ID && GetPVarInt(owner, "RentCar") == vehicleid)
			DeletePVar(VehInfo[vehicleid][vRentOwner], "RentCar");
		VehInfo[vehicleid][vRentOwner] = 0;
		UpdateVehicleLabel(vehicleid);
	}

	#if defined	_job_part_farmer_included
		//---	Удаление травы из фермерского пикапа
		if(g_FarmVehicleGrass[vehicleid])
		{
			for(new o = 0; o < MAX_VEHICLE_GRASS; o++)
			{
			    DestroyDynamicObject(g_FarmVGrassObjects[vehicleid][o]), g_FarmVGrassObjects[vehicleid][o] = 0;
			}
			g_FarmVehicleGrass[vehicleid] = 0;
		}
	#endif

	//--- Личные авто
	if(CarInfo[vehicleid][cID] > 0)
	{
		if(CarInfo[vehicleid][cX] == 0.0 && CarInfo[vehicleid][cY] == 0.0)
		{	// Штраф-стоянка
		    if(vehicleid == FineparkVehicle)
		    {	// FineparkTimer()
		        if(finepark_timer == 0)
		        {
					FineparkCount = 60;
					Finepark3DText = CreateDynamic3DTextLabel(" ", -1, 0.0, 0.0, 1.0, 15.0, INVALID_PLAYER_ID, vehicleid, 1, 0);
					finepark_timer = SetTimer("FineparkTimer", 1000, true);
					return 1;
				}
			    else
			    {
			        KillTimer(finepark_timer), finepark_timer = 0;
			        DestroyDynamic3DTextLabel(Finepark3DText), Finepark3DText = Text3D:INVALID_STREAMER_ID;
			        FineparkVehicle = 0;
			    }
		    }
		    new string[128];
			mysql_format(g_SQL, string, sizeof(string), "UPDATE `cars` SET `fine_park` = 1 WHERE `id` = '%d'", CarInfo[vehicleid][cID]);
			mysql_query_ex(string);
		    MyDestroyVehicle(vehicleid);// в конце
		    return 1;
		}
		else MySetVehiclePos(vehicleid, CarInfo[vehicleid][cX], CarInfo[vehicleid][cY], CarInfo[vehicleid][cZ], CarInfo[vehicleid][cA]);
	}
	//--- Блокировка дверей
	if(VehInfo[vehicleid][vLocked] != 999 && IsVehicleWithEngine(vehicleid) && VehInfo[vehicleid][vModelType] != MTYPE_NODOOR && VehInfo[vehicleid][vModelType] != MTYPE_MOTO)
	{
	    if(CarInfo[vehicleid][cType] == C_TYPE_PLAYER || (CarInfo[vehicleid][cType] == C_TYPE_DEFAULT && CarInfo[vehicleid][cOwnerID] == INVALID_PLAYER_ID))
	    {
			VehInfo[vehicleid][vLocked] = 1;
			UpdateVehicleParamsEx(vehicleid);
		}
	}

	#if defined	_job_part_delivery_included
		if(DeliveryVehLoadCount[vehicleid] > 0)
		{
			Delivery_Unload(vehicleid);
		}
	#endif

	// Машина праведника, перекрас
	if(vehicleid == TruthCar)
		ChangeVehiclePaintjob(TruthCar, 0);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(CarInfo[vehicleid][cID] != -1)
	{
		Inv.DeleteThing(CarInfo[vehicleid][cID], TAB_VEHICLE_TRUNK);
	}

	if(VehParams[GetVehicleModel(vehicleid) - 400][VEH_MTYPE] == MTYPE_HELIC)
	{
		foreach(LoginPlayer, i)
	    {
			if(GetPVarInt(i, "Roped") == vehicleid)
			{
				MyDisablePlayerCheckpoint(i);
				DeletePVar(i, "Roped");
				ClearAnimations(i);
				TogglePlayerControllable(i, true);
				for(new z = 0; z < ROPE_LENGTH; z++)
					DestroyDynamicObject(RopeObjects[i][z]);
			}
		}
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!gInModShop[playerid])
	{
		new string[128];
		format(string, 128, "[AdmWrn]: Подозрение %s[%d] в нелегальном тюнинге авто", ReturnPlayerName(playerid), playerid);
		SendAdminMessage(COLOR_LIGHTRED, string);
		return RemoveVehicleComponent(vehicleid, componentid);
	}
	switch(GetVehicleComponentType(componentid))
	{
		case CARMODTYPE_SPOILER: 		CarInfo[vehicleid][cSpoiler] = componentid;
		case CARMODTYPE_HOOD: 			CarInfo[vehicleid][cHood] = componentid;
		case CARMODTYPE_ROOF: 			CarInfo[vehicleid][cRoof] = componentid;
		case CARMODTYPE_SIDESKIRT: 		CarInfo[vehicleid][cSideskirt] = componentid;
		case CARMODTYPE_LAMPS: 			CarInfo[vehicleid][cLamps] = componentid;
		case CARMODTYPE_NITRO: 			CarInfo[vehicleid][cNitro] = componentid;
		case CARMODTYPE_EXHAUST: 		CarInfo[vehicleid][cExhaust] = componentid;
		case CARMODTYPE_WHEELS: 		CarInfo[vehicleid][cWheels] = componentid;
		case CARMODTYPE_HYDRAULICS: 	CarInfo[vehicleid][cHydraulics] = componentid;
		case CARMODTYPE_FRONT_BUMPER: 	CarInfo[vehicleid][cFrontBumper] = componentid;
		case CARMODTYPE_REAR_BUMPER: 	CarInfo[vehicleid][cRearBumper] = componentid;
		case CARMODTYPE_VENT_RIGHT: 	CarInfo[vehicleid][cVentR] = componentid;
		case CARMODTYPE_VENT_LEFT: 		CarInfo[vehicleid][cVentL] = componentid;
	}
	return true;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(!gInModShop[playerid])
	{
		AC_PlayerMessage(playerid, "подозревается в спец.перекраске авто");
	}
	CarInfo[vehicleid][cPaintJob] = paintjobid;
	UpdateVehicleStatics(vehicleid);
	return true;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(!gInModShop[playerid] && GetPVarInt(playerid, "AC:ChangePos:GTC") == 0)
	{
		if(!GetPlayerInterior(playerid))
		{
			new Float:pos[3];
			GetVehiclePos(vehicleid, Arr3<pos>);
			MySetPlayerPos(playerid, pos[0], pos[1], pos[2] + 1.0);
		}
		return AC_PlayerMessage(playerid, "подозревается в перекраске авто");
	}
	MyChangeVehicleColor(vehicleid, color1, color2);
	UpdateVehicleStatics(vehicleid);
	return true;
}

Public: OnEnterPaynspray(playerid, vehicleid)
{
	MyChangeVehicleColor(vehicleid, CarInfo[vehicleid][cColor1], CarInfo[vehicleid][cColor2]);
    return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    SetPVarInt(playerid, "AC:ChangePos:GTC", GetTickCount());
	if(enterexit == 1)
	{
		gInModShop[playerid] = 1;
		switch(interiorid)
		{
		    case 1:
		    {// Transfender
		        OldPlayerPos[playerid][0] = 617.5303;
				OldPlayerPos[playerid][1] = -1.9892;
				OldPlayerPos[playerid][2] = 1000.5622;
		    }
		    case 2:
		    {// Lowrider
		        OldPlayerPos[playerid][0] = 616.7833;
				OldPlayerPos[playerid][1] = -74.8150;
				OldPlayerPos[playerid][2] = 997.8661;
		    }
		    case 3:
		    {// Wheel Arch Angels
		        OldPlayerPos[playerid][0] = 615.2839;
				OldPlayerPos[playerid][1] = -124.2390;
				OldPlayerPos[playerid][2] = 997.5825;
		    }
		}
		MyGetPlayerPos(playerid, Arr3<gInModShopPos[playerid]>);
	}
	else
	{
		gInModShop[playerid] = 0;
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid > 0 && CarInfo[vehicleid][cID] > 0)
		{
			UpdateVehicleStatics(vehicleid);
			SendClientMessage(playerid, COLOR_GREEN, "[VEHICLE]: Тюнинг был успешно сохранен");
		}
        OldPlayerPos[playerid][0] = gInModShopPos[playerid][0];
		OldPlayerPos[playerid][1] = gInModShopPos[playerid][1];
		OldPlayerPos[playerid][2] = gInModShopPos[playerid][2];
	}
    /*if(enterexit)
    {
		new string[128];
		format(string, 128, "[AdmWrn]: Подозрение %s[%d] в нелегальном заезде в тюнинг", ReturnPlayerName(playerid), playerid);
		SendAdminMessage(COLOR_LIGHTRED, string);
    }*/
    return 1;
}

//------
public OnPlayerText(playerid, text[])
{
	if(IsPlayerLogged(playerid) == 0)
	{
	    return false;
	}
	if((gBlockAction[playerid] >> 2 & 1))
	{
		return false;
	}

	//--- Антифлуд
	new tick = GetTickCount();
	if(tick - StartupAntiflood[playerid] < 800)
	{
	    StartupAntiflood[playerid] = tick;
	    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Не так быстро.");
	    return false;
	}
	StartupAntiflood[playerid] = tick;

	new string[164];
	// Проверка на молчанку
	if(PlayerInfo[playerid][pMuteTime] > 0)
	{
	    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вы забанены в чате, осталось: %d сек.", PlayerInfo[playerid][pMuteTime]);
	    if(!random(2)) SetPlayerChatBubble(playerid, "Пытается что-то сказать...", COLOR_LIGHTRED, 20.0, 5000);
	    else		   SetPlayerChatBubble(playerid, "Мычит...", COLOR_LIGHTRED, 20.0, 5000);
	    return false;
	}
	
	// Мини игра в чате
	if(ChatGameTick && !strcmp(ChatGameRes, text, true))
	{
	    if(GetTickCount() - ChatGameTick < 800)
		{
			GivePlayerWarn(-1, playerid, "махинации с чат-играми");
			return false;
		}
	    new Float:time = float(GetTickCount() - ChatGameTick - GetPlayerPing(playerid)) / 1000;
	    new money = 60 + random(31) - floatround(1.2 * time);
	    //
	    SendFormatMessageToAll(COLOR_WHITE, string, PREFIX_GAME "%s дал правильный ответ '{33AA33}%s{FFFFFF}' за %0.3f сек и получил $%d.", ReturnPlayerName(playerid), ChatGameRes, time, money);
	#if defined _player_achieve_included
	    if(time <= 2.0)
	    {
	    	GivePlayerAchieve(playerid, ACHIEVE_METEOR);	//	Достижение 'Метеор'
	    }
	#endif
	    //
	    MyGivePlayerMoney(playerid, money);
	    KillTimer(ChatGameTimer);
		ChatGameTick = 0;
		return false;
	}

	// Смайлики в чате
	if(strlen(text) == 2)
	{
		for(new x = 0; x < sizeof Smiles; x++)
		{
		    if(strcmp(text, Smiles[x][0], true) == 0)
		    {
				PlayerAction(playerid, Smiles[x][1]);
		        return false;
		    }
		}
	}

	// Binds
	if(SendBindMessage(playerid, text))
	{
		return false;
	}

	/*switch(text[0])
	{	//	return false - обязательно (иначе в общий чат тоже выведет), true - запрещено
	    case '!':
	    {
	    	callcmd::s(playerid, text[1]);	// Повышенный голос
	    	return false;
	    }
	    case '*':
	    {
	    	callcmd::o(playerid, text[1]);	// Общий чат
	    	return false;
	    }
	    case '@', '"':
	    {
	    	if(GetPlayerAdmin(playerid) > 0)
	    	{
	    		format(string, 128, "@ | %s %s[%d]: %s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, text[1]);
				SendAdminMessage(COLOR_ADMIN, string, 1);
				return false;
	    	}
	    }
	    case '#','№':
	    {	// Командный чат
	    	if(IsGover(PlayerInfo[playerid][pFaction]))
	    	{
	    		callcmd::r(playerid, text[1]);
    			return false;
    		}
    		else
    		{
    			callcmd::f(playerid, text[1]);
    			return false;
    		}
	    }
	}*/
	//	Интервью на радио
	if(TalkingLive[playerid] != INVALID_PLAYER_ID)
	{
		SendFormatMessageToAll(COLOR_LIGHTGREEN, string, "[Прямой эфир] %s: %s", ReturnPlayerName(playerid), text);
		return false;
	}

	SendLocalMessage(playerid, -1, text);	// Локальный чат
	if(GetPVarInt(playerid, "Player:Call911") == 1)
	{
		if(strfind(text, "полиц", true) != -1)
		{
			new bool:find;
			foreach(LoginPlayer, p)
			{
				if(IsPoliceDuty(p))
				{
					find = true;
					break;
				}
			}
			//	вызывает полицию
			if(find)
			{
				SendClientMessage(playerid, COLOR_BLUE, "Оператор 911 говорит: Хорошо, вам нужна полиция, передаю информацию всем патрульным автомобилям.");

				SetPVarInt(playerid, "Player:Service:Police", 1);
				format(string, sizeof(string), "[R] Диспетчер HQ: {FFFFFF}%s[%d]{8D8DFF} вызывает полицию {FFFFFF}(Введите /acceptcall чтобы принять вызов)", ReturnPlayerName(playerid), playerid);
				SendPoliceMessage(COLOR_BLUE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Оператор 911 говорит: К сожалению, сейчас нет ни одного полицейского на дежурстве.");
			}

			DeletePVar(playerid, "Player:Call911");
		}
		else if(strfind(text, "меди", true) != -1 || strfind(text, "скорая", true) != -1 || strfind(text, "врач", true) != -1)
		{
			//	вызывает медиков
			new bool:find;
			foreach(LoginPlayer, p)
			{
				if(GetPVarInt(p, "Player:EmergyDuty"))
				{
					find = true;
					break;
				}
			}

			if(find)
			{
				SendClientMessage(playerid, COLOR_BLUE, "Оператор 911 говорит: Хорошо, вам нужны медики, передаю ваш вызов медицинской службе.");
			
				SetPVarInt(playerid, "Player:Service:Medic", 1);
				format(string, sizeof(string), "[R] Диспетчер HQ: {FFFFFF}%s[%d]{AA3333} вызывает скорую помощь {FFFFFF}(Введите /acceptcall чтобы принять вызов)", ReturnPlayerName(playerid), playerid);
				SendFactionMessage(F_EMERGY, COLOR_RED, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Оператор 911 говорит: К сожалению, сейчас нет ни одного медика на дежурстве.");
			}
			
			DeletePVar(playerid, "Player:Call911");
		}
		else
		{
			SendClientMessage(playerid, COLOR_BLUE, "Оператор 911 говорит: Я не понимаю что вы говорите, скажите кто вам нужен: полиция или медики?");
		}
	}
	//printf("[chat] %s", string);
	return false;
}

stock StopEnterVehicle(playerid, bool:push = false)
{
	new Float:pos[3];
	GetPlayerPos(playerid, Arr3<pos>);
	if(push) SetPlayerPos(playerid, pos[0] + 2.0, pos[1] + 2.0, pos[2]);
	else SetPlayerPos(playerid, Arr3<pos>);
	gEnteringVehicle[playerid] = 0;
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	OldSpeed[playerid] = 0;
	gEnteringVehicle[playerid] = GetTickCount();

	// Попытка сесть в транспорт издалека (лагает)
	/*new Float:MyPos[4], Float:CarPos[3], Float:Dist;
	MyGetPlayerPos(playerid, Arr4<MyPos>);
	GetVehiclePos(vehicleid, Arr3<CarPos>);
	Dist = GetDistanceFromPointToPoint(Arr3<MyPos>, Arr3<CarPos>);
	if(Dist > 15.0)
	{
	    new string[128];
		format(string, sizeof(string), "[AdmWrn]: %s[%d] попытался сесть в машину (#%d) с большого расстояния (%.1f м.)", ReturnPlayerName(playerid), playerid, vehicleid, Dist);
		SendAdminMessage(COLOR_LIGHTRED, string);
		MySetPlayerPos(playerid, Arr4<MyPos>);
		return 1;
	}*/

	// Попытка сесть в транспорт в наручниках
	if(PlayerCuffedTime[playerid])
	{
		ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0);
		return StopEnterVehicle(playerid);
	}

	// Попытка сесть в закрытый транспорт
	if(VehInfo[vehicleid][vLocked] == 999
		|| (CarInfo[vehicleid][cType] == C_TYPE_DEFAULT && 0 <= CarInfo[vehicleid][cOwnerID] < INVALID_PLAYER_ID && CarInfo[vehicleid][cOwnerID] != playerid)
		|| (IsVehicleWithEngine(vehicleid) && VehInfo[vehicleid][vLocked] == 1 && ispassenger == 0))
	{
		GameTextForPlayer(playerid, RusText("~r~Машина закрыта!", PlayerInfo[playerid][pRusifik]), 3000, 4);
		return StopEnterVehicle(playerid);
	}

	// Попытка сесть в автобус будуче в погоне
	else if(BusVehicle[0] <= vehicleid <= BusVehicle[2] && GetPlayerPursuit(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете ездить на общественном транспорте во время погони.");
		return StopEnterVehicle(playerid);
	}

	// Попытка сесть за руль недоступной машины
	if(!ispassenger && !IsAvailableVehicle(vehicleid, playerid))
	{
	    new string[128];
		if(CarInfo[vehicleid][cType] == C_TYPE_FACTION)
		{
			SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Этот транспорт принадлежит фракции %s.", GetFactionName(CarInfo[vehicleid][cOwnerID]));
			return StopEnterVehicle(playerid);
		}
		else if(CarInfo[vehicleid][cType] == C_TYPE_JOB)
		{
			SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Этот транспорт принадлежит работе %s.", GetJobName(CarInfo[vehicleid][cOwnerID]));
			return StopEnterVehicle(playerid);
		}
		else if(CarInfo[vehicleid][cType] == C_TYPE_PARTJOB)
		{
			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот транспорт доступен только рабочим.");
			return StopEnterVehicle(playerid);
		}
	}

	// Вертолет для десанта
	if(GetVehicleModel(vehicleid) == 548)
	{
	    if(PlayerInfo[playerid][pFaction] != F_ARMY)
	    {
	        new string[128];
		    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Этот транспорт принадлежит фракции %s.", GetFactionName(F_ARMY));
	        return StopEnterVehicle(playerid);
	    }
	    if(ispassenger)
	    {
			MySetPlayerPos(playerid, 315.9227,973.8602,1961.4672,360.0);
			SetPlayerVirtualWorld(playerid, vehicleid);
			SetPlayerInterior(playerid, 9);
			SetCameraBehindPlayer(playerid);

			MyGivePlayerWeapon(playerid, 46, 1);
			PlayerBusy{playerid} = true;
		}
	}
	return true;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	// Выход из гонки
	if(InRace[playerid])
	{
		RaceLeave(playerid);
		GameTextForPlayer(playerid, RusText("~r~Гонка завершена~n~~w~Покинут транспорт", isRus(playerid)), 3000, 4);
	}
	return true;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new string[128], vehicleid = GetPlayerVehicleID(playerid);

	#if defined	_job_job_theft_included
		Callback: Theft_OnPlayerStateChange(playerid, newstate, oldstate);
	#endif
	#if defined	_job_job_taxi_included
		Callback: Taxi_OnPlayerStateChange(playerid, newstate, oldstate);
	#endif

	//---	spawn
	if(oldstate == PLAYER_STATE_SPAWNED && PLAYER_STATE_ONFOOT <= newstate <= PLAYER_STATE_PASSENGER)
	{
		OnPlayerSpawnFinish(playerid);
	}
	// Контроль авто
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(Anticheat.GetToggle())
		{
			if(oldstate != PLAYER_STATE_ONFOOT && SpectateID[playerid] == INVALID_PLAYER_ID)
		    {
				format(string, sizeof(string), "[AdmWrn]: %s[%d] кикнут в подозрении на чит AutoDriver", ReturnPlayerName(playerid), playerid);
				SendAdminMessage(COLOR_LIGHTRED, string);
			    UpdateVehInfo();
			    return 1;
		    }
		    if(gEnteringVehicle[playerid] != -1 && VehInfo[vehicleid][vModelType] != MTYPE_BOAT && VehInfo[vehicleid][vModelType] != MTYPE_TRAIN)
		    {
			    new const diftime = GetTickCount() - gEnteringVehicle[playerid];
			    if(diftime < 500)
			    {
					//StopEnterVehicle(playerid, true);
					format(string, sizeof(string), "попытался моментально (%d мс) сесть в машину (#%d)", diftime, vehicleid);
					AC_PlayerMessage(playerid, string);
					return 1;
			    }
			    else if(diftime > 10000)
			    {	// EnterVehicle не срабатывал
					StopEnterVehicle(playerid, true);
					//format(string, sizeof(string), "попытался моментально сесть в машину (#%d)", vehicleid);
					//AC_PlayerMessage(playerid, string);
					return 1;
			    }
		    }
		    if(VehInfo[vehicleid][vLocked] == 999)
		    {
				if(VehInfo[vehicleid][vModelType] != MTYPE_TRAIN)
				{
					StopEnterVehicle(playerid, true);
					format(string, sizeof(string), "[AdmWrn]: %s[%d] нелегально сел в заблокированную машину (#%d)", ReturnPlayerName(playerid), playerid, vehicleid);
					SendAdminMessage(COLOR_LIGHTRED, string);
				}
				return 1;
		    }
		}
		//---	если ожидала респавна - отменяем т.к. кто-то сел
		if(VehInfo[vehicleid][vRespawnTime])	VehInfo[vehicleid][vRespawnTime] = 0;
	    //---
	    gEnteringVehicle[playerid] = 0;
	    gLastVehicle[playerid] = vehicleid;
		PlayerVehicle[playerid] = vehicleid;
		VehInfo[vehicleid][vPlayers]++;
		new radio = VehInfo[vehicleid][vRadio];
		new seat = GetPlayerVehicleSeat(playerid);
		if(seat == 0)		VehInfo[vehicleid][vDriver] = playerid;
		else if(seat == 1)	VehInfo[vehicleid][vCoDriver] = playerid;
		else if(seat == 2)	VehInfo[vehicleid][vLeftSeat] = playerid;
		else if(seat == 3)	VehInfo[vehicleid][vRightSeat] = playerid;
		if(radio > 0 && GetPVarInt(playerid, "Thing:RadioID") == 0)
		{
			PlayAudioStreamForPlayer(playerid, RadioList[radio - 1][RADIO_URL]);
			PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);// Fix
		}
		//if(VehInfo[vehicleid][vSiren])	UpdatePlayerColor(playerid);

		//---	Spectate
		foreach(Spectators, i)
		{
			if(SpectateID[i] == playerid) UpdatePlayerSpectate(i, SpectateID[i]);
		}

	}
	else
	{
		if(PlayerVehicle[playerid])
		{
			ExitVehicle(playerid);
			#if defined	_job_part_farmer_included
				KillTimer(g_FarmSpeedLimiter[playerid]);
			#endif	
		}

		//---	Spectate
		foreach(Spectators, i)
		{
			if(SpectateID[i] == playerid) UpdatePlayerSpectate(i, SpectateID[i]);
		}
	}

	///////////////////////////////////

    if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(oldstate == PLAYER_STATE_DRIVER)
		{
		    // Вышел в тюнинге
		    if(gInModShop[playerid])
		    {
		        MyPutPlayerInVehicle(playerid, gLastVehicle[playerid], 0);
				return 1;
		    }

			//	Автошкола
		    if(AS_ElementNumber[playerid])
		    {
		    	GameTextForPlayer(playerid, RusText("~r~Mission Failed~n~~w~Автомобиль покинут", isRus(playerid)), 5000, 4);
		    	AS_ReturnInAS(playerid);
			}

			//	Доставщики
		#if defined	_job_part_delivery_included
			Delivery_StartUnload(playerid, oldstate);
		#endif

		#if defined	_job_job_busdriver_included
			// Работа водителем автобуса
			if(BusDriverStatus[playerid] > 0 && gLastVehicle[playerid] == BusDriverVeh[playerid])
			{
			    BusDriverLeave[playerid] = 45;
			}
		#endif
		#if defined	_job_job_trucker_included	
		    // Работа Дальнобойщика
		    if(TruckerStatus[playerid] == 1 && gLastVehicle[playerid] == TruckerVeh[playerid])
		    {
		        TruckerStatus[playerid] = 2;
		        TruckerLeave[playerid] = 90;
		    }
		#endif

		#if defined	_job_job_theft_included
		    // Работа Автоугонщика
		    if(TheftStatus[playerid] == 2 && gLastVehicle[playerid] == TheftVehicle[playerid])
		    {
				TheftTimeOut[playerid] = 60;
		    }
		#endif
	        IFace.ToggleGroup(playerid, IFace.SPEEDO, false);
		}
	    gEnteringVehicle[playerid] = 0;
	}
	else if(newstate == PLAYER_STATE_DRIVER)
	{
		if(CarInfo[vehicleid][cType] == C_TYPE_FACTION
		|| CarInfo[vehicleid][cType] == C_TYPE_JOB
		|| CarInfo[vehicleid][cType] == C_TYPE_PARTJOB)
		{
			if(!IsAvailableVehicle(vehicleid, playerid))
			{
				return StopEnterVehicle(playerid, true);
			}
		}
	    SetPlayerArmedWeapon(playerid, 0);	// Система анти DriveBy
	    OldSpeed[playerid] = 0;
		if(IsVehicleWithEngine(vehicleid) == false)
		{	// Двигатель транспорта
			SetVehicleEngine(vehicleid, true);
		}
		else if(GetVehicleEngine(vehicleid))
		{
			IFace.ToggleGroup(playerid, IFace.SPEEDO, true);	
		}
		// Запрет въезда на подработку
		#if defined	_job_part_loader_included
	    	if(IsPlayerInDynamicArea(playerid, LoaderInfo[LE_AREAID]))
	    	{
				MySetVehiclePos(vehicleid, 2185.4512,-2261.8936,12.9963, 225.0);
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_WARNING "Сюда запрещено заезжать на транспорте");
				SetCameraBehindPlayer(playerid);
	    	}
    	#endif
		// Подсказка для старта двигателя
	    if(GetVehicleEngine(vehicleid) == false)
	    {
	    	ShowPlayerHint(playerid, "Зажмите и удерживайте ~g~Space~w~ или ~g~L.Shift~w~, чтобы завести двигатель");
	    	ShowPlayerHint(playerid, "Для включения фар нажмите ~g~Ctrl");
	        //SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Зажмите и удерживайте "SCOLOR_HINT"Space"SCOLOR_WHITE" или "SCOLOR_HINT"L.Shift"SCOLOR_WHITE", чтобы завести двигатель.");
	    	//SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Для включения фар нажмите "SCOLOR_HINT"Ctrl"SCOLOR_WHITE".");
	    }
		//	Если машина требует аренды
		if(VehInfo[vehicleid][vRentPrice] > 0 && !VehInfo[vehicleid][vRentOwner])
		{
			TogglePlayerControllable(playerid, false);
			return ShowDialog(playerid, DMODE_RENTCAR);
		}
		// Личный транспорт игроков
		if(CarInfo[vehicleid][cID] > 0 && CarInfo[vehicleid][cType] == C_TYPE_PLAYER)
		{
            if(CarInfo[vehicleid][cOwnerID] == PlayerInfo[playerid][pUserID])
            {
			    if(CarInfo[vehicleid][cX] == 0.0 && CarInfo[vehicleid][cY] == 0.0)
			    {
					ShowPlayerHint(playerid, "Припаркуйте транспорт~n~командой ~y~/veh park");
			    }
				GameTextForPlayer(playerid, RusText("~g~Ваш транспорт", isRus(playerid)), 3000, 4);
			}
            else GameTextForPlayer(playerid, RusText("~r~Чужой транспорт", isRus(playerid)), 3000, 4);
		}
		// Фракционная машина
		else if(CarInfo[vehicleid][cType] == C_TYPE_FACTION)
		{
		    if(CarInfo[vehicleid][cRank] > PlayerInfo[playerid][pRank])
		    {
			    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Этот автомобиль требует ранг: %s (%d).", GetRankName(CarInfo[vehicleid][cOwnerID], CarInfo[vehicleid][cRank]), CarInfo[vehicleid][cRank]);
		        return RemovePlayerFromVehicle(playerid);
		    }
			new model = GetVehicleModel(vehicleid);
		    switch(CarInfo[vehicleid][cOwnerID])
		    {
		        case F_POLICE:
		        {
					if(PM_Type[playerid] == 0)
					{
			   			ShowPlayerHint(playerid, "~w~Нажмите ~y~~k~~TOGGLE_SUBMISSIONS~ ~w~для остановки автомобилей на проверку", 5000);
					}
		        }
		        case F_ARMY:
		        {
		            if(model == 548)
		            {	// Вертолет для десанта
						ShowPlayerHint(playerid, "Нажмите ~y~~k~~TOGGLE_SUBMISSIONS~~w~, чтобы управлять грузовым люком для прыжков");
						if(VehInfo[vehicleid][vTrapState])	SendMissionMessage(playerid, "~b~Грузовой люк: ~w~Открыт");
						else								SendMissionMessage(playerid, "~b~Грузовой люк: ~w~Закрыт");
		            }
		        }
		    }
		}
		//	Рабочая машина
		else if(CarInfo[vehicleid][cType] == C_TYPE_JOB)
		{
		    switch(CarInfo[vehicleid][cOwnerID])
		    {	
		    	// Работа Водителей автобусов
		    	#if defined	_job_job_busdriver_included
			    	case JOB_BUSDRIVER:
			    	{
			    		if(BusDriverStatus[playerid] > 0)
					    {
					        if(BusDriverVeh[playerid] == vehicleid)
					        {
					            if(BusDriverStatus[playerid] == 1) Dialog_Show(playerid, Dialog:BusDriver_Route);

								HideMissionMessage(playerid);
								BusDriverLeave[playerid] = 0;
								return ShowPlayerHint(playerid, "Нажмите ~y~~k~~TOGGLE_SUBMISSIONS~ ~w~чтобы завершить работу и получить деньги", 10000);
					        }
					        else
					        {
							    SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Вы уже арендуете другой автобус.");
							    return RemovePlayerFromVehicle(playerid);
					        }
					    }
			    	}
		    	#endif
		    	// Работа Дальнобойщика
		    	#if defined	_job_job_trucker_included
			    	case JOB_TRUCKER:
			    	{
					    if(TruckerStatus[playerid] == 2 && vehicleid == TruckerVeh[playerid])
					    {	// Сел в потерянный тягач
					        TruckerStatus[playerid] = 1;
					        TruckerLeave[playerid] = 0;
							HideMissionMessage(playerid);
							return 1;
					    }
			    	}
			    #endif	
		    }
		}
		//	Подработка
		else if(CarInfo[vehicleid][cType] == C_TYPE_PARTJOB)
		{
			switch(CarInfo[vehicleid][cOwnerID])
		    {
		    	#if defined	_job_part_farmer_included
			    	case PART_FARMER:
			    	{
		    		 	new model = GetVehicleModel(vehicleid);
						if(model == 531 || model == 532)
						{
							//  Ограничение скорости на комбаинах и трактарах ферм
							g_FarmSpeedLimiter[playerid] = SetPlayerTimerEx(playerid, "FarmSpeedVehicleLimit", 100, 1, "df", playerid, 20.0);
						}
						else if(model == 478)
						{
		                    ShowPlayerHint(playerid, "~w~Для загрузки/разгрузки урожая необходимо открыть кузов (Кнопка ~y~2~w~)", 5000);
						}
			    	}
		    	#endif

		    	#if defined	_job_part_delivery_included
			    	case PART_DELIVERY:
			    	{
			    		// Работа доставщиков
						if(DeliveryVehLoadCount[vehicleid] > 0)
				    	{
							ProgressBarUpdate(playerid, DeliveryVehLoadDamage[vehicleid], 100, isRus(playerid) ? RusText("Ущерб") : "Damage");
				    	}
			    	}
		    	#endif
		    }
		}

		// Отсутствие документов
		if(IsAvailableVehicle(vehicleid, playerid) < VEH_AVAILABLE_CONTROL)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "У вас нет документов на эту машину - могут быть проблемы с ПОЛИЦИЕЙ!");
		}
		// Транспорт с двигателем, не считая тракторов и им подобных
		if(IsVehicleWithEngine(vehicleid) && VehInfo[vehicleid][vModelType] != MTYPE_NODOOR)
		{
		    // Отсутствие лицензии
		    if(!IsPlayerHaveLicThisVehicle(playerid, GetVehicleModel(vehicleid)))
		    {
		    	SendClientMessage(playerid, COLOR_YELLOW, "У вас могут быть проблемы с ПОЛИЦИЕЙ из-за отсутствия прав на вождение этого транспорта!");
		    }
			//if(PlayerInfo[playerid][pCarLic] == 0 && AS_ElementNumber[playerid] == 0)
			//{
			//	SendClientMessage(playerid, COLOR_YELLOW, "У вас могут быть проблемы с ПОЛИЦИЕЙ из-за отсутствия лицензии на вождение!");
			//}
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
		RearmedPlayerWeapon(playerid);	// Система анти DriveBy

		new driverid = VehInfo[vehicleid][vDriver];
		// Транспорт организаций
		if(CarInfo[vehicleid][cType] == C_TYPE_JOB)
		{
			// Работа Водителем автобуса
			#if defined	_job_job_busdriver_included
				if(CarInfo[vehicleid][cOwnerID] == JOB_BUSDRIVER && driverid != -1)
				{
				    if(MyGetPlayerMoney(playerid) < BusDriverPrice[driverid])
				    {
				        PlayerAction(playerid, "показывает проездной водителю.");
				    }
				    else
				    {
					    MyGivePlayerMoney(playerid, -BusDriverPrice[driverid]);
					    MyGivePlayerMoney(driverid, BusDriverPrice[driverid]);
				    }
				}
			#endif
		}
		//	миссии
		if(mission_id[playerid] == MIS_HOTEL && mission_step[playerid] == 1)
		{
			if(BusVehicle[0] <= vehicleid <= BusVehicle[3])
			{
				mission_step[playerid]++;
				mission_cpnum[playerid] = MySetPlayerCheckpoint(playerid, CPMODE_MISSION, 2232.9, -1159.8, 25.9, 2.0);
				if(!isRus(playerid))
				{
					MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Задание",
						"{FFFFFF}Доберитесь до отеля и пропишитесь в нем", "Понятно", "", 0);
				}
				else
				{
					SendMissionMessage(playerid, "Доберитесь до отеля и пропишитесь в нем", 5000, true);
				}
			}
		}
	}
	else if(newstate == PLAYER_STATE_SPECTATING)
	{
		IFace.ToggleGroup(playerid, IFace.INTERFACE, false);
	}
	else if(oldstate == PLAYER_STATE_SPECTATING)
	{
		if(!FirstSpawn[playerid])
		{
			IFace.ToggleGroup(playerid, IFace.INTERFACE, PlayerInfo[playerid][pInterface]);
		}
	}
	return true;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(IsPlayerNPC(playerid) || SpectateID[playerid] != INVALID_PLAYER_ID)
	{
		return true;
	}

	#if defined	_job_job_theft_included
		Callback: Theft_OnPlayerEnterDynamicArea(playerid, areaid);
	#endif
	#if defined	_job_part_farmer_included
		Callback: Farmer_OnPlayerEnterDynamicArea(playerid, areaid);
	#endif
	#if defined	_job_part_loader_included
		Callback: Loader_OnPlayerEnterDynamicArea(playerid, areaid);
	#endif

	new string[128];
	new pState = GetPlayerState(playerid);
	if(areaid == TrainingZone[0])
	{
		if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] == 1)
		{
			if(mission_step[playerid] == 0)
			{
				ApplyActorAnimation(ACTOR[A_NEWBIE], "ON_LOOKERS", "wave_loop", 4.0, 0, 0, 0, 0, 0);
				SendFormatMessage(playerid, COLOR_WHITE, string, "- %s кричит: Эй, привет! Я %s, иди сюда, есть дело..", ActorInfo[A_NEWBIE][a_Name], ActorInfo[A_NEWBIE][a_Name]);
				StoryMissionStart(playerid, MIS_SOURCE_TRAINING);
			}
		}
	}
	else if(areaid == gps_Data[playerid][GPS_CP])
	{	//	GPS
		HidePlayerGPSPoint(playerid);
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Достигнут пункт назначения");
	}
	else if(areaid == RaceZone)
	{
		if(pState == PLAYER_STATE_ONFOOT && !InRace[playerid])
		{
			if(RaceInfo[rStatus] == 0)
			{
				ShowPlayerHint(playerid, "В данный момент гонок не проходит, приходите позже!");
			}
	    	else if(RaceInfo[rStatus] == 1)
			{	// гоночки гоночки гоночки
			    TogglePlayerControllable(playerid, false);
			    ShowDialog(playerid, DRACE_JOIN);
			}
			else
			{
				ShowPlayerHint(playerid, "Гонка уже началась, приходите позже!");
			}
		}
	}

#if defined	_job_part_delivery_included
    else if(areaid == DeliveryLoadZone)
    {
    	Dialog_Show(playerid, Dialog:Delivery_Load);
    }
#endif

    //	Airport
    else if(areaid == AirportZone[0])
    {
    	if(NearAirportDoorPlayers == 0)
    	{
    		SetPVarInt(playerid, "Player:NearAirportDoor", 1);
    		MoveDynamicObject(AirportDoor[0], 1682.80, -2335.98, 12.56, 1.5);
    		MoveDynamicObject(AirportDoor[1], 1688.77, -2335.94, 12.56, 1.5);
    	}
    	NearAirportDoorPlayers++;
    }
    else if(areaid == AirportZone[1])
    {
    	MySetPlayerPosFade(playerid, FT_NONE, 1685.67, -2332.31, 13.55);
    }
    else if(areaid == AirportZone[2])
    {
    	if(GetPVarInt(playerid, "RegCutSceneState") == 0)
    	{
    		PlayAudioStreamForPlayer(playerid, AUDIOFILE_PATH "/airport.mp3");
    	}
    }

    //	Ammo Zones
    else if(AmmoZone[0] <= areaid <= AmmoZone[10])
    {
    	if(IsPoliceDuty(playerid))
    	{
    		SetPVarInt(playerid, "Player:InAmmoZone", areaid - AmmoZone[0]);
    		TextDrawShowForPlayer(playerid, TD_PressH);
    	}
    }
    else if(AmmoZone[11] <= areaid <= AmmoZone[ sizeof(AmmoZone) - 1 ])
    {
    	SetPVarInt(playerid, "Player:InAmmoZone", areaid - AmmoZone[0]);
		TextDrawShowForPlayer(playerid, TD_PressH);
    }

	else if(areaid == StripZone[0] || areaid == StripZone[1])
	{
		ShowPlayerHint(playerid, "Нажмите ~y~Enter~w~ чтобы кинуть $50");
	}
	else if(areaid == PoliceGateZone)
	{
		if(pState == PLAYER_STATE_DRIVER && PlayerInfo[playerid][pFaction] == F_POLICE)
		{
			ShowPlayerHint(playerid, "Используйте ~y~гудок ~w~чтобы открыть ворота");
		}
	}
	else if(GateInfoZone[0] <= areaid <= GateInfoZone[sizeof(GateInfoZone) - 1])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			ShowPlayerHint(playerid, "Используйте ~y~гудок ~w~чтобы открыть ворота");
		}
	}
	else if(areaid == PM_SearchZone2[playerid])
	{   // Полицейская миссия - Угон авто
	    MyDisablePlayerCheckpoint(playerid);
	    DestroyDynamicArea(PM_SearchZone2[playerid]), PM_SearchZone2[playerid] = INVALID_STREAMER_ID;
		SendClientMessage(playerid, COLOR_BLUE, "[R] Диспетчер HQ: {FFFFFF}Вы находитесь в зоне нахождения угнанного авто, продолжайте поиски");
	}
	else if(ATM_Zone[0] <= areaid <= ATM_Zone[ sizeof(ATM_Zone) - 1 ])
	{
		SetPlayerFacingAngle(playerid, ATM[ areaid - ATM_Zone[0] ][5] - 90.0);
		ShowDialog(playerid, DMODE_ATM);
	}
	else if(GetPVarInt(playerid, "Player:InGreenZone") == 0 && area_GreenZones[0] <= areaid <= area_GreenZones[sizeof(area_GreenZones) - 1])
	{	//  Check player in Green Zone
		SetPVarInt(playerid, "Player:InGreenZone", true);
		UpdatePlayerRadarColor(playerid);
	}
	return true;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(IsPlayerNPC(playerid) || SpectateID[playerid] != INVALID_PLAYER_ID)
	{
		return true;
	}
    else if(areaid == AirportZone[0])
    {
    	if(NearAirportDoorPlayers > 0)
    	{
    		NearAirportDoorPlayers--;
	    	if(NearAirportDoorPlayers == 0)
	    	{
	    		MyMoveDynamicObject(AirportDoor[0], 1684.27, -2335.98, 12.56, 1.5, -1000.0, -1000.0, -1000.0);
				MyMoveDynamicObject(AirportDoor[1], 1687.27, -2335.94, 12.56, 1.5, -1000.0, -1000.0, -1000.0);
	    	}
    	}
    	DeletePVar(playerid, "Player:NearAirportDoor");
    }

#if defined	_job_part_loader_included
    else if(areaid == LoaderInfo[LE_ZONE])
	{
		if(Job.GetPlayerNowWork(playerid) == PART_LOADER)
		{
			new v = GetPlayerVehicleID(playerid);
			if(v)	MySetVehiclePos(v, 2179.59, -2275.98, 13.22, 315.0);
			else 	MySetPlayerPos(playerid, 2187.02, -2263.53, 13.45, 45.0);
			SendClientMessage(playerid, COLOR_WHITE, PREFIX_WARNING "Чтобы уехать - сначала завершите работу");
		}
	}
#endif

#if defined	_job_part_farmer_included
	else if(areaid == FarmZone)
	{
		if(Job.GetPlayerNowWork(playerid) == PART_FARMER)
		{
			new v = GetPlayerVehicleID(playerid);
			if(v)	MySetVehiclePos(v, -1050.24, -1194.91, 128.78, 180.0);
			else 	MySetPlayerPos(playerid, -1053.72, -1195.09, 129.05, 93.98);
			SendClientMessage(playerid, COLOR_WHITE, PREFIX_WARNING "Чтобы уехать - сначала завершите работу");
		}
	}
#endif

    else if(areaid == AirportZone[2])
    {
	    StopAudioStreamForPlayer(playerid);
    }
    else if(area_GreenZones[0] <= areaid <= area_GreenZones[sizeof(GreenZones) - 1])
    {
	    if(GetPVarInt(playerid, "Player:InGreenZone"))
	    {
	    	new bool:in_gz = false;
	    	for(new z = 0; z < sizeof(area_GreenZones); z++)
	    	{
	    		if(IsPlayerInDynamicArea(playerid, area_GreenZones[z]))
	    		{
	    			in_gz = true;
	    			break;
	    		}
	    	}
	    	if(in_gz == false)
	    	{
	    		DeletePVar(playerid, "Player:InGreenZone");
	    		UpdatePlayerRadarColor(playerid);
	    	}
    	}
	}

	else if(AmmoZone[0] <= areaid <= AmmoZone[ sizeof(AmmoZone) - 1 ])
    {
    	if(!GetPVarInt(playerid, "Player:HintPressH"))
    	{
    		TextDrawHideForPlayer(playerid, TD_PressH);
    	}
    	DeletePVar(playerid, "Player:InAmmoZone");
    }
	return true;
}

// public OnPlayerEnterRaceCheckpoint(playerid)
public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	if(IsPlayerNPC(playerid) || SpectateID[playerid] != INVALID_PLAYER_ID)
	{
		return true;
	}

	#if defined	_job_job_busdriver_included
		Callback: BusDriver_OnPlayerEnterDRaceCP(playerid, checkpointid);
	#endif

	return 1;
}

// public OnPlayerEnterCheckpoint(playerid)
public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(IsPlayerNPC(playerid) || SpectateID[playerid] != INVALID_PLAYER_ID)
	{
		return true;
	}
	new string[128];
	if(showDebug[playerid])
	{
		SendFormatMessage(playerid, -1, string, "checkpointid = %d, gCheckpoint = %d", checkpointid, gCheckpoint[playerid]);
	}

	// OnPlayerEnterCheckpoint(playerid) // OnPlayerEnterDynamicCP(playerid, checkpointid)
	//------------------------[Личные Чекпоинты]--------------------------------
	if(checkpointid == gCheckpoint[playerid])
	{
		//	Чтоб не прятать ЧП после подбора - return true, если без ретурна - будет пропадать
		switch(gType_CP[playerid])
		{
			case CPPOLICE_MISSION:
			{	// Полицейские миссии
				if(PM_Type[playerid] > 0)
		        {
					if(PM_Type[playerid] == 2 && PM_Step[playerid] == 1)
					{
					    new vehicleid = GetPlayerVehicleID(playerid);
					    if(IsCopCar(vehicleid) == 0)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Вы должны быть в полицейской машине.");
					    }
						TogglePlayerControllable(playerid, false);
						SetTimerEx("MyUnfreezePlayer", 500, false, "i", playerid);
						SendFormatMessage(playerid, COLOR_BLUE, string, "[R] %s %s: {FFFFFF}Докладываю: подозреваемый доставлен, 10-8.", GetPlayerRank(playerid), ReturnPlayerName(playerid));
						PoliceMissionComplete(playerid, COST_PER_WANTED * 2);
					}
					else if(PM_Type[playerid] == 3 && PM_Step[playerid] == 2)
					{
						SendFormatMessage(playerid, COLOR_BLUE, string, "[R] %s %s: {FFFFFF}Угнанная машина найдена, высылайте эвакуатор.", GetPlayerRank(playerid), ReturnPlayerName(playerid));
						PoliceMissionComplete(playerid, COST_PER_WANTED * 4);
					}
					else
					{
				        gPickupTime[playerid] = 5;
						ShowDialog(playerid, DMODE_POLICE_MISSION);
					}
				}
			}
			case CPPOLICE_ROPE:
			{	//	Спуск по веревке с вертолета
				if(GetPVarInt(playerid, "Roped") == 1)
			    {
					DeletePVar(playerid, "Roped");
			        ClearAnimations(playerid);
			        TogglePlayerControllable(playerid, 1);
			        for(new i = 0; i < ROPE_LENGTH; i++)
			        	DestroyDynamicObject(RopeObjects[playerid][i]);
				}
			}
			case CPMODE_MISSION:
			{
				if(mission_id[playerid] == MIS_NONE)
				{
					return 1;
		        }
		        else if(mission_id[playerid] == MIS_HOTEL)
		        {
		        	if(mission_step[playerid] == 1)
		        	{
		        		if(!isRus(playerid))
						{
							MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Задание",
								"{FFFFFF}Автобус скоро будет!", "Понятно", "", 0);
						}
						else
						{
							ShowPlayerHint(playerid, "Автобус скоро будет!");
						}
		        	}
		        }
		        else if(mission_id[playerid] == MIS_TRAINING)
		        {
		        	if(mission_step[playerid] == 1)
		        	{
		        		mission_step[playerid] = 2;
						mission_cpnum[playerid] = MySetPlayerCheckpoint(playerid, CPMODE_MISSION, 2232.9, -1159.8, 25.9, 2.0);
		        		if(!isRus(playerid))
		        		{
							format(string, sizeof(string), "{FFFFFF}Такси вызвано!\nВернитесь к %sу", ActorInfo[A_NEWBIE][a_Name]);
		        			MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Задание", string, "Понятно", "", 0);
		        		}
		        		else
		        		{
		        			ShowPlayerHint(playerid, "~g~Такси вызвано");
		        			format(string, sizeof(string), "Вернитесь к ~y~%sу", ActorInfo[A_NEWBIE][a_Name]);
		        			SendMissionMessage(playerid, string, 5000, true);
		        		}
		        		return true;
		        	}
		        }
			}

			#if defined	_job_job_trucker_included
				case CPJOB_TRUCKER:
				{
					new const vehicleid = GetPlayerVehicleID(playerid);
				    if(vehicleid != TruckerVeh[playerid])
				    {
				        return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Вы должны сидеть в своем тягаче.");
				    }
				    if(GetVehicleTrailer(vehicleid) != TruckerTrailer[playerid])
				    {
				       	return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Вы должны привезти требуемый прицеп.");
				    }
					Trucker_Complete(playerid);
			    }
			#endif

		    #if defined	_job_part_loader_included
		       	case CPJOB_LOADER:
		       	{	// Подработка грузчиком
	       		 	if(LoaderStatus[playerid])
			        {
			        	CarryDown(playerid);
			        }
				}
			#endif

			#if defined	_job_job_theft_included
				case CPJOB_AUTOTHEFT:
				{   // Работа автоугонщика
					Theft_EnterCP(playerid);
				    return true;
				}
			#endif
		}
		MyDisablePlayerCheckpoint(playerid);
	}
	//------------------------[Динамические Чекпоинты]--------------------------
    else if(checkpointid == CP_AUTOSCHOOL)			return ShowDialog(playerid, DMODE_AUTOSCHOOL);
    else if(checkpointid == CP_SHOOTING)			return ShowDialog(playerid, DMODE_SHOOTING);
    else if(checkpointid == CP_SEXSHOP)				return ShowDialog(playerid, DMODE_SEXSHOP);
    else if(checkpointid == CP_BANK)				return ShowDialog(playerid, DMODE_BANK);
    else if(checkpointid == CP_MOTEL)				return ShowDialog(playerid, DMODE_HOTEL);
    else if(checkpointid == CP_EXIT_TIR)
    {
    	if(p_isShooting{playerid})
    	{
			FinishPlayerShooting(playerid, true);
    	}
		else
		{
			MySetPlayerPosFade(playerid, FT_NONE, 286.23, -30.22, 1001.51, 0.0, false, GetPlayerInterior(playerid), (GetPlayerVirtualWorld(playerid) - playerid - 1000));
		}
    }
    else if(checkpointid == CP_DRUGSTORE)
    {
        if(IsGang(PlayerInfo[playerid][pFaction]))
		{	// Только для банд
			ShowDialog(playerid, DMODE_DRUGSTORE);
		}
    }
    else if(checkpointid == CP_GUNDEAL)
    {
    	if(IsMafia(PlayerInfo[playerid][pFaction]))//Job.GetPlayerJob(playerid) == JOB_GUNDEAL)
		{
			ShowPlayerHint(playerid, "~w~Для переработки металла выберите его в ~y~инвентаре~w~ и нажмите ~y~Использовать");
		}
    }
	else if(GraffitiCP[0] <= checkpointid <= GraffitiCP[sizeof GraffitiCP - 1])	// Система граффити
	{
	    new zone = GetPlayerGangZone(playerid);
   		if(GangZoneOwner[zone] != PlayerInfo[playerid][pFaction])
   		{
   		    ShowPlayerHint(playerid, "Начните разбрызгивать краску из балончика на стену");
   		}
	}
	///////	Остальные чекпоинты
	else
	{
		//  Работа на заводе зоны
		if(j_jobstep{playerid} == 1)
		{
			for(new i = 0; i < sizeof j_fJobPos; ++i)
			{
			    if(checkpointid == j_jobcp[i])
			    {
    	 			SetPVarInt(playerid, "jail_job_cp", i);
	                DestroyDynamicCP(j_jobcp[i]), j_jobcp[i] = INVALID_STREAMER_ID;

					j_jobstep{playerid}++;
					MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	                SetPlayerFacingAngle(playerid, j_fJobPos[i][3]);

					new object;
					switch(random(3))
					{
					    case 0: object = 2226;
					    case 1: object = 2103;
					    case 2: object = 2028;
					    default: object = 1718;
					}
					if(j_fJobPos[i][3] == 0.0)
					{
						j_JobObj[playerid] = CreateDynamicObject(object, j_fJobPos[i][0], j_fJobPos[i][1] + 0.6, j_fJobPos[i][2] - 0.05, 0.0, 0.0, 0.0);
					}
					else
					{
						j_JobObj[playerid] = CreateDynamicObject(object, j_fJobPos[i][0], j_fJobPos[i][1] - 0.6, j_fJobPos[i][2] - 0.05, 0.0, 0.0, 0.0);
					}
					RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND);
					SetPlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND, 18635, 14, 0.264531, 0.121060, 0.022172, 279.757507, 164.484985, 184.886245);
					SetPlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND + 1, 18644, 13, 0.334366, 0.015833, -0.035214, 294.913085, 188.347946, 235.000213);

					MyApplyAnimation(playerid, "INT_SHOP", "shop_cashier", 4.1, 1, 0, 0, 1, 11000);

					new bool:comb[5];
					_GenerateComb(sizeof(comb), comb);
					SetPlayerComb(playerid, COMB_JAILJOB, sizeof(comb), comb, true);
					return true;
			    }
			}
		}
	}
	return true;
}

public OnDynamicObjectMoved(objectid)
{
	#if defined	_job_part_loader_included
		Callback: Loader_OnDynamicObjectMoved(objectid);
	#endif

	#if defined	_job_part_farmer_included
   		Callback: Farmer_OnDynamicObjectMoved(objectid);
	#endif
	return true;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	if(IsPlayerNPC(playerid) || SpectateID[playerid] != INVALID_PLAYER_ID)
	{
		return true;
	}
	return true;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(IsPlayerNPC(playerid) || SpectateID[playerid] != INVALID_PLAYER_ID)
	{
		return true;
	}
	if(InRace[playerid])
	{
	    new string[128];
	    if(RaceCP[ pRaceCP[playerid] ][cp_Type] == 0)
	    {
	        pRaceCP[playerid] += 1;
		    //DisablePlayerRaceCheckpoint(playerid);
			ShowNextRaceCP(playerid, pRaceCP[playerid]);

			//format(string, 128, "~g~Checkpoint: ~w~%d/%d", pRaceCP[playerid], RaceInfo[cp_cache]);
			//GameTextForPlayer(playerid, string, 3000, 5);
	    }
	    else
	    {// Финиш
	    	SetVehicleSpeed(GetPlayerVehicleID(playerid), 5.0);

	        new bool:record = false;
			new result = GetTickCount() - RaceInfo[rtick];

			RaceInfo[rFinisher] += 1;
	        RaceLeave(playerid, true);
			ShowRaceResult(playerid, RaceInfo[rFinisher], result);

            if(1 <= RaceInfo[rFinisher] <= 3)
            {
				new finishname[20], prize;
                switch(RaceInfo[rFinisher])
                {
                    case 1:
					{
						finishname = "первым"; prize = RACE_PRIZE;
						if(RaceInfo[rRecord] == 0 || RaceInfo[rRecord] > result)
						{
						    record = true;
						    RaceInfo[rRecord] = result;
						    strput(RaceInfo[rRecordBy], ReturnPlayerName(playerid));

						    new query[128];
							mysql_format(g_SQL, query, sizeof query, "UPDATE `races` SET `record` = '%d', `recordby` = '%e' WHERE `id` = '%d'", RaceInfo[rRecord], RaceInfo[rRecordBy], RaceInfo[rID]);
							mysql_query_ex(query);
						}
					}
                    case 2: { finishname = "вторым"; prize = floatround(RACE_PRIZE / 2); }
                    case 3: { finishname = "третьим"; prize = floatround(RACE_PRIZE / 5); }
                }
                if(prize > 0)	format(string, 128, "WINNER!~n~~w~%d$", prize);
                else 			string = "LOSER!";
                GameTextForPlayer(playerid, string, 5000, 3);
				format(string, 128, "[Ивент]: Гонщик %s финишировал %s и выиграл %d$", ReturnPlayerName(playerid), finishname, prize);
				if(record == true) strcat(string, " (новый рекорд!)");
				MySendClientMessageToAll(COLOR_EVENT, string);
                MyGivePlayerMoney(playerid, prize);
            }
	        format(string, 128, "[Ивент]: Ваше место в гонке: %d/%d", RaceInfo[rFinisher], RaceInfo[rAllPlayers]);
	        SendClientMessage(playerid, COLOR_SERVER, string);
            if(RaceInfo[rPlayers] <= 0)
            {
				MySendClientMessageToAll(COLOR_EVENT, "[Ивент]: Гонка закончилась!");
				RaceStop();
            }
	    }
	}
	return true;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    if(redit_act[playerid] == 3)
    {
        if(redit_curid[playerid] > 0)
        {
	        new string[32];
	        format(string, 32, "Checkpoint: ~w~%d", redit_num[playerid]);
	        GameTextForPlayer(playerid, string, 3000, 4);
	        PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
        	redit_previd[playerid] = redit_curid[playerid];
	        redit_curid[playerid] = ShowPlayerEditCP(playerid, ++redit_num[playerid]);
        }
    }
	return true;
}
public OnObjectMoved(objectid)
{
	return true;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return true;
}

//public OnPlayerPickUpPickup(playerid, pickupid)
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    if(IsPlayerNPC(playerid) || SpectateID[playerid] != INVALID_PLAYER_ID || fade_Teleporting[playerid])
    {
    	return true;
    }
    if(gPickupTime[playerid] > 0 && (gPickupID[playerid] == (-1) || gPickupID[playerid] == pickupid))
    {
    	return true;
    }

	#if defined	_job_part_farmer_included
		Callback:Farmer_OnPlayerPickUpDPickup(playerid, pickupid);
	#endif
	#if defined	_job_part_delivery_included
		Callback:Delivery_OnPlayerPickUpDPickup(playerid, pickupid);
	#endif

    gPickupID[playerid] = pickupid;
    new vw = GetPlayerVirtualWorld(playerid);
    if(pickupid == TestPickup[playerid])
    {
        return SendClientMessage(playerid, COLOR_WHITE, "Подобран тестовый пикап!");
    }

#if defined	_job_part_delivery_included
    else if(pickupid == BoardPickup[1])
    {
    	Dialog_Show(playerid, Dialog:Delivery_Board);
    }
#endif

    else if(pickupid == AirportPickup)
    {
    	MySetPlayerPosFade(playerid, FT_NONE, 1685.67, -2340.74, 13.55, 180.0, true, 0, VW_AIRPORT);
    }
    else if(pickupid == NewbiePickup)
    {
    	if(Dialogid[playerid] == INVALID_DIALOGID)
    	{
    		ShowDialog(playerid, DMODE_NEWBIE);
    	}
    }
    else if(pickupid == MotelPickup)
    {
    	if(PlayerInfo[playerid][pRent] == -1)
    	{
    		MySetPlayerPosFade(playerid, FT_NONE, 2284.7, -1136.6, 1050.90, 90.0, false, 11, VW_HOUSE + playerid);
    	}
    	else if(PlayerInfo[playerid][pRent] == -2)
    	{
    		MySetPlayerPosFade(playerid, FT_NONE, 2264.0, -1140.6, 1050.63, 360.0, false, 10, VW_HOUSE + playerid);
    	}
    	else if(PlayerInfo[playerid][pRent] == -3)
    	{
    		MySetPlayerPosFade(playerid, FT_NONE, 2250.6, -1135.1, 1050.63, 178.5, false, 9, VW_HOUSE + playerid);
    	}
    	else
    	{
    		SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Вы не арендуете номер в этом отеле.");
    		gPickupTime[playerid] = 5;
    	}
    }
    else if(MRoomPickup[0] <= pickupid <= MRoomPickup[2])
    {
    	MySetPlayerPosFade(playerid, FT_HROOM_EXIT, 2227.24, -1148.64, 1029.8, 0.0, false, 15, VW_HOTEL);
    }
    else if(pickupid == WarehousePickup[0])
    {
        if(PlayerInfo[playerid][pFaction] == F_GROVE)
        {
	        SetPVarInt(playerid, "WH:faction", F_GROVE);
			ShowDialog(playerid, DWAREHOUSE_MAIN);
        }
    }
    else if(pickupid == WarehousePickup[1])
    {
        if(PlayerInfo[playerid][pFaction] == F_BALLAS)
        {
	        SetPVarInt(playerid, "WH:faction", F_BALLAS);
			ShowDialog(playerid, DWAREHOUSE_MAIN);
        }
    }
    else if(pickupid == WarehousePickup[2])
    {
        if(PlayerInfo[playerid][pFaction] == F_VAGOS)
        {
	        SetPVarInt(playerid, "WH:faction", F_VAGOS);
			ShowDialog(playerid, DWAREHOUSE_MAIN);
        }
    }
    else if(pickupid == WarehousePickup[3])
    {
        if(PlayerInfo[playerid][pFaction] == F_AZTECAS)
        {
	        SetPVarInt(playerid, "WH:faction", F_AZTECAS);
			ShowDialog(playerid, DWAREHOUSE_MAIN);
        }
    }
    else if(pickupid == WarehousePickup[4])
    {
        if(PlayerInfo[playerid][pFaction] == F_RIFA)
        {
	        SetPVarInt(playerid, "WH:faction", F_RIFA);
			ShowDialog(playerid, DWAREHOUSE_MAIN);
        }
    }
    else if(pickupid == WarehousePickup[5])
    {
        if(PlayerInfo[playerid][pFaction] == F_RUSMAF)
        {
	        SetPVarInt(playerid, "WH:faction", F_RUSMAF);
			ShowDialog(playerid, DWAREHOUSE_MAIN);
        }
    }
    else if(pickupid == WarehousePickup[6])
    {
        if(PlayerInfo[playerid][pFaction] == F_LCN)
        {
	        SetPVarInt(playerid, "WH:faction", F_LCN);
			ShowDialog(playerid, DWAREHOUSE_MAIN);
        }
    }
    else if(pickupid == WarehousePickup[7])
    {
        if(PlayerInfo[playerid][pFaction] == F_YAKUZA)
        {
	        SetPVarInt(playerid, "WH:faction", F_YAKUZA);
			ShowDialog(playerid, DWAREHOUSE_MAIN);
        }
    }
    else if(pickupid == CrimebankPickup[0])
    {
    	if(PlayerInfo[playerid][pFaction] == F_GROVE)
    	{
    		MyGivePlayerMoney(playerid, floatround(PlayerInfo[playerid][pCrimeWage]));
    		PlayerInfo[playerid][pCrimeWage] = 0.0;
    	}
    }
    else if(pickupid == CrimebankPickup[1])
    {
    	if(PlayerInfo[playerid][pFaction] == F_BALLAS)
    	{
    		MyGivePlayerMoney(playerid, floatround(PlayerInfo[playerid][pCrimeWage]));
    		PlayerInfo[playerid][pCrimeWage] = 0.0;
    	}
    }
    else if(pickupid == CrimebankPickup[2])
    {
    	if(PlayerInfo[playerid][pFaction] == F_VAGOS)
    	{
    		MyGivePlayerMoney(playerid, floatround(PlayerInfo[playerid][pCrimeWage]));
    		PlayerInfo[playerid][pCrimeWage] = 0.0;
    	}
    }
    else if(pickupid == CrimebankPickup[3])
    {
    	if(PlayerInfo[playerid][pFaction] == F_AZTECAS)
    	{
    		MyGivePlayerMoney(playerid, floatround(PlayerInfo[playerid][pCrimeWage]));
    		PlayerInfo[playerid][pCrimeWage] = 0.0;
    	}
    }
    else if(pickupid == CrimebankPickup[4])
    {
    	if(PlayerInfo[playerid][pFaction] == F_RIFA)
    	{
    		MyGivePlayerMoney(playerid, floatround(PlayerInfo[playerid][pCrimeWage]));
    		PlayerInfo[playerid][pCrimeWage] = 0.0;
    	}
    } 
    else if(pickupid == MechanicPickup)
    {
    	ShowDialog(playerid, DJOB_MECHANIC);
    }

#if defined	_job_part_delivery_included
    else if(pickupid == DeliveryPickup)
    {
    	Dialog_Show(playerid, Dialog:Delivery_Main);
    }
#endif

    else if(pickupid == PoliceDutyPickup)
	{
	    if(PlayerInfo[playerid][pFaction] == F_POLICE)
	    {
	    	new string[128];
	    	if(IsPoliceDuty(playerid))
	    	{
	    		UpdatePlayerSkin(playerid);
	    		DeletePlayerAcsr(playerid, ACSR_HAT);
	    		MyChangePlayerWeapon(playerid, false);
	    		PlayerAction(playerid, "положил значок и оружие в шкафчик");
	    		format(string, sizeof(string), "[R] %s %s: {FFFFFF}Ухожу с дежурства, прием.", GetPlayerRank(playerid), ReturnPlayerName(playerid));
	    		SendPoliceMessage(COLOR_BLUE, string);
	    		CopList_REMOVE(playerid);
	    	}
	    	else
	    	{
	    		new skins[] = { 71, 280, 281, 266, 265, 282, 283, 288 };
	    		MySetPlayerSkin(playerid, skins[ PlayerInfo[playerid][pRank] - 1 ]);
	    		//	прикрепляем фуражки/кепки
	    		DeletePlayerAcsr(playerid, ACSR_HELMET);
	    		/*if(2 <= PlayerInfo[playerid][pRank] <= 3)
	    		{
	    			//SetPlayerAcsr(playerid, ACSR_HAT, 18636, false);
	    			SetPlayerAcsrEx(playerid, ACSR_HAT, 18636, false, 2, 0.132, 0.048, 0.001999, 93.4, 94.400108, 0.0, 0.986, 1.054, 1.0);
	    		}
	    		else if(4 <= PlayerInfo[playerid][pRank] <= 5)
	    		{
	    			//SetPlayerAcsr(playerid, ACSR_HAT, 19521, false);
	    			SetPlayerAcsrEx(playerid, ACSR_HAT, 19521, false, 2, 0.149, -0.009, 0.0, 0.0, 0.0, 0.0, 1.0, 1.164, 1.144);
	    		}
	    		else if(PlayerInfo[playerid][pRank] == 6)
	    		{
	    			//SetPlayerAcsr(playerid, ACSR_HAT, 19520, false);
	    			SetPlayerAcsrEx(playerid, ACSR_HAT, 19520, false, 2, 0.148999, 0.006, 0.001, 0.0, 0.0, 0.0, 1.0, 1.096999, 1.182);
	    		}*/
				// Оружие
				//MyChangePlayerWeapon(playerid, true);
				MySetPlayerWeapon(playerid, 3, 1);
				/*if(PlayerInfo[playerid][pRank] == 1)
				{
					MyGivePlayerWeapon(playerid, 24, (GunParams[24][GUN_AMMO] * 2));
				}
				else if(PlayerInfo[playerid][pRank] == 2)
				{
					MyGivePlayerWeapon(playerid, 24, (GunParams[24][GUN_AMMO] * 4));
				}
				else if(PlayerInfo[playerid][pRank] == 3)
				{
					MyGivePlayerWeapon(playerid, 24, (GunParams[24][GUN_AMMO] * 4));
					MyGivePlayerWeapon(playerid, 25, (GunParams[25][GUN_AMMO] * 1));
				}
				else if(PlayerInfo[playerid][pRank] == 4)
				{
					MyGivePlayerWeapon(playerid, 24, (GunParams[24][GUN_AMMO] * 5));
					MyGivePlayerWeapon(playerid, 25, (GunParams[25][GUN_AMMO] * 2));
				}
				else if(PlayerInfo[playerid][pRank] == 5)
				{
					MyGivePlayerWeapon(playerid, 24, (GunParams[24][GUN_AMMO] * 5));
					MyGivePlayerWeapon(playerid, 25, (GunParams[25][GUN_AMMO] * 2));
					MyGivePlayerWeapon(playerid, 31, (GunParams[31][GUN_AMMO] * 1));
				}
				else if(PlayerInfo[playerid][pRank] == 6)
				{
					MyGivePlayerWeapon(playerid, 24, (GunParams[24][GUN_AMMO] * 5));
					MyGivePlayerWeapon(playerid, 25, (GunParams[25][GUN_AMMO] * 2));
					MyGivePlayerWeapon(playerid, 31, (GunParams[31][GUN_AMMO] * 2));
				}
				else if(PlayerInfo[playerid][pRank] == 7)
				{
					MyGivePlayerWeapon(playerid, 24, (GunParams[24][GUN_AMMO] * 5));
					MyGivePlayerWeapon(playerid, 25, (GunParams[25][GUN_AMMO] * 2));
					MyGivePlayerWeapon(playerid, 31, (GunParams[31][GUN_AMMO] * 2));
					MySetPlayerArmour(playerid, 100);
				}
				else if(PlayerInfo[playerid][pRank] == 8)
				{
					MyGivePlayerWeapon(playerid, 24, (GunParams[24][GUN_AMMO] * 5));
					MyGivePlayerWeapon(playerid, 25, (GunParams[25][GUN_AMMO] * 2));
					MyGivePlayerWeapon(playerid, 31, (GunParams[31][GUN_AMMO] * 2));
					MySetPlayerArmour(playerid, 100);
				}*/
				CopList_ADD(playerid);
				PlayerAction(playerid, "взял значок из шкафчика");
				format(string, sizeof(string), "[R] %s %s: {FFFFFF}Заступаю на дежурство, прием.", GetPlayerRank(playerid), ReturnPlayerName(playerid));
				SendPoliceMessage(COLOR_BLUE, string);
	    	}
	    	UpdatePlayerColor(playerid);
		    gPickupTime[playerid] = 3;
		}
	}
	else if(pickupid == HospitalDutyPickup)
	{
		if(PlayerInfo[playerid][pFaction] == F_EMERGY)
	    {
	    	if(GetPVarInt(playerid, "Player:EmergyDuty"))
	    	{
	    		DeletePVar(playerid, "Player:EmergyDuty");
	    		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND + 1);
	    	}
	    	else
	    	{
	    		SetPVarInt(playerid, "Player:EmergyDuty", 1);
	    		SetPlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND + 1, 11738, 6, 0.288, 0.014, 0.039, 0.0, -98.2, 0.0, 1.27, 0.82, 1.139);
	    	}
	    }
	    gPickupTime[playerid] = 3;
	}
	else if(pickupid == LawbookPickup)
	{
        new lstring[] =
			"{8D8DFF}Административные:{FFFFFF}\n\
			\t* Вождение без освещения (с 20ч до 6ч)\n\
			\t* Хулиганство\n\
			\t* Вождение без лицензии\n\
			\t* Вождение в пьяном виде\n\
			{8D8DFF}Уголовные:{FFFFFF}\n\
			\t* Ограбление магазина\n\
			\t* Оказание сопротивления\n\
			\t* Угон автотранспорта\n\
			\t* Перевозка преступника\n\
			\t* Убийство\n\
			\t* Побег из тюрьмы\n\
			\t* Проникновение в тюрьму\n";
		MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_LIST, "{000CFF}Свод законов San Andreas", lstring, "Закрыть", "", 0);
	    return true;
	}
	else if(pickupid == CopGuidePickup)
	{
		new lstring[1536];
		// Если записать в один lstring, то pawno крашится
	    strcat(lstring,
			"{8D8DFF}Обязанности:{FFFFFF}\n\
			\tВ задачи любого полицейского входит патрулирование и проверка гражданских\n\
			\tВремя от времени диспетчер сообщает о вызовах, которые вы можете принимать\n\
			\tВам ЗАПРЕЩАЕТСЯ угрожать и применять силу без приказа, либо без служебной формы\n");
		strcat(lstring,
			"{8D8DFF}Наказания:{FFFFFF}\n\
			\tВ случае проявления необоснованной агрессии (прицеливание, атака или убийство)\n\
			\tА именно, когда вы НЕ получали приказа или когда преступник НЕ сопротивлялся\n\
			\tВам будет сделан выговор - наберете ТРИ и вас понизят, или уволят, если вы кадет\n");
		strcat(lstring,
			"{8D8DFF}Зарплата и звания:{FFFFFF}\n\
			\tМинимальная зарплата полицейского фиксирована и зависит от вашего ранга\n\
			\tЧтобы получать больше фиксированной ставки - выполняйте полицейские миссии\n\
			\tПомимо зарплаты они дают опыт и открывая новые возможности\n");
		strcat(lstring,
			"{8D8DFF}Преследование:{FFFFFF}\n\
			\tПолицейский запрашивает остановку, нажав на кнопку 2 и ожидает действия в течение 30 секунд\n\
			\tЗатем он должен подойти к подозреваемому для проверки, выписки квитанции или ареста\n\
			\tЕсли подозреваемый сопротивляется, то нужно повторно нажать на кнопку 2, подняв розыск\n\
			\tКогда подозреваемый станет опасным преступником, то диспетчер разрешит открыть огонь\n\
			\tДругие полицейские так же могут присоединяться к погоне в случае сопротивления подозреваемого\n");
/*
		strcat(lstring,
			"{8D8DFF}Экзамен на сержанта:{FFFFFF}\n\
			\t* Каждый детектив перед повышением обязан пройти экзамен, но он временно недоступен!");
*/
		MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Инструктаж полицейского", lstring, "Закрыть", "", 0);
	    return true;
	}
	else if(pickupid == FineParkPickup)
	{
	    ShowDialog(playerid, DMODE_FINEPARK);
	    gPickupTime[playerid] = 3;
	}
	else if(CarSalonPickup_F <= pickupid <= CarSalonPickup_L)
	{
	    if(ChooseVehicleID[playerid] == 0)
	    {
	        ChooseVehicleID[playerid] = pickupid - CarSalonPickup_F + 1;
		    ChoosePlayerVehicle(playerid, 1);
	    }
	}
	else if(pickupid == StuffBankEnter)
	{
		gPickupID[playerid] = (-1);
	    gPickupTime[playerid] = 3;
	    if(!IsMafia(PlayerInfo[playerid][pFaction]))
	    {// [BT]
	        return ShowPlayerHint(playerid, "~r~Дверь закрыта на ключ");
	    }
	    MySetPlayerPos(playerid, 2148.3372,1605.5266,1001.4789,0.0);
	}
	else if(pickupid == StuffBankExit)
	{
		gPickupID[playerid] = (-1);
	    gPickupTime[playerid] = 3;
	    MySetPlayerPos(playerid, 2155.4954,1611.9150,993.6882,180.0);
	}
	else if(pickupid == StuffBankExit2)
	{
		gPickupID[playerid] = (-1);
	    gPickupTime[playerid] = 3;
	    MySetPlayerPos(playerid, 2136.6282,1609.4617,993.6882,270.0);
	}
	else if(pickupid == VentBankPickup)
	{
	    MySetPlayerPos(playerid, 2156.2219,1624.7319,996.6882,90.0);
	    SetCameraBehindPlayer(playerid);
	}
	else if(pickupid == GunDealPickup)
	{
		if(Dialogid[playerid] == INVALID_DIALOGID && IsMafia(PlayerInfo[playerid][pFaction]))//Job.GetPlayerJob(playerid) == JOB_GUNDEAL)
		{
			ShowDialog(playerid, DJOB_GUNDEAL_MATS);
		}
	}
	else if(pickupid == DrugDealPickup[0])
	{
		if(Dialogid[playerid] == INVALID_DIALOGID && IsMafia(PlayerInfo[playerid][pFaction]))//Job.GetPlayerJob(playerid) == JOB_DRUGDEAL)
		{
			ShowDialog(playerid, DJOB_DRUGDEAL_MATS);
		}
	}
	else if(pickupid == DrugDealPickup[1])
	{
		if(IsMafia(PlayerInfo[playerid][pFaction]))//Job.GetPlayerJob(playerid) == JOB_DRUGDEAL)
		{
			ShowPlayerHint(playerid, "~w~Для переработки травы выберите ее в ~y~инвентаре~w~ и нажмите ~y~Использовать");
		}
	}
	else if(pickupid == PrisonEatPickup)
	{
		if(PlayerInfo[playerid][pJailTime] <= 0)
			return true;
		if(LastPrisonStatus != 2)
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сейчас не обеденное время.");
		SetPlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND, 2216, 5, 0.032, 0.017, 0.413999, -105.70021, 23.399978, -1.100097);
		PlayerFoodHands[playerid] = 1;
		MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Введите "SCOLOR_HINT"/eat"SCOLOR_WHITE", чтобы съесть еду с подноса.");
	}
	else if(RingInfoPickup[0] <= pickupid <= RingInfoPickup[ sizeof(RingInfoPickup) - 1 ])
	{
		ShowDialog(playerid, DMODE_BOXINFO);
	}
	else if(GYMPickup[0] <= pickupid <= GYMPickup[1])
	{
		ShowDialog(playerid, DMODE_FSTYLE);
	}
	else if(j_matpickup[0] <= pickupid <= j_matpickup[1])
	{
	    if(PlayerInfo[playerid][pJailTime] <= 0 || j_jobstep{playerid})
			return true;

		if(LastPrisonStatus != 1)
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сейчас не рабочее время.");

	    //  берем материалы
	   	if(CarryUP(playerid, 2060, 0.044, 0.36, -0.049, 0.0, 90.0, 0.0))
	   	{
	   		j_jobstep{playerid} = 1;
	    	ShowPlayerHint(playerid, "~w~Отнесите материалы к одному из рабочих столов");
	   	}
		gPickupTime[playerid] = 3;
	}
	else if(pickupid == j_fFinalPickup) //  работа на зоне (завод)
	{
		gPickupTime[playerid] = 3;
	    if(PlayerInfo[playerid][pJailTime] <= 0)
	    {
		    return true;
	    }
        if(LastPrisonStatus != 1)
        {
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сейчас не рабочее время.");
        }
		if(j_jobstep{playerid} != 3 && j_jobstep{playerid} != 11)
		{
		    return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Сюда приносят готовую продукцию.");
		}
        j_jobstep{playerid} = 0;
        j_Storage++;
        UpdateJailStorage();
	    CarryDown(playerid);
	    if(PlayerInfo[playerid][pJailTime] > 30)
	    {
			PlayerInfo[playerid][pJailTime] -= 10;
			GameTextForPlayer(playerid, "-10 sec", 2000, 4);
		}
	}
	else if(pickupid == j_lStartPickup)	//  работа на зоне (грузчик)
	{
		gPickupTime[playerid] = 3;

	    if(PlayerInfo[playerid][pJailTime] <= 0 || j_jobstep{playerid})
	    {
			return true;
	    }
        if(LastPrisonStatus != 1)
        {
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сейчас не рабочее время.");
        }
		if(j_Storage > 0)
		{
			if(CarryUP(playerid, 2969, 0.009, 0.344, -0.024, 0.0, 90.0, 0.0))
			{
				j_jobstep{playerid} = 11;
	            j_Storage--;
	            UpdateJailStorage();
				ShowPlayerHint(playerid, "Отнесите ящик в грузовик у ворот");

	            j_MapIcon[playerid] = CreateDynamicMapIcon(576.1, -2674.1, 13.2, 0, 0xAA0000FF, -1, -1, playerid, 10000.0);
	            j_jobcp[playerid] = CreateDynamicCP(576.1, -2674.1, 13.2, 0.3, -1, 2, -1, 3.0);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Склад пуст.");
		}
	}
	else if(pickupid == j_lFinishPickup)
	{
		gPickupTime[playerid] = 3;
		if(PlayerInfo[playerid][pJailTime] <= 0)
		{
		    return true;
		}
        if(LastPrisonStatus != 1)
        {
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сейчас не рабочее время.");
        }
		if(j_jobstep{playerid} != 3 && j_jobstep{playerid} != 11)
		{
		    return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Сначала возьмите ящик на складе.");
		}
        j_jobstep{playerid} = 0;
        DestroyDynamicMapIcon(j_MapIcon[playerid]), j_MapIcon[playerid] = INVALID_STREAMER_ID;
	    CarryDown(playerid);
	    if(PlayerInfo[playerid][pJailTime] > 30)
	    {
			PlayerInfo[playerid][pJailTime] -= 10;
			GameTextForPlayer(playerid, "-10 sec", 2000, 4);
		}
	}
	else if(pickupid == mission_pickup[playerid])
	{
		if(mission_id[playerid] == MIS_HOTEL && mission_step[playerid] == 0)
		{
			DestroyDynamicPickup(mission_pickup[playerid]), mission_pickup[playerid] = INVALID_STREAMER_ID;
			MyApplyAnimation(playerid, "MISC", "Case_pickup", 4.1, 0, 0, 0, 0, 0);
			SetPlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND, 19624, 6, 0.071, 0.015, 0.022, 0.0, -99.0, -4.4, 1.0, 0.737, 1.0);
			mission_step[playerid]++;
			mission_cpnum[playerid] = MySetPlayerCheckpoint(playerid, CPMODE_MISSION, 1693.20, -2312.80, 13.55, 2.0);
			if(!isRus(playerid))
			{
				MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Задание",
					"{FFFFFF}Отправляйтесь на остановку и ждите автобус до города\n\
					Автобусы ходят каждые пару минут!", "Понятно", "", 0);
			}
			else
			{
				SendMissionMessage(playerid, "Отправляйтесь на остановку и ждите автобус до города", 5000, true);
			}
		}
		return true;
	}
	//  ============
	else
	{
		//	Система бизнесов
		for(new b = 0; b < MAX_BUSINESSES; b++)
		{
			new Float:angle;
			GetPlayerFacingAngle(playerid, angle);
			if(pickupid == BizInfo[b][bPickup] && floatdif(BizInfo[b][bPos][3], angle) < 90.0)
			{
				#if defined	_job_part_delivery_included	
					if(Delivery_BringInBiz(playerid, b))
			    	{
						return true;
			       	}
			    #endif   	

	       		if(PickupedBiz[playerid] == b)
			    {
			        gPickupTime[playerid] = 3;
			        return true;
			    }
			    PickupedBiz[playerid] = b;
				ShowDialog(playerid, DBIZ_MAIN);
				return true;
			}
			else if(pickupid == BizInfo[b][bExPickup])
			{
				new query[128], Float:a;
			    format(query, sizeof(query), "SELECT `a` FROM %s.`locations` WHERE `id` = '%d'", MAIN_DB, BizInfo[b][bLocation]);
				new Cache:result = mysql_query(g_SQL, query);
				cache_get_value_name_float(0, "a", a);
				if(floatdif(a, angle) < 90.0)
				{
					//MySetPlayerPosFade(playerid, FT_NONE, Arr3<BizInfo[b][bPos]>, BizInfo[b][bPos][3] + 180, false, 0, 0);
					MySetPlayerPos(playerid, Arr3<BizInfo[b][bPos]>, BizInfo[b][bPos][3] + 180, 0, 0);
					gPickupTime[playerid] = 3;
				}
				cache_delete(result);
				RobberyFinish(playerid, 0, true);
				return true;
			}
		}
		// Система домов
		for(new h = 0; h < MAX_HOUSES; h++)
		{
		    if(pickupid == HousePickups[h])
		    {
		    	if(PickupedHouse[playerid] != (-1))
			    {
			        gPickupTime[playerid] = 3;
			        return true;
			    }
			    PickupedHouse[playerid] = h;
		        if(HouseInfo[h][hOwnerID])
				{
					IFace.ToggleGroup(playerid, IFace.HOUSE_ENTER_MENU, true);
					if(HouseInfo[h][hOwnerID] == PlayerInfo[playerid][pUserID])
					{
						TextDrawShowForPlayer(playerid, tdHouseButton1);
						TextDrawShowForPlayer(playerid, tdHouseButton4);
					}
					else
					{
						if(PlayerInfo[playerid][pRent] == HouseInfo[h][hID])
						{
							TextDrawShowForPlayer(playerid, tdHouseButton3);
						}
						else if(HouseInfo[h][hRentPrice] > 0)
						{
							TextDrawShowForPlayer(playerid, tdHouseButton2);
						}
						TextDrawShowForPlayer(playerid, tdHouseRob);
					}
					SelectTextDraw(playerid, COLOR_SERVER);
				}
				else
				{
					ShowDialog(playerid, DMODE_HOUSE);
				}
				return true;
			}
		}
		if(vw > 0 && GetPVarType(playerid, "Fur:HouseID") == PLAYER_VARTYPE_NONE)
		{
			for(new cl; cl < sizeof(InterCoords); cl++)
			{
			    for(new in; in < sizeof(InterCoords[]); in++)
			    {
			        if(pickupid == InterPickups[cl][in])
			        {
					    new Float:angle;
						GetPlayerFacingAngle(playerid, angle);
			            if(floatdif(InterCoords[cl][in][3], angle) < 90.0)
			            {
				            new h = FoundHouse(vw - VW_HOUSE);
				            gPickupID[playerid] = (-1);
				            gPickupTime[playerid] = 4;
				            MySetPlayerPos(playerid, HouseInfo[h][hX], HouseInfo[h][hY], HouseInfo[h][hZ], HouseInfo[h][hA] + 180.0, 0, 0);
				            //MySetPlayerPosFade(playerid, FT_NONE, HouseInfo[h][hX], HouseInfo[h][hY], HouseInfo[h][hZ], HouseInfo[h][hA] + 180.0, false, 0, 0);
				            SetCameraBehindPlayer(playerid);
			            }
			            return true;
			        }
				}
			}
		}
	// part of OnPlayerPickUpDynamicPickup
		//	система автосервисов
		for(new p = 0; p < sizeof(AutoRepairPos); p++)
		{
			if(pickupid == RepairPickup[p])
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
			    if(GetPlayerState(playerid) == 2 && IsVehicleWithEngine(vehicleid))
				{
				    new Float:Health;
				    GetVehicleHealth(vehicleid, Health);
					if(Health <= 250.0)
					{
						MySetVehicleHealth(vehicleid, 350.0);
			    		SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Пожааар!!! Горииим!!!");
			    		PlayerPlaySound(playerid, 7053, 0.0, 0.0, 0.0);
					}
					pRepair[playerid] = p;
				    TogglePlayerControllable(playerid, false);
				    ShowDialog(playerid, DMODE_REPAIR);
			    }
			    return true;
		    }
		}
    }
	return true;	// end of OnPlayerPickUpPickup
}

public OnBuyMenuResponse(playerid, id, button)
{
	switch(id)
	{
		case OBJECT_WEAPON:
		{
			if(button)
			{
				if(GetPVarType(playerid, "Player:InAmmoZone") == PLAYER_VARTYPE_INT)
				{
					if(!PlayerInfo[playerid][pGunLic])
					{
						return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "У вас нет лицензии на оружие.");
					}
					new ammo_zone = GetPVarInt(playerid, "Player:InAmmoZone");
					new item = ((ammo_zone >= sizeof(AmmuList)) ? (ammo_zone % sizeof(AmmuList)) : ammo_zone);
					new vw = GetPlayerVirtualWorld(playerid);
					new price;
					if(AmmuList[item] == 99)
					{
						if(MyGetPlayerArmour(playerid) >= 100)
						{
							return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "На вас уже надет бронежилет.");
						}
						price = floatround(200 * ((vw == VW_LSPD) ? 0.2 : 1.0));
						if(MyGetPlayerMoney(playerid) < price)
						{
						    return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "У вас не хватает денег для покупки бронежилета.");
						}
						MySetPlayerArmour(playerid, 100.0);
						return MyGivePlayerMoney(playerid, -price);
					}
					else
					{
						price = floatround(GunParams[ AmmuList[item] ][GUN_PRICE] * ((vw == VW_LSPD) ? 0.2 : 1.0));
						if(MyGetPlayerMoney(playerid) < price)
						{
						    return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "У вас не хватает денег для покупки этого оружия.");
						}
						new weapons, ammo;
					    GetPlayerWeaponData(playerid, GunParams[ AmmuList[item] ][GUN_SLOT], weapons, ammo);
						if(weapons > 0 && weapons != AmmuList[item] && ammo > 0)
						{
						    weaponid_new[playerid] = AmmuList[item];
						    SetPVarInt(playerid, "Player:WaponBuy:Price", price);
						    return ShowDialog(playerid, DMODE_GUNDEL);
						}
						if(ammo + GunParams[ AmmuList[item] ][GUN_AMMO] >= 1000)
						{
						    return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Вы купили максимальное количество патрон.");
						}
						//MyGivePlayerWeapon(playerid, AmmuList[item], GunParams[ AmmuList[item] ][GUN_AMMO]);
						Inv.GivePlayerWeapon(playerid, AmmuList[item], GunParams[ AmmuList[item] ][GUN_AMMO]);
					}
					if(vw != VW_LSPD)
					{
						new b = GetBizWhichPlayer(playerid);
				        if(b != INVALID_DATA && BizInfo[b][bType] == BUS_AMMO)
				        {
				        	BizSaleProds(b, price, 1);
				        }
					}
			        return MyGivePlayerMoney(playerid, -price);
				}
			}
			else
			{
				SetCameraBehindPlayer(playerid);
				if(GetPVarInt(playerid, "Player:HintPressH") || GetPVarType(playerid, "Player:InAmmoZone"))
				{
					TextDrawShowForPlayer(playerid, TD_PressH);
				}
			}
		}
	}
	HidePlayerBuyMenu(playerid);

	return true;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:Current = GetPlayerMenu(playerid);
	if(Current == KingRingMenu)
	{
		ShowMenuForPlayer(Current, playerid);
		new b = GetBizWhichPlayer(playerid);
        if(b != INVALID_DATA && BizInfo[b][bType] == BUS_EATERY)
        {
			new Float:health, nHealth, price;
			GetPlayerHealth(playerid, health);
			switch(row)
			{
				case 0: //	Пончики ($5)
				{
					price = 10;
					if(MyGetPlayerMoney(playerid) < price)
						return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "У вас недостаточно денег.");
					nHealth = 50;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 1: //	Пончики ($5)
				{
					price = 5;
					if(MyGetPlayerMoney(playerid) < 5)
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					nHealth = 25;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 2: //	Пончики ($5)
				{
					price = 5;
					if(MyGetPlayerMoney(playerid) < price)
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					nHealth = 20;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 3:	//	Газировка ($2)
				{
					price = 2;
					if(MyGetPlayerMoney(playerid) < price)
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					nHealth = 10;
					//MyApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1, 0, 0, 0, 0, 0);
				}
			}
			new eat = EatPlayer(playerid, nHealth);
			if(eat != 0)
			{
				if(eat == -1)
				{
					HideMenuForPlayer(Current, playerid);
					TogglePlayerControllable(playerid, true);
				}
				else MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				BizSaleProds(b, price, 1);
				MyGivePlayerMoney(playerid, -price);
			}
		}
	}
	else if(Current == BurgerShotMenu)
	{
		ShowMenuForPlayer(Current, playerid);
		new b = GetBizWhichPlayer(playerid);
        if(b != INVALID_DATA && BizInfo[b][bType] == BUS_EATERY)
        {
			new Float:health, nHealth, price;
			GetPlayerHealth(playerid, health);
			switch(row)
			{
				case 0: //	Moo Kids Meal (2$)
				{
					price = 2;
					if(MyGetPlayerMoney(playerid) < price){
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 10;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 1: //	Beef Tower (5$)
				{
					price = 5;
					if(MyGetPlayerMoney(playerid) < price){
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 25;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 2: //	Meat Stack (10$)
				{
					price = 10;
					if(MyGetPlayerMoney(playerid) < price){
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 50;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 3:	//	Salad Meal (5$)
				{
					price = 5;
					if(MyGetPlayerMoney(playerid) < price){
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 20;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
			}
			new eat = EatPlayer(playerid, nHealth);
			if(eat != 0)
			{
				if(eat == -1)
				{
					HideMenuForPlayer(Current, playerid);
					TogglePlayerControllable(playerid, true);
				}
				else MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				BizSaleProds(b, price, 1);
				MyGivePlayerMoney(playerid, -price);
			}
		}
	}
	else if(Current == PizzaMenu)
	{
		ShowMenuForPlayer(Current, playerid);
		new b = GetBizWhichPlayer(playerid);
        if(b != INVALID_DATA && BizInfo[b][bType] == BUS_EATERY)
        {
			new Float:health, nHealth, price;
			GetPlayerHealth(playerid, health);
			switch(row)
			{
				case 0:	//	Mini Pizza (2$)
				{
					price = 2;
					if(MyGetPlayerMoney(playerid) < price)
					{
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 10;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 1:	//	Big Pizza (5$)
				{
					price = 5;
					if(MyGetPlayerMoney(playerid) < price)
					{
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 20;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 2:	//	Double Pizza (10$)
				{
					price = 10;
					if(MyGetPlayerMoney(playerid) < price)
					{
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 50;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 3:	//	Water (2$)
				{
					price = 2;
					if(MyGetPlayerMoney(playerid) < price)
					{
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 10;
					//MyApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1, 0, 0, 0, 0, 0);
				}
			}
			new eat = EatPlayer(playerid, nHealth);
			if(eat != 0)
			{
				if(eat == -1)
				{
					HideMenuForPlayer(Current, playerid);
					TogglePlayerControllable(playerid, true);
				}
				else MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				BizSaleProds(b, price, 1);
				MyGivePlayerMoney(playerid, -price);
			}
		}
	}
	else if(Current == CluckinBellMenu)
	{
		ShowMenuForPlayer(Current, playerid);
		new b = GetBizWhichPlayer(playerid);
        if(b != INVALID_DATA && BizInfo[b][bType] == BUS_EATERY)
        {
			new Float:health, nHealth, price;
			GetPlayerHealth(playerid, health);
			switch(row)
			{
				case 0:	//	Little Meal (2$)
				{
					price = 2;
					if(MyGetPlayerMoney(playerid) < price){
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 10;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 1:	//	Big Meal (5$)
				{
					price = 5;
					if(MyGetPlayerMoney(playerid) < price){
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 20;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 2:	//	Huge Meal (10$)
				{
					price = 10;
					if(MyGetPlayerMoney(playerid) < price){
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 50;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
				case 3:	//	Salad Meal (10$)
				{
					price = 10;
					if(MyGetPlayerMoney(playerid) < price){
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
					}
					nHealth = 45;
					//MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				}
			}
			new eat = EatPlayer(playerid, nHealth);
			if(eat != 0)
			{
				if(eat == -1)
				{
					HideMenuForPlayer(Current, playerid);
					TogglePlayerControllable(playerid, true);
				}
				else MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
				BizSaleProds(b, price, 1);
				MyGivePlayerMoney(playerid, -price);
			}
		}
	}
	return true;
}

public OnPlayerExitedMenu(playerid)
{
	TogglePlayerControllable(playerid, true);
	return true;
}

public OnPlayerSelectMenuSelect(playerid, reponse, menuid, item)
{
	switch(menuid)
	{
		case SM_DRINK:
		{
			if(reponse)
			{
				new b = GetBizWhichPlayer(playerid);
		        if(b != INVALID_DATA && (BizInfo[b][bType] == BUS_CLUB || BizInfo[b][bType] == BUS_BAR || BizInfo[b][bType] == BUS_STRIP || BizInfo[b][bType] == BUS_CASINO))
		        {
			        new price;
			        if(playerSmokeCount{playerid})	ClearPlayerSmoke(playerid);
					switch(item)
					{
						case 0: //	Пиво ($6)
						{
							price = 6;
							if(MyGetPlayerMoney(playerid) < price)
							{
								SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "У вас недостаточно денег.");
								return false;
							}
							MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
							PlayerAction(playerid, "покупает бутылку пива.");
						}
						case 1:	//	Водка ($10)
						{
							price = 10;
							if(MyGetPlayerMoney(playerid) < price)
							{
								SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "У вас недостаточно денег.");
								return false;
							}
							MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
							PlayerAction(playerid, "покупает бутылку водки.");
						}
						case 2:	//	Виски ($10)
						{
							price = 10;
							if(MyGetPlayerMoney(playerid) < price)
							{
								SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "У вас недостаточно денег.");
								return false;
							}
							MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
							PlayerAction(playerid, "покупает бутылку виски.");
						}
						case 3:	//	Шампанское ($15)
						{
							price = 15;
							if(MyGetPlayerMoney(playerid) < price)
							{
								SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "У вас недостаточно денег.");
								return false;
							}
							MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
							PlayerAction(playerid, "покупает бутылку шампанского.");
						}
						case 4:	//	Газировка ($2)
						{
							price = 2;
							if(MyGetPlayerMoney(playerid) < price)
							{
								SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "У вас недостаточно денег.");
								return false;
							}
							MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
							PlayerAction(playerid, "покупает банку газировки.");
						}
					}
					BizSaleProds(b, price, 1);
					MyGivePlayerMoney(playerid, -price);
					playerDrink{playerid} = item + 1;
					playerDrinkCount{playerid} = 5;
					return false;
				}
			}
			else
			{
				CancelSelectTextDraw(playerid);
			}
		}
		case SM_CLOTHE:
		{
			if(reponse)
			{
				ClothesItem[playerid] = item;

				if(item > 0)
				{
					InterpolateCameraPos(playerid, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_StartCamPos]>, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_FaceCamPos]>, 2000);
					InterpolateCameraLookAt(playerid, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_StartCamLookAt]>, Arr3<ClothesShopData[ ClothesShopID[playerid] ][csd_FaceCamLookAt]>, 2000);
				}

				ShowPlayerSelecter(playerid, SELECTER_CLOTHE_SHOP);
				//TextDrawShowForPlayer(playerid, tdChooseButton1);
				//TextDrawShowForPlayer(playerid, tdChooseButton2);
				//PlayerTextDrawShow(playerid, tdChoosePrice);
				
				ChoosePlayerClothes(playerid, 4);

				new string[20];
				new price = 0;
				if(ClothesShopID[playerid] == 2)
				{	// donate shop
					if(GetPlayerCoins(playerid) < price)	format(string, 20, "~r~%d_coins", price);
					else 									format(string, 20, "~y~%d_coins", price);
				}
				else
				{
					if(MyGetPlayerMoney(playerid) < price)	format(string, 20, "~r~%d$", price);
					else 									format(string, 20, "~g~%d$", price);
				}
				//PlayerTextDrawSetString(playerid, tdChoosePrice, string);
			}
			else
			{
				ClothesShopID[playerid] = 0;
				ClothesShopSel[playerid] = 0;
				CancelSelectTextDraw(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, true);
				//ReloadPlayerSkin(playerid);
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid) - playerid);
				DeletePVar(playerid, "Player:MenuBizID");
			}
		}
	}
	return true;
}

public OnPlayerClickSelecter(playerid, selecter, action)
{
	switch(selecter)
	{
		case SELECTER_CLOTHE_SHOP:
		{
			if(action == ACTION_SELECT)
			{
				ChoosePlayerClothes(playerid, 5);
			}
			else if(action == ACTION_CANCEL)
			{
				ChoosePlayerClothes(playerid, 0);
			}
			else if(action == ACTION_BACK)
			{
				ChoosePlayerClothes(playerid, 2);
			}
			else if(action == ACTION_NEXT)
			{
				ChoosePlayerClothes(playerid, 3);
			}
		}
	}
	return true;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	//---	Spectate
	foreach(Spectators, i)
	{
		if(SpectateID[i] == playerid)
		{
			UpdatePlayerSpectate(i, playerid);
			Timer_UpdatePlayerSpectate(i, playerid);
		}
	}
	return true;
}

Public: OnPlayerAimVehicle(playerid, vehicleid)
{
	if(PlayerInfo[playerid][pFaction] == F_POLICE && 22 <= GetPlayerWeapon(playerid) <= 33)
	{
		new targetid = VehInfo[vehicleid][vDriver];
		if(targetid != (-1))
		{
			StartPursuit(playerid, targetid);
		}
	}
	return true;
}

//	Keys
Public: OnPlayerClickSubmission(playerid)
{
	#if defined	_job_job_taxi_included
		Callback: Taxi_OnPlayerClickSubmission(playerid);
	#endif

	new pState = GetPlayerState(playerid);
	new vehicleid = GetPlayerVehicleID(playerid);
	if(pState == PLAYER_STATE_ONFOOT)	//	колесико мышки
	{
		/*if(GetPVarInt(playerid, "Police:Pursuit:Handsup") == 0 && PursuitStatus[playerid] > PS_NONE && PlayerCuffedTime[playerid] == 0)
		{
			if(GetPlayerWeapon(playerid) != 0)
			{
				ShowPlayerHint(playerid, "Чтобы поднять руки спрячьте оружие");
			}
			else
			{
				PursuitHandsup(playerid);
			}
		}
		else
		{*/
		if(PlayerInfo[playerid][pAnim] > 0)
		{
			MyApplyAnimation(playerid, PlayerAnims[ PlayerInfo[playerid][pAnim] ][PANIM_LIB], PlayerAnims[ PlayerInfo[playerid][pAnim] ][PANIM_NAME], 4.1, 0, 0, 0, 0, 0);
		}
		//}
	}
    else if(pState == PLAYER_STATE_DRIVER) // KEY_2
	{
		// Работа автоугонщика
	#if defined	_job_job_theft_included
		if(Job.GetPlayerJob(playerid) == JOB_THEFT && TheftStatus[playerid] == 0 && !IsAvailableVehicle(vehicleid, playerid)
		&& CarInfo[vehicleid][cType] == C_TYPE_DEFAULT && (VehInfo[vehicleid][vModelType] == MTYPE_NONE || VehInfo[vehicleid][vModelType] == MTYPE_MOTO || VehInfo[vehicleid][vModelType] == MTYPE_TRUCK))
		{
			Job.SetPlayerNowWork(playerid, JOB_THEFT);
			return true;
		}
	#endif

		
		if(CarInfo[vehicleid][cType] == C_TYPE_FACTION && CarInfo[vehicleid][cOwnerID] == PlayerInfo[playerid][pFaction])
	    {
			// Преследование на транспорте
			/*if(CarInfo[vehicleid][cOwnerID] == F_POLICE)
			{
				if(!IsPoliceDuty(playerid))
	    		{
	    			return ShowPlayerHint(playerid, "Для остановки транспорта вы должны быть на ~b~дежурстве");
	    		}
				new model = GetVehicleModel(GetPlayerVehicleID(playerid));
				if(PM_Type[playerid] == 0)
				{// Не выполняет задание
					new bool:founded, Float:curdist, Float:mindist, suspectid, vehid, mtype;
					foreach(LoginPlayer, i)
					{
						if(IsForce(PlayerInfo[i][pFaction]) || GetPlayerState(i) != 2) continue;
						//
						if(model == 497)
						{
							curdist = GetDistanceBetweenPlayers(playerid, i, true);
							if(curdist > 100)	continue;
						}
						else
						{
							curdist = GetDistanceBetweenPlayers(playerid, i);
							if(curdist > 50)	continue;
						}
						//
						vehid = GetPlayerVehicleID(i);
						//if(VehInfo[vehid][vWithEngine] == false) continue;
						mtype = VehInfo[vehid][vModelType];
						if(mtype == MTYPE_RC || mtype == MTYPE_TRAIN || mtype == MTYPE_BOAT || mtype == MTYPE_HELIC || mtype == MTYPE_PLANE) continue;
						//
						if(curdist < mindist || founded == false)
						{
							suspectid = i;
							mindist = curdist;
							founded = true;
						}
					}
					if(founded)
					{
						if(InGangZone[suspectid] >= 0 && PursuitStatus[suspectid] == PS_NONE)
						{
							return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете запросить остановку члена банды во время захвата территории.");
						}
						if(IsPlayerAFK(suspectid))
						{
							return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Подозреваемый находится в AFK, его нельзя остановить.");
						}
						new bool:wl_veh = false;
						foreach(LoginPlayer, i)
						{
						    if(IsPlayerInVehicle(i, vehid) && GetPlayerWantedLevel(i) > 0)
						    {
						        wl_veh = true; // В машине найден игрок с розыском
						        break;
						    }
						}
						if(!wl_veh && PursuitLastUNIX[suspectid] > gettime())
						{
						    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Совсем недавно этот автомобиль уже проверяли.");
						}
						if(PS_NONE < PursuitStatus[suspectid] < PS_CRIMINAL)
						{
							return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Помощь в задержании пока не требуется, но будьте на чеку.");
						}
						// Формируем задание
						if(!PursuitStatus[suspectid])
						{
							if(model == 497)
							{
								return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На вертолете можно только подключиться к погоне.");
							}
							PursuitTimer(suspectid);
							new sound = 15800;
							format(string, 128, "[%s %s:o< Это отделение полиции Лос-Сантос. Оставайтесь на месте!]", GetPlayerRank(playerid), ReturnPlayerName(playerid));
							//format(string, 128, "[%s %s:o< Водитель %s, прижмитесь к обочине и остановитесь]", GetPlayerRank(playerid), ReturnPlayerName(playerid), ReturnPlayerName(suspectid));
							SendRadiusMessage(playerid, 60.0, COLOR_YELLOW, string);
							PlayerPlaySound(playerid, sound, 0, 0, 0);
							PlayerPlaySound(suspectid, sound, 0, 0, 0);
						}
						else
						{
							format(string, 128, "[R] %s %s: {FFFFFF}Подключаюсь к погоне за %s, прием.", GetPlayerRank(playerid), ReturnPlayerName(playerid), ReturnPlayerName(suspectid));
							SendPoliceMessage(COLOR_BLUE, string);
						}
						if(CriminalDanger[suspectid])	format(string, 128, "~n~~n~Остановите ~r~%s ~w~любой ценой!", ReturnPlayerName(suspectid));
						else 							format(string, 128, "~n~~n~Задержите ~b~%s ~w~не применяя силы.", ReturnPlayerName(suspectid));
						// Подключаем всех копов в машине, из которой поступил запрос
						foreach(Cop, copid)
						{
						    if(PM_Type[copid] == 0 && GetPlayerVehicleID(copid) == vehicleid)
						    {
								PM_Type[copid] = 10;// Номер миссии (10 - преследование)
								PM_Place[copid] = suspectid;// ид подозреваемого
								PM_UNIX[copid] = gettime();// Время начала погони
								SendMissionMessage(copid, string, 0);// Вывод задания
							}
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости не найдено ни одного игрока.");
					}
					return true;
				}
				else if(PM_Type[playerid] == 10)
				{	// Ведет преследование подозреваемого
					new suspectid = PM_Place[playerid];
					if(GetDistanceBetweenPlayers(playerid, suspectid) > 50)
					{
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Подозреваемый слишком далеко, подъедьте ближе.");
					}
					if(PursuitStatus[suspectid] == PS_WAIT)
					{
						return ShowPlayerHint(playerid, "Требования выполнены, задержите подозреваемого");
					}
					if(IsPlayerInAnyVehicle(suspectid) == 0)
					{
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Подозреваемый вышел из машины, задержите его.");
					}
					new nowtick = GetTickCount();
					if(PursuitTickcount[suspectid] > nowtick)
					{
						format(string, 128, "Остановку уже запрашивали, до следующего раза: ~y~%d сек", 1+(PursuitTickcount[suspectid]-nowtick)/1000);
						return ShowPlayerHint(playerid, string);
					}
					new sound = 15800;
					format(string, 128, "[%s %s:o< Это отделение полиции Лос-Сантос. Оставайтесь на месте!]", GetPlayerRank(playerid), ReturnPlayerName(playerid));
					//if(!random(2))	format(string, 128, "[%s %s:o< Прижмитесь к обочине или мы будем вынуждены применить силу]", GetPlayerRank(playerid), ReturnPlayerName(playerid));
					//else 			format(string, 128, "[%s %s:o< Водитель %s, последнее предупреждение и мы открываем огонь]", GetPlayerRank(playerid), ReturnPlayerName(playerid), ReturnPlayerName(suspectid));
					SendRadiusMessage(playerid, 60.0, COLOR_YELLOW, string);
					PlayerPlaySound(playerid, sound, 0, 0, 0);
					PlayerPlaySound(suspectid, sound, 0, 0, 0);
					PursuitTickcount[suspectid] = nowtick + 15000;
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы выполняете задание, подробнее в /hq.");
				}
				return true;
			}*/
			if(CarInfo[vehicleid][cOwnerID] == F_ARMY)
			{
			    if(GetVehicleModel(vehicleid) == 548)
			    {	// Вертолет для десанта
					MoveVehicleTrap(playerid, vehicleid);
					return true;
			    }
			}
		}
		else if(CarInfo[vehicleid][cType] == C_TYPE_JOB)
		{
			switch(CarInfo[vehicleid][cOwnerID])
			{
			#if defined	_job_job_busdriver_included
				case JOB_BUSDRIVER:
				{
					if(Job.GetPlayerNowWork(playerid) == JOB_BUSDRIVER)
					{
						return Dialog_Show(playerid, Dialog:BusDriver_End);
					}
				}
			#endif
			#if defined	_job_job_trucker_included	
				case JOB_TRUCKER:
				{
				    if(Job.GetPlayerJob(playerid) == JOB_TRUCKER)
				    {
				    	return Dialog_Show(playerid, Dialog:Trucker_TrailerList);
					}
				}
			#endif

				case JOB_MECHANIC:
			    {
			    	if(Job.GetPlayerNowWork(playerid) != JOB_MECHANIC)
			        {
			            return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Выйдите на дежурство, чтобы принимать вызов.");
			        }
			        if(MechanicCall == (-1))
			        {
			            return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "За последнюю минуту никто не вызывал механика.");
			        }
			        if(MechanicStatus[playerid] > 0 || MechanicClientid[playerid] != INVALID_PLAYER_ID)
			        {
			            return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы уже приняли заказ.");
			        }
			        new string[128];
					format(string, sizeof(string), "* Механик {FFFFFF}%s[%d]{44B2FF} принял вызов клиента %s", ReturnPlayerName(playerid), playerid, ReturnPlayerName(MechanicCall));
					SendJobMessage(JOB_MECHANIC, COLOR_LIGHTBLUE, string);
				    format(string, sizeof(string), "~n~~n~~n~Клиент ~y~%s~w~ ожидает вас.", ReturnPlayerName(MechanicCall));
				    SendMissionMessage(playerid, string, 0);

			    	SendFormatMessage(MechanicCall, COLOR_LIGHTBLUE, string, "Механик {FFFFFF}%s{44B2FF} принял ваш вызов. Оставайтесь на месте!", ReturnPlayerName(playerid));
				    format(string, sizeof(string), "~n~~n~~n~Механик ~y~%s~w~ принял ваш вызов.", ReturnPlayerName(playerid));
			    	SendMissionMessage(MechanicCall, string);

					MechanicStatus[playerid] = 1;
					MechanicClientid[playerid] = MechanicCall;
			        MechanicCall = -1; MechanicCallTime = 0;
			        return true;
			    }
			}
		}
		else if(CarInfo[vehicleid][cType] == C_TYPE_PARTJOB)
		{
		#if defined	_job_part_farmer_included
			if(CarInfo[vehicleid][cOwnerID] == PART_FARMER)
			{
				//new farmid = FarmPlayer[playerid];
				new model = GetVehicleModel(vehicleid);
		        /*if(model == 531)
				{	//  трактор
				    if(gType_CP[playerid] != CPJOB_FARM)
				    {
						if(FarmInfo[farmid][fStatus] == FSTATUS_GROWTH)
						{
                   			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поле засеяно, ожидайте пока растения вырастут.");
						}
						else if(FarmInfo[farmid][fStatus] == FSTATUS_GATHER)
						{
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поле уже засеяно, используйте комбаин и пикап для сбора посевов.");
						}
						else if(FarmInfo[farmid][fWork] != (-1))
						{
						    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поле уже обрабатывается другим игроком.");
						}
						else
						{
							if(GetVehicleModel(GetVehicleTrailer(vehicleid)) != 610)
							{
								SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для засеивания прикрепите прицеп к трактору (NUM 2 или /tow)");
							}
							else
							{
								SendMissionMessage(playerid, "Засейте ~r~поле~w~ семенами.", 5000, true);
		                		MySetPlayerCheckpoint(playerid, CPJOB_FARM, Arr3<FarmGrassPos[farmid][ FarmInfo[farmid][fCount] ]>, 5.0);
							}
						}
						return true;
					}
				}
				else if(model == 532)
				{	//  комбаин
			     	if(gType_CP[playerid] != CPJOB_FARM)
				    {
					    if(FarmInfo[farmid][fStatus] == FSTATUS_GROWTH)
					    {
                   			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поле засеяно, ожидайте пока растения вырастут.");
					    }
					    else if(FarmInfo[farmid][fStatus] == FSTATUS_PLANTED)
					    {
					    	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поле еще не засеяно.");
					    }
					    else if(FarmInfo[farmid][fWork] != (-1))
					    {
						    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поле уже обрабатывается другим игроком.");
					    }
                        else
						{
							if(FarmInfo[farmid][fCount] < FarmInfo[farmid][fMaxCount])
							{
                        		SendMissionMessage(playerid, "Скосите посевы на ~r~поле~w~.", 5000, true);
                        		MySetPlayerCheckpoint(playerid, CPJOB_FARM, Arr3<FarmGrassPos[farmid][ FarmInfo[farmid][fCount] ]>, 5.0);
                                FarmInfo[farmid][fWork] = playerid;
							}
							else
							{
								SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Урожай уже скошен, используйте пикап для сбора.");
							}
						}
					}
				}
				else */
				if(model == 478)
				{	//  пикап
				    if(g_FarmPlayerVID[playerid] == vehicleid && g_FarmVehiclePoint[playerid])
				    {
						FarmDeleteVPoint(playerid);
				    }
				    else
				    {
				    	FarmCreateVPoint(playerid, vehicleid);
				    }
				}
				return true;
			}
		#endif		
		#if defined	_job_part_delivery_included
			if(CarInfo[vehicleid][cOwnerID] == PART_DELIVERY)
			{
				if(DeliveryVehLoadCount[vehicleid] > 0)
				{
					return Dialog_Show(playerid, Dialog:Delivery_Biz);
				}
			}
		#endif	
		}

		new mtype = VehInfo[vehicleid][vModelType];
		if(mtype != MTYPE_RC && mtype != MTYPE_TRAIN && mtype != MTYPE_BOAT && mtype != MTYPE_HELIC && mtype != MTYPE_PLANE)
		{
			ShowDialog(playerid, DMODE_GPS);
		}
	}
	else if(pState == PLAYER_STATE_PASSENGER)
	{
		if(GetPVarInt(playerid, "Roped") == 0 && VehParams[GetVehicleModel(vehicleid) - 400][VEH_MTYPE] == MTYPE_HELIC)
		{
			GetPlayerPos(playerid, Arr3<RopePos[playerid]>);
			MapAndreas_FindZ_For2DCoord(RopePos[playerid][0], RopePos[playerid][1], RopePos[playerid][3]);
			RopePos[playerid][4] = floatsub(RopePos[playerid][2], RopePos[playerid][3]);
			if(RopePos[playerid][4] >= ROPE_LENGTH)	ShowPlayerHint(playerid, "С этой высоты нельзя спуститься по веревке");
			else if(RopePos[playerid][4] <= 2)		RemovePlayerFromVehicle(playerid);
			else
			{
				for(new z = 0; z <= RopePos[playerid][4]; z++)
				    RopeObjects[playerid][z] = CreateDynamicObject(3004, RopePos[playerid][0], RopePos[playerid][1], floatsub(RopePos[playerid][2], z), 87.64, 342.135, 350.075);
				SetPVarInt(playerid, "Roped", vehicleid);
				SetPlayerPos(playerid, RopePos[playerid][0], RopePos[playerid][1], floatsub(RopePos[playerid][2], 2));
				SetPlayerVelocity(playerid, 0, 0, 0);
				ApplyAnimation(playerid, "ped", "abseil", 4.0, 0, 0, 0, 1, 0);
				SetTimerEx("SyncRopeAnim", 250, 0, "i", playerid);
				MySetPlayerCheckpoint(playerid, CPPOLICE_ROPE, RopePos[playerid][0], RopePos[playerid][1], floatsub(RopePos[playerid][3], 12), 20.0);
			}
		}
		//	Подключение к погони пассажиров-ментов
		/*else if(PlayerInfo[playerid][pFaction] == F_POLICE && PM_Type[playerid] == 0 && VehInfo[vehicleid][vDriver] >= 0)
		{
			new driver = VehInfo[vehicleid][vDriver];
			if(PlayerInfo[driver][pFaction] == F_POLICE && PM_Type[driver] == 10)
			{
				if(!IsPoliceDuty(playerid))
	    		{
	    			return ShowPlayerHint(playerid, "Для присоединения к погоне вы должны быть на ~b~дежурстве");
	    		}
	    		new suspectid = PM_Place[driver];
	    		if(PS_NONE < PursuitStatus[suspectid] < PS_CRIMINAL)
	    		{
	    			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Помощь в задержании пока не требуется, но будьте на чеку.");
	    		}
				// Формируем задание
				format(string, 128, "[R] %s %s: {FFFFFF}Подключаюсь к погоне за %s, прием.", GetPlayerRank(playerid), ReturnPlayerName(playerid), ReturnPlayerName(suspectid));
				SendPoliceMessage(COLOR_BLUE, string);
				PM_Type[playerid] = 10;			// Номер миссии (10 - преследование)
				PM_Place[playerid] = suspectid;	// ид подозреваемого
				PM_UNIX[playerid] = gettime();	// Время начала погони
				if(CriminalDanger[suspectid])	format(string, 128, "~n~~n~Остановите ~r~%s ~w~любой ценой!", ReturnPlayerName(suspectid));
				else 							format(string, 128, "~n~~n~Задержите ~b~%s ~w~не применяя силы.", ReturnPlayerName(suspectid));
				SendMissionMessage(playerid, string, 0);	// Вывод задания
			}
		}*/
	}
	return true;
}

Public: OnPlayerClickY(playerid)
{
	new newkeys, tmp;
	GetPlayerKeys(playerid, newkeys, tmp, tmp);
	if(HOLDING(KEY_SPRINT))		//	Пробел + Y
	{
		// Система запроса
		if(AskWhat[playerid])
		{
			OnPlayerYNStateChange(playerid, AskWhat[playerid], true);
			return true;
		}
	}
	else if(HOLDING(KEY_AIM))	//	Прицел + Y
	{
		// Меню взаимодействия
		new targetid = GetPlayerTargetPlayer(playerid);
		if(IsPlayerLogged(targetid))
		{	// Reaction with Players
			new _str[4];
			valstr(_str, targetid);
			return callcmd::action(playerid, _str);
		}

		targetid = GetPlayerTargetActor(playerid);
		if(targetid != INVALID_ACTOR_ID)
		{
			return OnActorReaction(playerid, targetid);
		}

		new tick = GetTickCount();
		if(tick - StartupAntiflood[playerid] < 800)
		{
		    StartupAntiflood[playerid] = tick;
		    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Не так быстро.");
		    return false;
		}
		else
		{
			targetid = GetNearVehicles(playerid);
			if(targetid > 0)	PlayerOpenVehicle(playerid, targetid);
		}
		StartupAntiflood[playerid] = tick;
		return true;
	}
	else
	{
		new pState = GetPlayerState(playerid);
		if(pState == PLAYER_STATE_ONFOOT)
		{	
			if(GetPVarType(playerid, "Player:InAmmoZone") == PLAYER_VARTYPE_INT)
			{
				new str[32];
				new vw = GetPlayerVirtualWorld(playerid);
				new ammo_zone = GetPVarInt(playerid, "Player:InAmmoZone");
				new item = ((ammo_zone >= sizeof(AmmuList)) ? (ammo_zone % sizeof(AmmuList)) : ammo_zone);
				new price;
				new Float:PlayerCameraPos[3],
					Float:PlayerCameraVector[3];
				GetPlayerCameraPos(playerid, Arr3<PlayerCameraPos>);
				GetPlayerCameraFrontVector(playerid, Arr3<PlayerCameraVector>);
				PlayerCameraVector[0] = PlayerCameraPos[0] + floatmul(PlayerCameraVector[0], 5.0);
				PlayerCameraVector[1] = PlayerCameraPos[1] + floatmul(PlayerCameraVector[1], 5.0);
				PlayerCameraVector[2] = PlayerCameraPos[2] + floatmul(PlayerCameraVector[2], 5.0);
				TextDrawHideForPlayer(playerid, TD_PressH);
				//	LSPD Ammo
				if(AmmuList[item] == 99)
				{
					price = floatround(200 * ((vw == VW_LSPD) ? 0.2 : 1.0));
					format(str, sizeof(str), "Бронежилет");
				}
				else
				{
					price = floatround(GunParams[ AmmuList[item] ][GUN_PRICE] * ((vw == VW_LSPD) ? 0.2 : 1.0));
					format(str, sizeof(str), "%s (%d пт)", GunParams[ AmmuList[item] ][GUN_NAME], GunParams[ AmmuList[item] ][GUN_AMMO]);
				}
				new string[64];
				format(string, sizeof(string), "%s~n~Цена: $%d", str, price);
				ShowPlayerBuyMenu(playerid, OBJECT_WEAPON, string, "Купить");
				if(ammo_zone == 0)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 310.00, -163.73, 1000.32, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 310.96, -160.33, 996.78, 1000);
				}
				else if(ammo_zone == 1)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 311.55, -163.67, 1000.36, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 310.00, -160.49, 996.83, 1000);
				}
				else if(ammo_zone == 2)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 311.74, -160.81, 1000.32, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 310.23, -164.37, 997.15, 1000);
				}
				else if(ammo_zone == 3)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 309.82, -161.10, 1000.31, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 311.72, -164.08, 996.77, 1000);
				}
				else if(ammo_zone == 4)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 314.39, -163.76, 1000.39, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 315.31, -160.35, 996.85, 1000);
				}
				else if(ammo_zone == 5)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 316.01, -163.69, 1000.39, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 314.55, -160.48, 996.85, 1000);
				}
				else if(ammo_zone == 6)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 315.98, -160.98, 1000.39, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 314.42, -164.17, 996.88, 1000);
				}
				else if(ammo_zone == 7)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 314.16, -161.06, 1000.39, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 316.10, -164.01, 996.86, 1000);
				}
				else if(ammo_zone == 8)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 310.02, -159.82, 1000.04, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 307.75, -156.32, 997.29, 1000);
				}
				else if(ammo_zone == 9)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 314.18, -159.41, 1000.72, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 312.01, -156.03, 997.75, 1000);
				}
				else if(ammo_zone == 10)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 317.93, -160.50, 1000.16, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 322.24, -157.50, 999.49, 1000);
				}
				//----
				else if(ammo_zone == 11)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 289.50, -35.35, 1002.19, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 292.54, -32.85, 999.11, 1000);
				}
				else if(ammo_zone == 12)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 289.47, -33.47, 1002.19, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 292.82, -35.58, 999.13, 1000);
				}
				else if(ammo_zone == 13)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 291.47, -34.45, 1002.19, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 288.29, -36.74, 999.08, 1000);
				}
				else if(ammo_zone == 14)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 291.62, -34.38, 1002.25, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 288.36, -32.55, 998.93, 1000);
				}
				else if(ammo_zone == 15)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 293.41, -34.34, 1002.27, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 296.62, -32.35, 999.00, 1000);
				}
				else if(ammo_zone == 16)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 293.42, -34.70, 1002.27, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 296.88, -35.43, 998.74, 1000);
				}
				else if(ammo_zone == 17)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 295.57, -34.53, 1002.36, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 292.52, -36.40, 998.87, 1000);
				}
				else if(ammo_zone == 18)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 295.63, -34.18, 1002.20, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 291.99, -33.04, 998.96, 1000);
				}
				else if(ammo_zone == 19)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 293.74, -38.50, 1002.46, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 293.71, -42.04, 998.92, 1000);
				}
				else if(ammo_zone == 20)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 299.43, -36.26, 1002.54, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 303.39, -35.73, 999.54, 1000);
				}
				else if(ammo_zone == 21)
				{
					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, 297.00, -37.70, 1002.21, 1000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, 301.27, -39.86, 1000.77, 1000);
				}
				return true;
			}
		}

		#if defined _player_phone_included
			if(Phone_GetStatus(playerid) == PHONE_CALL)
			{
				return callcmd::p(playerid, "");	//  accept call
			}
		#endif

		#if defined	_job_job_taxi_included
			Callback: Taxi_OnPlayerClickY(playerid);
		#endif

		// Полицейские миссии
		/*if(PlayerInfo[playerid][pFaction] == F_POLICE)
	    {
	    	if(!IsPoliceDuty(playerid))
	    	{
	    		return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Для принятия вызова вы должны быть на дежурстве.");
	    	}
	        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || IsCopCar(vehicleid) == 0)
			{
			    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вызов принимается только за рулем полицейской машины.");
			}
	        PoliceMissionAccept(playerid);
	    }
	    
	    else
	    {*/
	    //	inventory
	    callcmd::i(playerid, "");
	    //}
	}
	return true;
}

Public: OnPlayerClickN(playerid)
{
	new newkeys, tmp;
	GetPlayerKeys(playerid, newkeys, tmp, tmp);
	if(HOLDING(KEY_SPRINT))	//	Пробел+N
	{
		if(AskWhat[playerid])
		{	// Система запроса
			OnPlayerYNStateChange(playerid, AskWhat[playerid], false);
		}
	}
	else
	{
		#if defined _player_phone_included
			if(Phone_GetStatus(playerid) != PHONE_OFF)
			{
		 		return callcmd::h(playerid, "");	//  cancel call
			}
		#endif
	
		CancelPlayerBerth(playerid);
	}
	return true;
}

Public: OnPlayerClickH(playerid)
{
	new pState = GetPlayerState(playerid);
	if(pState == PLAYER_STATE_ONFOOT)
	{	// Меню взаимодействия
		new house = GetPlayerHouseID(playerid);
		new biz = GetBizWhichPlayer(playerid);
		if(house != (-1) && HouseInfo[house][hOwnerID] == PlayerInfo[playerid][pUserID])
		{
			ShowDialog(playerid, DHOME_MAIN);	// Reaction with House
	    }
	    else if(biz != INVALID_DATA && BizInfo[biz][bOwnerID] == PlayerInfo[playerid][pUserID])
	    {
	    	ShowDialog(playerid, DBIZ_MANAGE);	// Reaction with Biz
	    }
	    else
	    {
			ShowDialog(playerid, DMENU_MAIN);	// Reaction with youself
	    }
	}
	else if(pState == PLAYER_STATE_DRIVER)
	{
        if(IsVehicleWithEngine(GetPlayerVehicleID(playerid)))
		{
        	/*if(CarInfo[vehicleid][cType] == C_TYPE_FACTION && CarInfo[vehicleid][cOwnerID] == PlayerInfo[playerid][pFaction])
	    	{
	    		if(CarInfo[vehicleid][cOwnerID] == F_POLICE)
				{
					if(PM_Type[playerid] == 10)
					{	// Ведет преследование подозреваемого
						new suspectid = PM_Place[playerid];
						if(PS_NONE < PursuitStatus[suspectid] < PS_CRIMINAL)
						{
							return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Помощь в задержании пока не требуется.");
						}
						if(PursuitReinforcReload[playerid])
						{
							return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Подкрепление недавно уже запрашивалось.");
						}
						PursuitReinforc[playerid] = 1;
						return true;
					}
				}
	    	}*/
	    	ShowDialog(playerid, DMODE_RADIO);
        }
    }
    return true;
}

Public: OnPlayerClickAlt(playerid)
{
	new pState = GetPlayerState(playerid);
	if(pState == PLAYER_STATE_ONFOOT)
	{
		if(PlayerCuffedTime[playerid] == 0)
    	{
    		/*if(GetPVarInt(playerid, "Police:Pursuit:Handsup") && PursuitStatus[playerid] > PS_NONE && PlayerCuffedTime[playerid] == 0)
			{
				PursuitCancelHandsup[playerid] = 1;
				return true;
			}*/
			if(Job.GetPlayerJob(playerid) == JOB_THEFT)
        	{	//	Начало взлома центр замка
				new vehicleid = GetNearVehicles(playerid, 1);
	            if(vehicleid != 0)
	            {
		            if(IsAvailableVehicle(vehicleid, playerid) && CarInfo[vehicleid][cType] == C_TYPE_PLAYER) return true;
		            if(VehInfo[vehicleid][vPlayers] > 0)	return true;
	            	if(ItemStockPlayer(playerid, THING_PICKLOCK) == 0)
				    	return GameTextForPlayer(playerid, RusText("~y~У вас нет отмычек", isRus(playerid)), 2000, 4);
				    SetPVarInt(playerid, "StartLockTimer", SetPlayerTimerEx(playerid, "PlayerUseThing", 1000, 0, "dd", playerid, THING_PICKLOCK));
				    return true;
	            }
            }
          
			//	Арест
    		/*if(PlayerInfo[playerid][pFaction] == F_POLICE && IsPoliceDuty(playerid))
    		{
				foreach(LoginPlayer, i)
				{
		    		if(GetDistanceBetweenPlayers(playerid, i) < 2.0 && GetPlayerState(i) == PLAYER_STATE_ONFOOT)
		    		{
		    			if(CriminalDanger[i] || (PM_Type[playerid] == 10 && PM_Place[playerid] == i && (GetPlayerWantedLevel(i) > 3 || PursuitAllowArrest[i])))
		    			{
			    			if(GetPVarInt(i, "Police:Arrest") == 1)
			    			{
			    				return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Игрока уже арестовывает другой полицейский.");
			    			}
							if(GetPVarInt(i, "Police:Pursuit:Handsup"))
							{
								MyApplyAnimation(playerid, "INT_SHOP", "shop_loop", 4.1, 1, 0, 0, 0, 0);
							}
							else if(PlayerCuffedTime[i])
							{
								MyApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 0, 1, 1, 1, 0);
							}
							else
							{
								return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Игрок должен поднять руки или быть оглушен.");
							}
							PursuitArest[playerid] = 1;
							PursuitArestPlayer[playerid] = i;
							SetPVarInt(i, "Police:Arrest", 1);
							GameTextForPlayer(i, "~r~A ~b~r ~r~r ~b~e ~r~s ~b~t", 500, 3);
							GameTextForPlayer(playerid, "~r~A ~b~r ~r~r ~b~e ~r~s ~b~t", 500, 3);
							return true;
						}
					}
		    	}
	    	}*/
    	}
	}
	return true;
}

Public: OnPlayerClickEnter(playerid)
{
	new pState = GetPlayerState(playerid);
	if(pState == PLAYER_STATE_ONFOOT)
    {
    	// Подбор вещей с земли
    	if(callcmd::throw(playerid, "999"))	
        {
        	return true;
        }
        if(Inv.GetPlayerNearTrashcan(playerid) != INVALID_DATA)
        {
        	ShowPlayerInventory(playerid, TYPE_TRASHCAN);
        	return true;
        }

    	//  попытка сесть в закрытое авто
        if(GetPlayerComb(playerid) == COMB_NONE)
        {
			new v = GetNearVehicles(playerid, 1);// Подбор авто для взлома (закрытое, и т.п.)
            if(v)
            {
				if(!IsAvailableVehicle(v, playerid) && CarInfo[v][cType] != C_TYPE_PLAYER && Job.GetPlayerJob(playerid) == JOB_THEFT)
				{
					if(VehInfo[v][vPlayers] == 0)
					{
	            		SetPVarInt(playerid, "StartLockTimer", SetPlayerTimerEx(playerid, "BreakCar", 1000, 0, "ddd", playerid, BREAK_CAR_B_GLASS, 0));
						SetPVarInt(playerid, "LastLockCar", v);
					}
				}
				else
				{
					GameTextForPlayer(playerid, RusText("~r~Машина закрыта!", PlayerInfo[playerid][pRusifik]), 3000, 4);
				}
				return true;
            }
		}

		if(Button_OnPlayerClickEnter(playerid))
		{
			return true;
		}

        // Открытие дверей
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 320.41678,1023.88660,1951.0))
		{	// Аварийная кнопка в интерьере вертолета (Армия)
			if(MyApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 8.0, 0, 0, 0, 0, 0))
			{
		    	MoveVehicleTrap(playerid, GetPlayerVirtualWorld(playerid));
			}
			return true;
			//PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);
		}

        if(robbery_biz[playerid] >= 0)// && robbery_offerid[playerid] == playerid) // [bt]
        {	// Ограбление магазина
        	new b = robbery_biz[playerid], Float:pos[4];
        	GetActorPos(BizInfo[b][bActor], Arr3<pos>);
        	GetActorFacingAngle(BizInfo[b][bActor], pos[3]);
        	if(IsPlayerInRangeOfPoint(playerid, 3.0, Arr3<pos>))
        	{
        		robbery_timer[playerid] = SetTimerEx("Robbering", 900, 1, "i", playerid);
        		SetPlayerFacingAngle(playerid, pos[3] - 180.0);
				SetPlayerArmedWeapon(playerid, 0);
				TogglePlayerControllable(playerid, false);

				// Эффект камеры
				new string[128];
				mysql_format(g_SQL, string, sizeof(string), "SELECT `cam_x`, `cam_y`, `cam_z` FROM %s.`locations` WHERE `id` = '%d'", MAIN_DB, BizInfo[b][bLocation]);
				new Cache:result = mysql_query(g_SQL, string);
				new Float:cam_x, Float:cam_y, Float:cam_z;
			  	cache_get_value_index_float(0, 0, cam_x);
			   	cache_get_value_index_float(0, 1, cam_y);
			   	cache_get_value_index_float(0, 2, cam_z);
			    if(cam_x != 0.0 && cam_y != 0.0 && cam_z != 0.0)
			    {
			    	SetPlayerCameraPos(playerid, cam_x, cam_y, cam_z);
					GetPlayerPos(playerid, Arr3<pos>);
					SetPlayerCameraLookAt(playerid, Arr3<pos>);

					IFace.ToggleGroup(playerid, IFace.CAM_EFFECT, true);
			    }
			    cache_delete(result);
			    return true;
        	}
        }

        //	Деньги стриптизершам
        if(IsPlayerInDynamicArea(playerid, StripZone[0]) || IsPlayerInDynamicArea(playerid, StripZone[1]))
    	{
    	    if(MyGetPlayerMoney(playerid) < 50)
    	    {
    	        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
    	        return 1;
    	    }
    		if(random(2))	MyApplyAnimation(playerid, "STRIP", "PLY_CASH", 4.1, 0, 1, 1, 0, 0);
    		else 			MyApplyAnimation(playerid, "STRIP", "PUN_CASH", 4.1, 0, 1, 1, 0, 0);
    		MyGivePlayerMoney(playerid, -50);
    		new b = GetBizWhichPlayer(playerid);
    		if(b != INVALID_DATA && BizInfo[b][bType] == BUS_STRIP)
    		{
    			BizSaleProds(b, 50, 1);
    		}
    		return true;
    	}

    	//	Покер
	 	if(GetPVarType(playerid, "pkrTableID") == 0)
		{
			for(new t = 0; t < MAX_POKERTABLES; t++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.5, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ]))
				{
					if(PokerTable[t][pkrPass][0] != EOS)
					{
						/*if(!strcmp(params, PokerTable[t][pkrPass], false, 32))
						{
							JoinPokerTable(playerid, t);
						}
						else
						{
							//return SendClientMessage(playerid, COLOR_WHITE, "Usage: /jointable (password)");
							JoinPokerTable(playerid, t);
						}*/
					}
					else JoinPokerTable(playerid, t);
					return true;
				}
			}
		}
		for(new i = 0; i < MAX_CHIPMACHINES; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, ChipMachine[i][cmX], ChipMachine[i][cmY], ChipMachine[i][cmZ]))
			{
				GlobalPlaySound(6400, ChipMachine[i][cmX], ChipMachine[i][cmY], ChipMachine[i][cmZ]);
				return ShowDialog(playerid, DCHIPS_MENU);
			}
		}

    	//	Тренажеры
    	if(playerBenchUsed{playerid} && GymBlockKey{playerid} == false)
		{
			BenchpressEND(playerid);
		    return true;
		}
		else if(playerBenchUsed{playerid} == 0)
		{
		    for(new i = 0; i < sizeof BenchpressPos; i++)
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 2.5, Arr3<BenchpressPos[i]>))
		        {
		        	if(GetPlayerDrunkLevel(playerid) > 100)
		        	{
		        		return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Вы не можете тренироваться пьяным.");
		        	}
	        	 	if(BenchpressUsed[i])
	        	 	{
		                return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Данный тренажер занят.");
		            }
		            if(PlayerInfo[playerid][pPower] >= 100.0)
		            {
		            	return ShowPlayerHint(playerid, "Ваша сила прокачена на максимум");
		            }
					if(PlayerInfo[playerid][pTraining] >= MAX_TRAINING)
					{
						return ShowPlayerHint(playerid, "Вы достаточно потренеровались, приходите позже!");
					}
					IFace.ToggleGroup(playerid, IFace.TV_EFFECT, true);
					SetPlayerArmedWeapon(playerid, 0);

					//	======================	Set player camera pos and look 	======================
					new Float:CameraPos[3], Float:CameraLookAt[3], Float:PlayerCameraPos[3], Float:PlayerCameraVector[3];

					CameraPos[0] = BenchpressPos[i][0] + (1.4866 * floatsin(-BenchpressPos[i][3] + 70.34, degrees));
					CameraPos[1] = BenchpressPos[i][1] + (1.4866 * floatcos(-BenchpressPos[i][3] + 70.34, degrees));
					CameraPos[2] = BenchpressPos[i][2] - 0.3;

					CameraLookAt[0] = BenchpressPos[i][0] + (1.0049 * floatsin(-BenchpressPos[i][3] + 5.71, degrees));
					CameraLookAt[1] = BenchpressPos[i][1] + (1.0049 * floatcos(-BenchpressPos[i][3] + 5.71, degrees));
					CameraLookAt[2] = BenchpressPos[i][2] - 0.3;

					GetPlayerCameraPos(playerid, Arr3<PlayerCameraPos>);
					GetPlayerCameraFrontVector(playerid, Arr3<PlayerCameraVector>);
	                PlayerCameraVector[0] = PlayerCameraPos[0] + floatmul(PlayerCameraVector[0], 5.0);
					PlayerCameraVector[1] = PlayerCameraPos[1] + floatmul(PlayerCameraVector[1], 5.0);
					PlayerCameraVector[2] = PlayerCameraPos[2] + floatmul(PlayerCameraVector[2], 5.0);

					InterpolateCameraPos(playerid, Arr3<PlayerCameraPos>, Arr3<CameraPos>, 5000);
					InterpolateCameraLookAt(playerid, Arr3<PlayerCameraVector>, Arr3<CameraLookAt>, 5000);
	                MySetPlayerPos(playerid, Arr4<BenchpressPos[i]>);
	                //	==============================================================================

	                BenchpressUsed[i] = true;
					GymAnimState{playerid} = 0;
	             	GymBlockKey{playerid} = true;
					playerBenchStop{playerid} = false;
					playerBenchUsed{playerid} = i + 1;
					playerBenchStep{playerid} = 0;

	                BenchpressStepTimer[playerid] = SetTimerEx("BenchpressNext", 3900, false, "ii", playerid, BENCHSTEP_START_DOWN);
					MyApplyAnimation(playerid, "benchpress", "gym_bp_geton", 4.1, 0, 0, 0, 1, 0);
					return true;
		        }
		    }
		}

		// госпиталь
		if(GetPlayerVirtualWorld(playerid) == VW_HOSPITAL && GetPVarType(playerid, "Player:Hospital:Berth") == PLAYER_VARTYPE_NONE)
		{
			for(new i = 0; i < sizeof(HospitalBerth); i++)
	    	{
	    		if(IsPlayerInRangeOfPoint(playerid, 2.5, Arr3<HospitalBerth[i][0]>))
	    		{
	    			if(MyGetPlayerHealth(playerid) >= 100)
	    			{
	    				return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Вы абсолютно здоровы.");
	    			}
	    			if(BerthStatus[i] == true)
	    			{
	    				return SendClientMessage(playerid, COLOR_GREY, PREFIX_ERROR "Эта койка занята, выберите другую.");
	    			}
	    			TogglePlayerStreamerAllItem(playerid, false);
	    			UpdateDynamic3DTextLabelText(Berth3DText[i], 0x007CADFF, " ");
	    			MySetPlayerPos(playerid, Arr4<HospitalBerth[i][0]>);
	    			MyApplyAnimation(playerid, "CRACK", "crckidle2", 4.1, 1, 0, 0, 1, 0);
					SetPVarInt(playerid, "Player:Hospital:Berth", i);
					BlockPlayerAnimation(playerid, true);
					BerthStatus[i] = true;
					return true;
	    		}
	    	}
		}
	}
	return true;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new string[128];
	if(showDebug[playerid])
	{	
		SendFormatMessage(playerid, COLOR_WHITE, string, "Key Pressed: newkeys[%d], oldkeys[%d]", newkeys, oldkeys);	
	}

	Callback:Walk_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#if defined	_job_part_loader_included
		Callback:Loader_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#endif
	#if defined _system_combinations_included
		Callback:Comb_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#endif
	#if defined _interface_hack_lock_included
		Callback:HackLock_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#endif	
	#if defined _gang_gang_zones_included
		Callback:Gang.GZ_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#endif
	#if defined _police_pursuit_included
		Callback:Pursuit_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#endif

	// Система редактирования гонок
	if(redit_act[playerid] > 0)
	{
	    if(redit_act[playerid] == 2)
	    {// Спавн точки
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if((vehicleid == 0 && PRESSED(KEY_AIM)) || (vehicleid > 0 && PRESSED(KEY_FIRE)))
		    {// Добавить спавн точку
		        new Float:X, Float:Y, Float:Z, Float:A;
		        if(vehicleid == 0)  MyGetPlayerPos(playerid, X, Y, Z, A);
				else				MyGetVehiclePos(vehicleid, X, Y, Z, A);
				mysql_format(g_SQL, string, sizeof(string), "INSERT INTO `race_spawn` SET `raceid` = '%d', `x` = '%.2f', `y` = '%.2f', `z` = '%.2f', `a` = '%.2f'", redit_id[playerid], X, Y, Z, A);
				mysql_query_ex(string);
				format(string, 128, "Гонка #%d: Добавлена новая спавн точка [#%d]. {FFFFFF}/race - закончить", redit_id[playerid], redit_num[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				redit_num[playerid] += 1;

		        if(redit_num[playerid] >= sizeof(RaceSpawn)-1)
		        {
					format(string, 128, "Гонка #%d: Достигнут лимит спавн точек", redit_id[playerid]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
		            callcmd::race(playerid, "");
		        }
		        return true;
		    }
	    }
	    else if(redit_act[playerid] == 3)
	    {// Чекпоинты
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if((vehicleid == 0 && PRESSED(KEY_AIM)) || (vehicleid > 0 && PRESSED(KEY_FIRE)))
		    {// Создать чекпоинт
		        new Float:X, Float:Y, Float:Z;
		        if(vehicleid == 0)  GetPlayerPos(playerid, X, Y, Z);
				else				GetVehiclePos(vehicleid, X, Y, Z);
				//---
				if(redit_curid[playerid] == 0)
				{// Текущих чекпоинтов нет
				    new Float:X2, Float:Y2, Float:Z2, Float:size;
				    if(redit_previd[playerid] > 0)
				    {
						mysql_format(g_SQL, string, sizeof(string), "SELECT `x`, `y`, `z`, `size` FROM `race_cp` WHERE `id` = '%d'", redit_previd[playerid]);
						new Cache:result = mysql_query(g_SQL, string);
						if(cache_num_rows() > 0)
						{
						    cache_get_value_index_float(0, 0, X2);
						    cache_get_value_index_float(0, 1, Y2);
						    cache_get_value_index_float(0, 2, Z2);
						    cache_get_value_index_float(0, 3, size);
					    }
					    cache_delete(result);
				    }
					//---
					if(X2 && Y2 && IsPlayerInRangeOfPoint(playerid, size+10.0, X2, Y2, Z2))
			        {// Обновляем предыдущий
						mysql_format(g_SQL, string, sizeof(string), "UPDATE `race_cp` SET `x` = '%0.2f', `y` = '%0.2f', `z` = '%0.2f' WHERE `id` = '%d'", X, Y, Z, redit_previd[playerid]);
						mysql_query_ex(string);
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Гонка #%d: Обновлен текущий чекпоинт [#%d | %.1f]. {FFFFFF}/race - закончить", redit_id[playerid], redit_num[playerid]-1, size);
				        ShowPlayerEditCP(playerid, redit_num[playerid]-1);
			        }
			        else
			        {// Добавляем новый
				        if(redit_num[playerid] >= sizeof(RaceCP) - 1)
				        {
							SendFormatMessage(playerid, COLOR_YELLOW, string, "Гонка #%d: Достигнут лимит чекпоинтов", redit_id[playerid]);
				            return callcmd::race(playerid, "");
				        }
						mysql_format(g_SQL, string, sizeof(string), "INSERT INTO `race_cp` SET `raceid` = '%d', `x` = '%.2f', `y` = '%.2f', `z` = '%.2f', `size` = '%.2f'", redit_id[playerid], X, Y, Z, redit_size[playerid]);
						mysql_query_ex(string);
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Гонка #%d: Добавлен новый чекпоинт [#%d | %.1f]. {FFFFFF}/race - закончить", redit_id[playerid], redit_num[playerid], redit_size[playerid]);
			        	redit_previd[playerid] = ShowPlayerEditCP(playerid, redit_num[playerid]++);
				        redit_curid[playerid] = 0;
			        }
				}
				else
				{// Текущие чекпоинты есть
				    new Float:X2, Float:Y2, Float:Z2;
					mysql_format(g_SQL, string, sizeof(string), "SELECT `x`, `y`, `z` FROM `race_cp` WHERE `id` = '%d'", redit_curid[playerid]);
					new Cache:result = mysql_query(g_SQL, string);
					if(cache_num_rows() > 0)
					{
					    cache_get_value_index_float(0, 0, X2);
					    cache_get_value_index_float(0, 1, Y2);
					    cache_get_value_index_float(0, 2, Z2);
				    }
				    cache_delete(result);
					//
					if(X2 && Y2 && IsPlayerInRangeOfPoint(playerid, redit_size[playerid]+10.0, X2, Y2, Z2))
			        {// Обновляем текущий
						mysql_format(g_SQL, string, sizeof(string), "UPDATE `race_cp` SET `x` = '%0.2f', `y` = '%0.2f', `z` = '%0.2f' WHERE `id` = '%d'", X, Y, Z, redit_curid[playerid]);
						mysql_query_ex(string);
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Гонка #%d: Обновлен текущий чекпоинт [#%d | %.1f]. {FFFFFF}/race - закончить", redit_id[playerid], redit_num[playerid], redit_size[playerid]);
			        	redit_previd[playerid] = redit_curid[playerid];
				        redit_curid[playerid] = ShowPlayerEditCP(playerid, redit_num[playerid]);
			        }
			        else
			        {// Предлагаем удалить лишние
			            ShowDialog(playerid, DRACE_DELCP);
			        }
		        }
		        return true;
		    }
		    if(PRESSED(KEY_ANALOG_LEFT) || PRESSED(KEY_ANALOG_RIGHT))
		    {	// Уменьшить размер
		        new cpnum, cpid = 0;
		        if(redit_curid[playerid] > 0)
				{
					cpid = redit_curid[playerid];
					cpnum = redit_num[playerid];
				}
		        else if(redit_previd[playerid] > 0)
				{
					cpid = redit_previd[playerid];
					cpnum = redit_num[playerid]-1;
				}
		        else
		        {
		            return ShowPlayerHint(playerid, "Ошибка: Создайте чекпоинт");
		        }
		        if(PRESSED(KEY_ANALOG_LEFT)) redit_size[playerid] -= 0.5;
		        else redit_size[playerid] += 0.5;
				mysql_format(g_SQL, string, sizeof(string), "UPDATE `race_cp` SET `size` = '%0.2f' WHERE `id` = '%d'", redit_size[playerid], cpid);
				mysql_query_ex(string);
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Гонка #%d: Обновлен текущий чекпоинт [#%d | %.1f]. {FFFFFF}/race - закончить", redit_id[playerid], cpnum, redit_size[playerid]);
				ShowPlayerEditCP(playerid, cpnum);
		        return true;
		    }
	    }
	}

	// OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
	new pState = GetPlayerState(playerid);
	new vehicleid = GetPlayerVehicleID(playerid);
	if(pState == PLAYER_STATE_SPECTATING)
	{
		if(SpectateID[playerid] != INVALID_PLAYER_ID)
		{
		    SelectTextDraw(playerid, 0xFCEC3AFF);
		}
	}
	else if(pState == PLAYER_STATE_ONFOOT) //  пешком
	{
		if(newkeys & KEY_FIRE || (newkeys & KEY_HANDBRAKE && newkeys & KEY_SECONDARY_ATTACK))
		{
			SetPVarInt(playerid, "Player:LastAttack", GetTickCount());
		}

		if(newkeys & KEY_JUMP && GetPlayerSpeed(playerid, true) > 10)
		{
			new gtc = GetTickCount();
			if(gtc > GetPVarInt(playerid, "Player:BunnyHop:GTC") + 5000)
			{
				SetPVarInt(playerid, "Player:BunnyHop:GTC", gtc);
			}
			else
			{
				SetPVarInt(playerid, "Player:BunnyHop:GTC", gtc + 5000);
				DeletePVar(playerid, "Player:AntiBunnyHop:Timer");
				SetPVarInt(playerid, "Player:AntiBunnyHop:Timer", SetTimerEx("AntiBunnyHop", 400, 0, "d", playerid));
			}
		}
		//	Проверка на запрещенные действия в тюрьме и зеленой зоне
		if(p_FellAnim[playerid] == false)
		{
			if(PRESSED(KEY_JUMP))
			{
				if(PlayerInfo[playerid][pJailTime] && GetPlayerComb(playerid) == COMB_NONE)
				{
					new Keys, ud, lr;
   	 				GetPlayerKeys(playerid, Keys, ud, lr);
   	 				if(ud || lr)
   	 				{
   	 					p_FellAnim[playerid] = true;
					    ClearAnimations(playerid);
			        	MyApplyAnimation(playerid, "PED", "KO_SKID_BACK", 4.1, 0, 0, 0, 0, 0);
			        	SetTimerEx("ClearJailFall", 600, 0, "d", playerid);
						ShowPlayerHint(playerid, "В тюрьме ~r~запрещено~w~: ~n~прыгать и драться");
						return true;
   	 				}
				}
			}
			if((PRESSED(KEY_FIRE) || PRESSED(KEY_SECONDARY_ATTACK | KEY_HANDBRAKE)))
			{
				if(GetPlayerComb(playerid) == COMB_NONE && playerBenchUsed{playerid} == 0 && gPlayerRing[playerid] == (-1)
				&& playerSmokeCount{playerid} == 0)
				{
					if(PlayerInfo[playerid][pJailTime])
					{
			            BlockPlayerAggression(playerid);
			            ShowPlayerHint(playerid, "В тюрьме ~r~запрещено~w~ прыгать и драться");
			            return true;
					}
					/*else if(InGangZone[playerid] >= 0 && GangZoneStatus[InGangZone[playerid]] == 0)
					{
						new zone = InGangZone[playerid];
					    if(PlayerInfo[playerid][pFaction] == GangZoneOwner[zone] || PlayerInfo[playerid][pFaction] == GangZoneEnemy[zone])
					    {
					        if(!(22 <= GetPlayerWeapon(playerid) <= 33))
					        {
								//p_FellAnim[playerid] = true;
							    //SetTimerEx("ClearFell", 600, false, "i", playerid);
							    //ClearAnimations(playerid);
					            //MyApplyAnimation(playerid, "FIGHT_C", "HitC_2", 4.1, 0, 1, 1, 0, 0);
					            //SetPlayerArmedWeapon(playerid, 0);
					            BlockPlayerAggression(playerid);
								ShowPlayerHint(playerid, "Во время ожидания~n~нападение ~r~запрещено");
							}
							return true;
					    }
					}*/
					else if(GetPVarInt(playerid, "Player:InGreenZone") || IsPlayerInGreenZoneVW(playerid))
					{
						if(!(22 <= GetPlayerWeapon(playerid) <= 33) && PlayerInfo[playerid][pFaction] != F_POLICE
						&& GetPVarType(playerid, "Player:Hospital:Berth") == PLAYER_VARTYPE_NONE
						&& GetPVarInt(playerid, "RegCutSceneState") == 0)
					    {
				            BlockPlayerAggression(playerid);
				            ShowPlayerHint(playerid, "Здесь ~r~запрещено~w~ драться и стрелять");
				            return true;
						}
					}
				}
			}
		}
	}
	else if(pState == PLAYER_STATE_DRIVER)
	{
	    if(newkeys == 1 || newkeys == 9 || newkeys == 33 && oldkeys != 1 || oldkeys != 9 || oldkeys != 33)
		{
		    new nitroslot = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_NITRO);
			if(1008 <= nitroslot <= 1010)
			{
		        switch(GetVehicleModel(vehicleid))
		        {
		            case 446, 432, 448, 452, 424, 453, 454, 461..463, 468, 471, 430, 472, 449, 473, 481, 484, 493, 509, 510, 521, 538, 522, 523, 532, 537, 570, 581, 586, 590, 569, 595, 604, 611: { }
		            default: AddVehicleComponent(vehicleid, nitroslot);
		        }
		    }
	    }
    }
    //---
    if(PRESSED(KEY_WALK))
    {
    	OnPlayerClickAlt(playerid);
    	return true;
    }
    else if(RELEASED(KEY_WALK))
	{
		/*if(PursuitArest[playerid])
		{
        	DeletePVar(PursuitArestPlayer[playerid], "Police:Arrest");
        	PursuitArest[playerid] = 0;
        	PursuitArestPlayer[playerid] = INVALID_PLAYER_ID;
        	GameTextForPlayer(playerid, "~r~arrest failure", 3000, 3);
        	ClearAnimations(playerid);
        	ProgressBarHide(playerid);
        }
		if(PursuitCancelHandsup[playerid])
		{
			PursuitCancelHandsup[playerid] = 0;
			ProgressBarHide(playerid);
		}*/
	    if(GetPVarInt(playerid, "StartLockTimer"))
   		{
   		    KillTimer(GetPVarInt(playerid, "StartLockTimer"));
            DeletePVar(playerid, "LastLockCar");
			DeletePVar(playerid, "StartLockTimer");
		}
	}
    else if(PRESSED(KEY_SPRINT))
	{
	 	if(GetPVarInt(playerid, "RegCutSceneState"))
	 	{
			RegisterCutScene(playerid, 22, 0, 0);	//	отмена заставки
        }
		else if(gPlayerUsingLoopingAnim[playerid])
		{
			//if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return true;
			return StopLoopingAnim(playerid);
		}

		//  Тренажеры
		if(playerBenchUsed{playerid} && GymBlockKey{playerid} == false)
		{
	        playerBenchStep{playerid} += 5;
	        playerBenchStop{playerid} = true;
	        ProgressBarUpdate(playerid, playerBenchStep{playerid}, 100);
	        BenchpressUP(playerid);
	        return true;
		}
    }
    else if(PRESSED(KEY_ACTION))
	{
		if(pState == PLAYER_STATE_DRIVER && IsVehicleWithEngine(vehicleid))
		{
			callcmd::lights(playerid, ""); // Фары
		}
   	}
    else if(PRESSED(KEY_YES))
    {
		OnPlayerClickY(playerid);
    	return true;
	}
	else if(PRESSED(KEY_NO))
	{
		OnPlayerClickN(playerid);
		return true;
	}
	else if(RELEASED(KEY_FIRE))
    {
        if(burning_timer[playerid] > 0)
        {
            new Float:Z;
            KillTimer(burning_timer[playerid]);
            burning_timer[playerid] = 0;
            MyGetPlayerPos(playerid, _, _, Z, _);
            if(pState == 2 && Z > 0.0)
				GameTextForPlayer(playerid, "~r~!!!FIRE FIRE FIRE!!!~n~~w~Hold ~y~~k~~VEHICLE_FIREWEAPON~", 5000, 4);
        }
        else if(graffiti_timer[playerid] > 0)
        {
			KillTimer(graffiti_timer[playerid]);
			graffiti_timer[playerid] = 0;
			GameTextForPlayer(playerid, "Failed!", 1000, 3);
        }
        else if(GetPVarInt(playerid, "BreakEngineTimer"))
		{	//  взлом двигателя
			GameTextForPlayer(playerid, "~w~Breaking engine~n~Stoped", 1000, 4);
		    KillTimer(GetPVarInt(playerid, "BreakEngineTimer"));
		    DeletePVar(playerid, "BreakEngineTimer");
		}
    }
    else if(PRESSED(KEY_FIRE))
    {
        if(pState == 2 && IsVehicleWithEngine(vehicleid))
        {	// Тушение пожара в машине
	        new Float:vHealth, Float:Z;
	        MyGetPlayerPos(playerid, _, _, Z, _);
	        GetVehicleHealth(vehicleid, vHealth);
	        if(vHealth < 250.0 && Z > 0.0)
	        {
				burning_timer[playerid] = SetTimerEx( "StopVehicleFire", 1500, 0, "i", playerid);
				GameTextForPlayer(playerid, "~r~!!!FIRE FIRE FIRE!!!~n~~w~Puting out...", 3000, 4);
				if(GetVehicleEngine(vehicleid)) StartEngine(vehicleid, false);
			}
			else if(Job.GetPlayerJob(playerid) == JOB_THEFT && GetVehicleEngine(vehicleid) == false && !IsAvailableVehicle(vehicleid, playerid) && VehInfo[vehicleid][vLocked] != 999)
			{	//	Взлом двигателя
			    SetPVarInt(playerid, "LastLockCar", vehicleid);
				BreakCar(playerid, BREAK_CAR_ENGINE, 0);
			}
			return true;
        }

        // Рисование граффити
        new weaponid = GetPlayerWeapon(playerid);
		/*if(weaponid == 41 && IsGang(PlayerInfo[playerid][pFaction]) && IsPlayerInGetto(playerid))
        {
            new zone = GetPlayerGangZone(playerid);
            if(zone != -1)
            {
	            new Float:ang, Float:Fault = 45.0;
	            GetPlayerFacingAngle(playerid, ang);
				for(new g = 0; g < sizeof(Graffiti); g++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, Graffiti[g][0], Graffiti[g][1], Graffiti[g][2] - 0.4) && floatdif(Graffiti[g][3] + 270, ang) < Fault)
					{
						//--- Антифлуд
						new tick = GetTickCount();
						if(tick - StartupAntiflood[playerid] < 500)
						{
						    StartupAntiflood[playerid] = tick;
						    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Не так быстро.");
						    return false;
						}
						StartupAntiflood[playerid] = tick;
						//-------------
			            if(PlayerInfo[playerid][pRank] == 1)
			                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас слишком низкий ранг для нападения на территорию.");
					    new const owner = GangZoneOwner[zone];
		                if(owner > 0)
		                {
				            if(owner == PlayerInfo[playerid][pFaction])
				                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете напасть на свою же территорию.");
			                if(GangZoneEnemy[zone] > 0)
			                    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете напасть на эту зону, за нее уже идет война.");
							if(GangBaseZone[owner] == zone && getGangZoneCount(owner) > 1)
			                    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете напасть на главную территорию банды, пока есть другие.");
			                new hour, nowtime = gettime(hour, _, _);
							if((10 <= hour <= 23) == false)
							{
			    				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Нападения на зоны происходят с 10:00 до 23:00.");
							}
			                if(GangRescue[PlayerInfo[playerid][pFaction]] > nowtime)
			                {
			                    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Ваша банда еще не восстановилась после поражения, осталось: %d мин.", 1 + floatround(float(GangRescue[PlayerInfo[playerid][pFaction]] - nowtime) / 60));
			                    return true;
			                }
			                for(new z; z < sizeof(GangZones); z++)
			                {
			                    if(GangZoneEnemy[z] > 0 && (GangZoneOwner[z] == owner || GangZoneEnemy[z] == owner))
			                        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Владельцы этой территории уже участвуют в войне в данный момент.");
			                }
			                new owners, enemies;
							foreach(LoginPlayer, i)
							{
				                if(PlayerInfo[i][pFaction] == owner && IsPlayerAFK(i) == false) owners++;
				                if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && IsPlayerAFK(i) == false) enemies++;
							}
							if(enemies < 2)
							{
							    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Требуется как минимум 2 игрока онлайн из вашей банды.");
							    return 1;
							}
							if(owners < 2)
							{
							    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Требуется как минимум 2 игрока онлайн во вражеской банде.");
							    return 1;
							}
			                if(GangRescue[owner] > nowtime)
			                {
			                    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вражеская банда еще не восстановилась после поражения, осталось: %d мин.", 1 + floatround(float(GangRescue[owner] - nowtime) / 60));
			                    return true;
			                }
		                }
		                new wdata[2];
		                GetPlayerWeaponData(playerid, 9, wdata[0], wdata[1]);
		                SetPVarInt(playerid, "SprayCount", wdata[1]);
						graffiti_timer[playerid] = SetTimerEx("MakePlayerGraffiti", 3000, 0, "ii", playerid, g);
						GameTextForPlayer(playerid, "Painting...", 5000, 3);
						break;
					}
				}
			}
        }*/
		if(22 <= weaponid <= 33 && IsGang(PlayerInfo[playerid][pFaction]))
		{	//	Ограбление бизнесов
			if(robbery_biz[playerid] == (-1))
			{
				new biz = GetBizWhichPlayer(playerid);
				if(biz != INVALID_DATA)
				{
					RobberyStart(playerid);
				}
			}
		}
		else if(playerDrink{playerid} > 0)
		{	//	Drink
			if(playerDrinkCount{playerid} > 0)
			{
				if(--playerDrinkCount{playerid} == 0)	SetTimerEx("ClearPlayerDrink", 2600, false, "d", playerid);
				else
				{
					if(playerDrink{playerid} == 1)		SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 1000);
					else if(playerDrink{playerid} == 2)	SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 5000);
					else if(playerDrink{playerid} == 3)	SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 4000);
					else if(playerDrink{playerid} == 4)	SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 2000);
					else if(playerDrink{playerid} == 5)
					{
						SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) - 1000);
						if(MyGetPlayerHealth(playerid) + 5.0 < 100.0)	MySetPlayerHealth(playerid, MyGetPlayerHealth(playerid) + 5.0);
					}
				}
			}
		}
		else if(playerSmokeCount{playerid} > 0)
		{
			if(--playerSmokeCount{playerid} == 0)	SetTimerEx("ClearPlayerSmoke", 2600, false, "d", playerid);
			if(MyGetPlayerHealth(playerid) + 1.0 < 100.0)	MySetPlayerHealth(playerid, MyGetPlayerHealth(playerid) + 1.0);
		}
    }
    else if(PRESSED(KEY_SECONDARY_ATTACK)) // KEY_F
    {
    	OnPlayerClickEnter(playerid);
    	return true;
    }
	else if(RELEASED(KEY_SECONDARY_ATTACK))
    {
        if(robbery_timer[playerid] > 0)
        {
			KillTimer(robbery_timer[playerid]), robbery_timer[playerid] = 0;
			TogglePlayerControllable(playerid, true);
			IFace.ToggleGroup(playerid, IFace.CAM_EFFECT, false);
			SetCameraBehindPlayer(playerid);
        }
        //  попытка сесть в авто / прервать взлом
        if(GetPVarInt(playerid, "LastLockCar") && GetPlayerComb(playerid) == COMB_NONE)
        {
            if(GetPVarInt(playerid, "StartLockTimer"))
            {
                PlayerPlaySound(playerid, 24600, 0.0, 0.0, 0.0);
			    GameTextForPlayer(playerid, RusText("~r~Машина закрыта!", isRus(playerid)), 3000, 4);
	            KillTimer(GetPVarInt(playerid, "StartLockTimer"));
			    new v = GetPVarInt(playerid, "LastLockCar");
				if(!IsAvailableVehicle(v, playerid) && CarInfo[v][cType] != C_TYPE_PLAYER && VehInfo[v][vPlayers] == 0)
					ShowPlayerHint(playerid, "~w~Вы можете выбить стекло автомобиля зажав ~y~ENTER~w~, но это привлечет внимание копов");

	            DeletePVar(playerid, "LastLockCar");
				DeletePVar(playerid, "StartLockTimer");
			}
			else if(GetPVarInt(playerid, "BreakCarGlass"))
			{
				KillTimer(GetPVarInt(playerid, "BreakCarTimer"));
				DeletePVar(playerid, "BreakCarTimer");
				DeletePVar(playerid, "BreakCarGlass");
			}
        }
    }
    else if(PRESSED(KEY_HANDBRAKE))	// KEY_AIM // Space[128]
    {
        if(pState == PLAYER_STATE_ONFOOT)
        {
			gPressedKeyAIM[playerid] = true;
			gTargetVehicle[playerid] = INVALID_VEHICLE_ID;
        }
	    else if(pState == PLAYER_STATE_DRIVER && IsVehicleWithEngine(vehicleid))
	    {
			new tick = GetTickCount();
	        if(GetVehicleEngine(vehicleid) == false || (tick - gTickEngine[playerid] < 500 && GetVehicleSpeed(vehicleid) == 0))
	        {
		        callcmd::engine(playerid, "");
	        }
			gTickEngine[playerid] = tick;
	    }
    }
    else if(RELEASED(KEY_HANDBRAKE)) // KEY_AIM
    {
		if(engine_timer[playerid] > 0)
		{
            if(AS_ElementNumber[playerid])
            {
                SendClientMessage(playerid, COLOR_SAYING, "- Инструктор: Эй, ты что, не можешь даже машину завести?");
            }
			GameTextForPlayer(playerid, "~w~Starting engine~n~Stoped", 1000, 4);
		    KillTimer(engine_timer[playerid]);
			engine_timer[playerid] = 0;
		}
		if(GetPVarInt(playerid, "Player:HintPressH"))
		{
			TextDrawHideForPlayer(playerid, TD_PressH);
			DeletePVar(playerid, "Player:HintPressH");
		}
       	gPressedKeyAIM[playerid] = false;
    }
    else if(PRESSED(KEY_CROUCH))// KEY_HORN
    {
		// UnDriveBy
		if(pState == PLAYER_STATE_ONFOOT)
		{
			//	Fix +C
			if(GetTickCount() - GetPVarInt(playerid, "Player:LastShotTime") < 750)
	        {
	            new weaponid = GetPlayerWeapon(playerid);
	            if(weaponid == WEAPON_DEAGLE || weaponid == WEAPON_SHOTGUN || weaponid == WEAPON_RIFLE || weaponid == WEAPON_SNIPER)
	            {
	                new Float:pPos[3];
	                GetPlayerPos(playerid, Arr3<pPos>);
	                SetPlayerPos(playerid, pPos[0], pPos[1], pPos[2] + 0.5);

	                SetPlayerArmedWeapon(playerid, 0);
	                ClearAnimations(playerid, 1);
	            }
	        }
		}
		else if(pState == PLAYER_STATE_PASSENGER)
		{
			new tick = GetTickCount();
            if(tick - gTickPushed[playerid] < 500)
			{
				SetTimerEx("RearmedPlayerWeapon", 500, false, "i", playerid);
				MyApplyAnimation(playerid, "PED", "facanger", 4.1, 0, 1, 1, 1, 1);
				SetPlayerArmedWeapon(playerid, 0);
			}
			gTickPushed[playerid] = tick;
		}
		else if(pState == PLAYER_STATE_DRIVER)
		{
			// Проверка заправки
		    if(IsVehicleWithEngine(vehicleid) && IsPlayerAtGasStation(playerid))
		    {
	         	if(GetVehicleEngine(vehicleid)){
	         		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки необходимо заглушить двигатель.");
	         	}
	         	return ShowDialog(playerid, DMODE_GAS_REFILL);
		    }
		    // Открытие ворот участка
			else if(IsPlayerInRangeOfPoint(playerid, 15.0, 1544.69, -1630.85, 13.04) && IsDynamicObjectMoving(LSPDbarr) == 0)
			{
				MoveDynamicObject(LSPDbarr, 1544.69, -1630.85, 13.10+0.1, 0.07, 0.0, 0.0, 90.0);
				SetTimerEx("RerotObject", 4000, 0, "iffff", LSPDbarr, 0.0, 90.0, 90.0, 0.07);
				return true;
			}
			//	Ворота в автошколе
			else if(IsPlayerInRangeOfPoint(playerid, 15.0, -2047.1, -80.5, 35.2) && IsDynamicObjectMoving(ASbarr) == 0)
			{
				MoveDynamicObject(ASbarr, -2043.6, -80.58, 35.0 + 0.1, 0.07, 0.0, 0.0, 0.0);
				SetTimerEx("RerotObject", 4000, 0, "iffff", ASbarr, 0.0, -90.0, 0.0, 0.07);
				return true;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 15.0, 1592.0, -1638.33, 13.20))//&& !IsDynamicObjectMoving(LSPDgate))
		    {
				if(PlayerInfo[playerid][pFaction] == F_POLICE)
				{
					OpenGate(gateLSPD[0]);
					//MoveDynamicObject(LSPDgate, 1595.55, -1638.33, 13.20, 1.9);
					//SetTimerEx("MyMoveDynamicObject", 5000, 0, "ifffffff", LSPDgate, 1588.55, -1638.33, 13.20, 1.9, -1000.0, -1000.0, -1000.0);
				}
		    }
		    else if(IsPlayerInRangeOfPoint(playerid, 15.0, 1790.7, -1136.0, 26.50) && !IsDynamicObjectMoving(FBIGate))
		    {
			    if(PlayerInfo[playerid][pFaction] == F_FBI)
				{
					MoveDynamicObject(FBIGate, 1790.7, -1136.0, 18.5, 5.0);
					SetTimerEx("MyMoveDynamicObject", 3000, 0, "ifffffff", FBIGate, 1790.7, -1136.0, 25.50, 3.0, -1000.0, -1000.0, -1000.0);
				}
			}
		    // Ворота Форт Карсона
		    else if(IsPlayerInRangeOfPoint(playerid, 15.0, -240.6978, 1208.1520, 19.3440))
		    {
		        if(!IsDynamicObjectMoving(FC_Gate[0]) && !IsDynamicObjectMoving(FC_Gate[1]))
		        {
					MoveDynamicObject(FC_Gate[0], -236.494, 1208.37, 18.387+0.1, 0.025, 0.0, 0.0, 60.0);
					SetTimerEx("RerotObject", 6000, 0, "iffff", FC_Gate[0], 0.0, 0.0, 270.0, 0.025);

					MoveDynamicObject(FC_Gate[1], -244.889, 1208.37, 18.387+0.1, 0.025, 0.0, 0.0, 300.0);
					SetTimerEx("RerotObject", 6000, 0, "iffff", FC_Gate[1], 0.0, 0.0, 70.0, 0.025);
				}
		    }
		    // Открытие ворот
			else if(GetPlayerAdmin(playerid) > ADMIN_MODER)
			{
			    // Ворота зоны 51
				if(IsPlayerInRangeOfPoint(playerid, 10.0, 134.91, 1941.52, 21.78))
				{
					if(!IsDynamicObjectMoving(AreaGate[0])){
						MoveDynamicObject(AreaGate[0], 120.39, 1941.52, 21.78, 1.9);
						SetTimerEx("MyMoveDynamicObject", 9000, 0, "ifffffff", AreaGate[0], 134.91, 1941.52, 21.78, 1.9, -1000.0, -1000.0, -1000.0);
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 285.99, 1822.31, 20.00))
				{
					if(!IsDynamicObjectMoving(AreaGate[1])){
						MoveDynamicObject(AreaGate[1], 285.99, 1834.09, 20.00, 1.9);
						SetTimerEx("MyMoveDynamicObject", 9000, 0, "ifffffff", AreaGate[1], 285.99, 1822.31, 20.00, 1.9, -1000.0, -1000.0, -1000.0);
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 213.88, 1875.65, 13.90))
				{
					if(!IsDynamicObjectMoving(AreaGate[2]) && !IsDynamicObjectMoving(AreaGate[3])){
						MoveDynamicObject(AreaGate[2], 208.18, 1875.65, 13.90, 0.8);
						SetTimerEx("MyMoveDynamicObject", 8000, 0, "ifffffff", AreaGate[2], 211.88, 1875.65, 13.90, 0.8, -1000.0, -1000.0, -1000.0);
						MoveDynamicObject(AreaGate[3], 219.57, 1875.65, 13.90, 0.8);
						SetTimerEx("MyMoveDynamicObject", 8000, 0, "ifffffff", AreaGate[3], 215.97, 1875.65, 13.90, 0.8, -1000.0, -1000.0, -1000.0);
					}
				}
				// Ворота КАСС
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2497.41, 2773.5, 11.53))
				{
					if(!IsDynamicObjectMoving(KassGate[0]) && !IsDynamicObjectMoving(KassGate[1]))
					{
						MoveDynamicObject(KassGate[0], 2497.41, 2763.80, 11.53, 1.4);
						SetTimerEx("MyMoveDynamicObject", 8000, 0, "ifffffff", KassGate[0], 2497.41, 2769.11, 11.53, 1.4, -1000.0, -1000.0, -1000.0);
						MoveDynamicObject(KassGate[1], 2497.41, 2782.57, 11.53, 1.4);
						SetTimerEx("MyMoveDynamicObject", 8000, 0, "ifffffff", KassGate[1], 2497.41, 2777.07, 11.53, 1.4, -1000.0, -1000.0, -1000.0);
					}
				}
				// Ворота тюрьмы в Лос Сантосе
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1826.4875,-1538.6104,13.5469))
				{
					if(IsDynamicObjectMoving(LS_PrisonGate[0]) || IsDynamicObjectMoving(LS_PrisonGate[4])) return 1;
					MoveDynamicObject(LS_PrisonGate[0], 1822.52832, -1540.94080, 10.8, 1.4);
					MoveDynamicObject(LS_PrisonGate[1], 1824.32483, -1534.69763, 10.8, 1.4);
					SetTimerEx("MyMoveDynamicObject", 7000, 0, "ifffffff", LS_PrisonGate[0], 1822.52832, -1540.94080, 14.26770, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 7000, 0, "ifffffff", LS_PrisonGate[1], 1824.32483, -1534.69763, 14.26770, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 11000, 0, "ifffffff", LS_PrisonGate[4], 1813.87659, -1533.16516, 10.4, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 11000, 0, "ifffffff", LS_PrisonGate[5], 1813.72278, -1539.64246, 10.4, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 16000, 0, "ifffffff", LS_PrisonGate[4], 1813.87659, -1533.16516, 13.93400, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 16000, 0, "ifffffff", LS_PrisonGate[5], 1813.72278, -1539.64246, 13.93400, 1.4, -1000.0, -1000.0, -1000.0);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1809.9653,-1536.2758,12.7081))
				{
					if(IsDynamicObjectMoving(LS_PrisonGate[0]) || IsDynamicObjectMoving(LS_PrisonGate[4])) return 1;
					MoveDynamicObject(LS_PrisonGate[4], 1813.87659, -1533.16516, 10.4, 1.4);
					MoveDynamicObject(LS_PrisonGate[5], 1813.72278, -1539.64246, 10.4, 1.4);
					SetTimerEx("MyMoveDynamicObject", 7000, 0, "ifffffff", LS_PrisonGate[4], 1813.87659, -1533.16516, 13.93400, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 7000, 0, "ifffffff", LS_PrisonGate[5], 1813.72278, -1539.64246, 13.93400, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 11000, 0, "ifffffff", LS_PrisonGate[0], 1822.52832, -1540.94080, 10.8, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 11000, 0, "ifffffff", LS_PrisonGate[1], 1824.32483, -1534.69763, 10.8, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 16000, 0, "ifffffff", LS_PrisonGate[0], 1822.52832, -1540.94080, 14.26770, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 16000, 0, "ifffffff", LS_PrisonGate[1], 1824.32483, -1534.69763, 14.26770, 1.4, -1000.0, -1000.0, -1000.0);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1753.8889,-1594.3204,13.5375))
				{
					if(IsDynamicObjectMoving(LS_PrisonGate[2]) || IsDynamicObjectMoving(LS_PrisonGate[6])) return 1;
					MoveDynamicObject(LS_PrisonGate[2], 1756.92969, -1592.31470, 10.7, 1.4);
					MoveDynamicObject(LS_PrisonGate[3], 1752.02393, -1591.19116, 10.7, 1.4);
					SetTimerEx("MyMoveDynamicObject", 7000, 0, "ifffffff", LS_PrisonGate[2], 1756.92969, -1592.31470, 14.27910, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 7000, 0, "ifffffff", LS_PrisonGate[3], 1752.02393, -1591.19116, 14.27910, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 11000, 0, "ifffffff", LS_PrisonGate[6], 1756.62097, -1583.20007, 9.7, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 11000, 0, "ifffffff", LS_PrisonGate[7], 1751.71716, -1582.06445, 9.7, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 16000, 0, "ifffffff", LS_PrisonGate[6], 1756.62097, -1583.20007, 13.27910, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 16000, 0, "ifffffff", LS_PrisonGate[7], 1751.71716, -1582.06445, 13.27910, 1.4, -1000.0, -1000.0, -1000.0);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1754.7020,-1579.8577,12.1113))
				{
					if(IsDynamicObjectMoving(LS_PrisonGate[2]) || IsDynamicObjectMoving(LS_PrisonGate[6])) return 1;
					MoveDynamicObject(LS_PrisonGate[6], 1756.62097, -1583.20007, 9.7, 1.4);
					MoveDynamicObject(LS_PrisonGate[7], 1751.71716, -1582.06445, 9.7, 1.4);
					SetTimerEx("MyMoveDynamicObject", 7000, 0, "ifffffff", LS_PrisonGate[6], 1756.62097, -1583.20007, 13.27910, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 7000, 0, "ifffffff", LS_PrisonGate[7], 1751.71716, -1582.06445, 13.27910, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 11000, 0, "ifffffff", LS_PrisonGate[2], 1756.92969, -1592.31470, 10.7, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 11000, 0, "ifffffff", LS_PrisonGate[3], 1752.02393, -1591.19116, 10.7, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 16000, 0, "ifffffff", LS_PrisonGate[2], 1756.92969, -1592.31470, 14.27910, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 16000, 0, "ifffffff", LS_PrisonGate[3], 1752.02393, -1591.19116, 14.27910, 1.4, -1000.0, -1000.0, -1000.0);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 1781.0, -1533.76758, 10.20))
				{
					if(IsDynamicObjectMoving(LS_PrisonGate[8])) return 1;
					MoveDynamicObject(LS_PrisonGate[8], 1781.21533, -1530.76758, 10.2, 1.4);
					MoveDynamicObject(LS_PrisonGate[9], 1780.97607, -1537.21082, 10.2, 1.4);
					SetTimerEx("MyMoveDynamicObject", 6000, 0, "ifffffff", LS_PrisonGate[8], 1781.21533, -1530.76758, 6.6, 1.4, -1000.0, -1000.0, -1000.0);
					SetTimerEx("MyMoveDynamicObject", 6000, 0, "ifffffff", LS_PrisonGate[9], 1780.97607, -1537.21082, 6.6, 1.4, -1000.0, -1000.0, -1000.0);
				}
				// Ворота Алькатраса
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 540.359, -2748.300, 14.600)){
					PrisonGateMove(0, true);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 551.429, -2731.300, 14.600)){
					PrisonGateMove(1, true);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 540.580, -2714.209, 14.600)){
					PrisonGateMove(2, true);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 547.320, -2818.209, 14.600)){
					PrisonGateMove(3, true);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 590.169, -2676.679, 14.600)){
					PrisonGateMove(4, true);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, 628.150, -2704.229, 6.219)){
					PrisonGateMove(5, true);
				}
			}
			return true;
		}
    }
	else if(PRESSED(KEY_CTRL_BACK))	// H
	{
		OnPlayerClickH(playerid);
		return true;
	}
	else if(RELEASED(KEY_CTRL_BACK))
	{
		/*if(PursuitReinforc[playerid])
		{
			PursuitReinforc[playerid] = 0;
			ProgressBarHide(playerid);
		}*/
	}
	else if(PRESSED(KEY_SUBMISSION))
	{
		OnPlayerClickSubmission(playerid);
		return true;
	}
	else if(PRESSED(KEY_ANALOG_DOWN))
	{
		new model = GetVehicleModel(vehicleid);
		if(GetPlayerState(playerid) == 2 && (model == 525 || model == 531 || model == 583))
			return callcmd::tow(playerid, "");
	}
	return true;
}

OnPlayerYNStateChange(playerid, askid, response)
{
	new string[256];
	new offerid = AskOfferID[playerid];
	if(response)// KEY_YES
	{
		new ammount = AskAmount[playerid];
		if(offerid == INVALID_PLAYER_ID || (IsPlayerLogged(offerid) && strcheck(AskOffer[playerid], ReturnPlayerName(offerid))))
        {
		    switch(askid)
		    {
		        case ASK_INVITE:
		        {
					SetPlayerFaction(playerid, ammount);

					SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы приняты в организацию %s", GetFactionName(PlayerInfo[playerid][pFaction]));
					SendFormatMessage(offerid, COLOR_LIGHTBLUE, string, "%s был принят в организацию %s", ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]));

					format(string, sizeof(string), "%s invite %s : %s", ReturnPlayerName(offerid), ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]));
					log("Faction", string);
		        }
		        case ASK_INVITE_JOB:
				{
				    switch(ammount)
				    {
						/*case JOB_GUNDEAL: // Торговец оружием
						{
							if(MyGetPlayerMoney(playerid) < 500)
							{
								SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег для покупки этой работы (500$).");
								goto no_ask;
							}
							if(PlayerInfo[playerid][pGunDealLic] == 0)
				        	{
				        		MyGivePlayerMoney(playerid, -500);	//	временно, вместо разрешения
				        	}
				        	else PlayerInfo[playerid][pGunDealLic] = 0;
				        }
				        case JOB_THEFT: // Автоугонщик
				        {
							if(MyGetPlayerMoney(playerid) < 500)
							{
								SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег для покупки этой работы (500$).");
								goto no_ask;
							}
				        	if(PlayerInfo[playerid][pTheftLic] == 0)
				        	{
				        		MyGivePlayerMoney(playerid, -500);	//	временно, вместо разрешения
				        	}
				        	else PlayerInfo[playerid][pTheftLic] = 0;
						}
						case JOB_DRUGDEAL:	// Наркодиллер
						{
							if(MyGetPlayerMoney(playerid) < 500)
							{
								SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег для покупки этой работы (500$).");
								goto no_ask;
							}
							if(PlayerInfo[playerid][pDrugDealLic] == 0)
				        	{
				        		MyGivePlayerMoney(playerid, -500);	//	временно, вместо разрешения
				        	}
				        	else PlayerInfo[playerid][pDrugDealLic] = 0;
						}*/
				    }
					SendFormatMessage(playerid, COLOR_WHITE, string, "Поздравляем, вы устроились на работу: {44B2FF}%s.", GetJobName(ammount));
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Место работы отображено на вашей карте в виде грузовичка.");
	        		Job.SetPlayerJob(playerid, ammount, CONTRACT_TIME);
				}
				case ASK_POLICE_FINE:
				{
					if(MyGetPlayerMoney(playerid) < ammount)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
						goto no_ask;
					}
				    MyGivePlayerMoney(playerid, -ammount);
					CancelPlayerPursuit(playerid, 2);
					MySetPlayerWantedLevel(playerid, 0);
					SendFormatMessage(playerid, COLOR_DBLUE, string, "Вы оплатили штраф в размере %d$, счастливого пути", ammount);
					SendFormatMessage(offerid, COLOR_DBLUE, string, "%s оплатил штраф, теперь он свободен", ReturnPlayerName(playerid));
				}
				case ASK_CAR_SELLTO:
				{
					new vehicleid = AskAmount2[playerid];
					//if(PlayerInfo[playerid][pCarLic] == 0)
					if(IsPlayerHaveLicThisVehicle(playerid, GetVehicleModel(vehicleid)))
					{
					    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет лицензии на этот транспорт.");
					    goto stop_ask;
					}
				    if(MyGetPlayerMoney(playerid) < ammount)
				    {
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не хватает денег для покупки.");
				        goto stop_ask;
				    }
					if(CarInfo[vehicleid][cType] != C_TYPE_PLAYER)
					{
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот транспорт не подлежит перепродаже.");
				        goto stop_ask;
					}
					if(IsAvailableVehicle(vehicleid, offerid) != VEH_AVAILABLE_OWNER)
					{
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Продавец более не имеет права на этот транспорт.");
				        goto stop_ask;
					}
  					// Перекидываем деньги
				    MyGivePlayerMoney(playerid, -ammount);
				    MyGivePlayerMoney(offerid, ammount);
					// Перезаписываем владельца
					CarInfo[vehicleid][cOwnerID] = PlayerInfo[playerid][pUserID];
					UpdateVehicleStatics(vehicleid);
					// Просим стороны выйти
					RemovePlayerFromVehicle(playerid);
					RemovePlayerFromVehicle(offerid);
					// Уведомляем стороны и окружающих
					PlayerAction(playerid, "подписывает договор на покупку транспорта.");
					format(string, 128, "* Вы приняли предложение от {B1C8FB}%s{88AA88}, транспорт ваш!", AskOffer[playerid]);
					SendClientMessage(playerid, COLOR_SPECIAL, string);
					format(string, 128, "* {B1C8FB}%s{88AA88} принял ваше предложение", ReturnPlayerName(playerid));
					SendClientMessage(offerid, COLOR_SPECIAL, string);
				}
				case ASK_HI:
				{
			    	callcmd::hi(playerid, AskOffer[playerid]);
				}
				case ASK_GIVE_MONEY:
				{
					if(IsPlayerNearPlayer(playerid, offerid, 5.0) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
						goto stop_ask;
					}
					if(ammount > 0 && MyGetPlayerMoney(offerid) < ammount)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока нет столько денег.");
						goto stop_ask;
					}
					if(ammount > 10000)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете передавать за раз более $10.000.");
						goto stop_ask;
					}
					if(GetPlayerState(playerid) == 1)	MyApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.1, 0, 0, 0, 0, 0);

					MyGivePlayerMoney(offerid, -ammount);
					MyGivePlayerMoney(playerid, ammount);
					SendFormatMessage(offerid, COLOR_GREEN, string, "Вы передали %d$ игроку %s[%d]", ammount, ReturnPlayerName(playerid), playerid);
					SendFormatMessage(playerid, COLOR_GREEN, string, "Вы получили %d$ от %s[%d]", ammount, AskOffer[playerid], offerid);
					format(string, sizeof(string), "передает деньги %s'у.", ReturnPlayerName(playerid));
					PlayerAction(offerid, string);
					format(string, sizeof(string), "%s -> %s : %d$", AskOffer[playerid], ReturnPlayerName(playerid), ammount);
					log("Pay", string);
				}
				case ASK_GIVE_THING:
				{
					if(IsPlayerNearPlayer(playerid, offerid, 5.0) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
						goto stop_ask;
					}
					if(ammount > 0 && MyGetPlayerMoney(playerid) < ammount)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
						goto stop_ask;
					}
					new count 	= AskAmount2[playerid];
					new thing 	= AskAmount3[playerid];
					new option 	= AskAmount4[playerid];
					if(Inv.GetThing(offerid, thing, option) < count)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока уже нет этого предмета.");
						goto stop_ask;
					}
					if(Inv.AddPlayerThing(playerid, thing, count, option) == 0)
					{
						goto stop_ask;
					}
					Inv.PlayerDeleteThing(offerid, thing, option, count);
					if(ammount)
					{
						SendFormatMessage(offerid, COLOR_GREEN, string, "Вы передали %s (%d шт.) игроку %s[%d] за %d$", GetThingName(thing, option), count, ReturnPlayerName(playerid), playerid, ammount);
						SendFormatMessage(playerid, COLOR_GREEN, string, "Вы получили %s (%d шт.) от %s[%d] за %d$", GetThingName(thing, option), count, AskOffer[playerid], offerid, ammount);

						MyGivePlayerMoney(playerid, -ammount);
						MyGivePlayerMoney(offerid, ammount);
					}
					else
					{
						SendFormatMessage(offerid, COLOR_GREEN, string, "Вы передали %s (%d шт.) игроку %s[%d]", GetThingName(thing, option), count, ReturnPlayerName(playerid), playerid);
						SendFormatMessage(playerid, COLOR_GREEN, string, "Вы получили %s (%d шт.) от %s[%d]", GetThingName(thing, option), count, AskOffer[playerid], offerid);
					}
					if(GetPlayerState(playerid) == 1)	MyApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.1, 0, 0, 0, 0, 0);
					format(string, sizeof(string), "передает что-то %s'у.", ReturnPlayerName(playerid));
					PlayerAction(offerid, string);

					IFace.Inv_UpdateListItems(offerid);
					IFace.Inv_UpdateListItems(playerid);
				}
				case ASK_INTERVIEW:
				{
					if(IsPlayerNearPlayer(playerid, offerid, 5.0) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
						goto stop_ask;
					}
					SendFormatMessage(playerid, COLOR_GREEN, string, "Вы согласились дать интервью %s'у в прямом эфире", AskOffer[playerid]);
					SendFormatMessage(offerid, COLOR_GREEN, string, "%s согласился дать вам интервью в прямом эфире", ReturnPlayerName(playerid));
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Вы заморожены до окончания интервью.");
					SendClientMessage(offerid, COLOR_LIGHTBLUE, "Вы заморожены до окончания интервью (Используйте: /live повторно).");
					TogglePlayerControllable(playerid, 0);
					TogglePlayerControllable(offerid, 0);
					TalkingLive[playerid] = offerid;
					TalkingLive[offerid] = playerid;
				}
				case ASK_BOX:
				{
					if(IsPlayerNearPlayer(playerid, offerid, 5.0) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
						goto stop_ask;
					}
					new ring = GetNearRing(offerid);
					if(ring == (-1)){
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от рига.");
						goto stop_ask;
					}
					if(BoxingRing[ring][RING_STATE] != 0){
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот ринг в данный момент занят.");
						goto stop_ask;
					}
					if(PlayerInfo[offerid][pTraining] >= MAX_TRAINING)	{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок устал и сейчас не может боксировать.");
						goto stop_ask;
					}
					if(PlayerInfo[playerid][pTraining] >= MAX_TRAINING)	{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы сильно устали и не можете сейчас боксировать.");
						goto stop_ask;
					}
					if(MyGetPlayerHealth(playerid) < 15.0){
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас слишком мало здоровья.");
						goto stop_ask;
					}
					if(MyGetPlayerHealth(offerid) < 15.0){
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока слишком мало здоровья.");
						goto stop_ask;
					}
					//	positions
					GetPlayerPos(playerid, Arr3<gPlayerPosToRing[playerid]>);
					GetPlayerFacingAngle(playerid, gPlayerPosToRing[playerid][3]);
					SetPlayerPos(playerid, Arr3<BoxingRingPos[ring][RING_RED]>);
					SetPlayerFacingAngle(playerid, BoxingRingPos[ring][RING_RED][3]);
					MySetPlayerSkin(playerid, 80, false);
					TogglePlayerControllable(playerid, false);
					MyChangePlayerWeapon(playerid, true);
					BoxingRing[ring][RING_RED_PLAYER] = playerid;
					gPlayerRing[playerid] = ring;
					gPlayerBoxEnemy[playerid] = offerid;
					if(PlayerInfo[playerid][pJailTime])	HidePlayerPrisonTime(playerid);

					GetPlayerPos(offerid, Arr3<gPlayerPosToRing[offerid]>);
					GetPlayerFacingAngle(offerid, gPlayerPosToRing[offerid][3]);
					SetPlayerPos(offerid, Arr3<BoxingRingPos[ring][RING_BLUE]>);
					SetPlayerFacingAngle(offerid, BoxingRingPos[ring][RING_BLUE][3]);
					MySetPlayerSkin(offerid, 81, false);
					TogglePlayerControllable(offerid, false);
					MyChangePlayerWeapon(offerid, true);
					BoxingRing[ring][RING_BLUE_PLAYER] = offerid;
					gPlayerRing[offerid] = ring;
					gPlayerBoxEnemy[offerid] = playerid;
					if(PlayerInfo[offerid][pJailTime])	HidePlayerPrisonTime(offerid);

					BoxingRing[ring][RING_STATE] = 1;
					BoxingRing[ring][RING_TIME] = 15;

					SendFormatMessage(playerid, COLOR_GREEN, string, "Вы согласились на боксерский поединок против %s'а", AskOffer[playerid]);
					SendFormatMessage(offerid, COLOR_GREEN, string, "%s согласился на боксерский поединок против вас", ReturnPlayerName(playerid));
				}
				case ASK_BUY_HOTDOG:
				{
					if(MyGetPlayerMoney(playerid) < 5)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
						goto stop_ask;
					}
					if(GetPlayerHunger(playerid) >= 100)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не голодны.");
						goto stop_ask;
					}
					new actor = ammount;
					new Float:pos[3];
					GetActorPos(actor, Arr3<pos>);
					if(GetDistanceFromMeToPoint(playerid, Arr3<pos>) > 5.0)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы слишком далеко от ларька.");
						goto stop_ask;
					}
					new eat = EatPlayer(playerid, 30, "ест хот-дог");
					if(eat)
					{
						if(eat != -1)	MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
						MyGivePlayerMoney(playerid, -5);
						ApplyActorAnimation(actor, "BAR", "Barcustom_get", 4.1, 0, 0, 0, 0, 0);
					}
				}
				case ASK_SHOWPASS:
				{
					if(IsPlayerNearPlayer(playerid, offerid, 5.0) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
						goto stop_ask;
					}
					ShowPass(playerid, offerid);
					PlayerAction(offerid, "показывает свои документы.");
				}
				case ASK_JOB_PARTNER:
				{
					if(IsPlayerNearPlayer(playerid, offerid, 5.0) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
						goto stop_ask;
					}
					SetPVarInt(playerid, "Player:JobPartner", PlayerInfo[offerid][pUserID]);
					SendFormatMessage(playerid, COLOR_GREEN, string, "Вы согласились поработать с %s'ом", AskOffer[playerid]);
					SendFormatMessage(offerid, COLOR_GREEN, string, "%s согласился поработать с вами", ReturnPlayerName(playerid));
				}
				case ASK_REPAIR:
				{
					if(Job.GetPlayerNowWork(offerid) != JOB_MECHANIC)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Игрок уже не работает механиком или ушел с дежурства.");
						goto stop_ask;
					}

			    	new v = GetPlayerVehicleID(playerid);
			    	if(!v || VehInfo[v][vDriver] != playerid)
			    	{
			    		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть за рулем автомобиля.");
						goto stop_ask;
			    	}

			    	if(MyGetPlayerMoney(playerid) < ammount)
			    	{
			    		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
						goto stop_ask;
			    	}

				    new dif = 20,
						Float:carX, Float:carY, Float:carZ,
				        Float:carA, Float:plX, Float:plY, Float:plZ;

					GetVehiclePos(v, carX, carY, carZ);
					GetVehicleZAngle(v, carA);
					GetPlayerPos(offerid, plX, plY, plZ);
					new A = floatround(atan2(carX - plX, carY - plY) + carA);
					if(A > 360)	A -= 360;
					if(180 - dif < A < 180 + dif)
				    {	// Капот
						if(!GetVehicleBonnet(v))
						{
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Капот вашей машины должен быть открыт.");
							goto stop_ask;
						}
					    new Float:Health;
					    GetVehicleHealth(v, Health);
					    if(Health < 400.0)
					    {
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Ремонт вашей машины возможен только в сервисе.");
							goto stop_ask;
					    }
						MySetVehicleHealth(v, 999.0);
						PlayerAction(offerid, "ковыряется под капотом.");
						MyApplyAnimation(offerid, "GANGS","shake_cara", 4.1, 0, 0, 0, 0, 0, 1);

						Job.GivePlayerWage(offerid, ammount);
						MyGivePlayerMoney(playerid, -ammount);

						SendFormatMessage(playerid, COLOR_GREEN, string, "Вы согласились на ремонт %s'а", AskOffer[playerid]);
						SendFormatMessage(offerid, COLOR_GREEN, string, "%s согласился на ремонт своего авто", ReturnPlayerName(playerid));
				    }
				}
				case ASK_REFILL:
				{
					if(Job.GetPlayerNowWork(offerid) != JOB_MECHANIC)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Игрок уже не работает механиком или ушел с дежурства.");
						goto stop_ask;
					}

					new vehicleid = gLastVehicle[offerid];
		    		if(CarInfo[vehicleid][cType] != C_TYPE_JOB || CarInfo[vehicleid][cOwnerID] != JOB_MECHANIC)
			    	{
			    		goto stop_ask;
			    	}
			    	new Float:pos[3];
			    	new v = GetPlayerVehicleID(playerid);
			    	if(v == 0 || VehInfo[v][vDriver] != playerid)
			    	{
			    		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, вы должны быть за рулем автомобиля.");
						goto stop_ask;
			    	}
					GetVehiclePos(v, Arr3<pos>);
					if(GetVehicleDistanceFromPoint(vehicleid, Arr3<pos>) > 10)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, авто механика должен быть рядом с вашим.");
						goto stop_ask;
			    	}
			    	if(GetPlayerDistanceFromPoint(offerid, Arr3<pos>) > 10)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, механик должен быть рядом с вашим автомобилем.");
						goto stop_ask;
			    	}
					if(VehInfo[vehicleid][vFuel] < ammount)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У механика уже нет столько топлива.");
						goto stop_ask;
					}
					if(VehInfo[v][vFuel] + ammount > GetVehicleMaxFuel(v))
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "К вам не влезет столько топлива.");
						goto stop_ask;
					}

					if(MyGetPlayerMoney(playerid) < AskAmount2[playerid])
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
						goto stop_ask;
					}
					VehInfo[v][vFuel] += float(ammount);
					VehInfo[vehicleid][vFuel] -= float(ammount);
					Job.GivePlayerWage(offerid, AskAmount2[playerid]);
					MyGivePlayerMoney(playerid, -AskAmount2[playerid]);

					IFace.Veh_Update(VehInfo[v][vDriver], 0);
					UpdateVehicleLabel(vehicleid);

					SendFormatMessage(playerid, COLOR_GREEN, string, "Вы согласились на заправку от %s'а", AskOffer[playerid]);
					SendFormatMessage(offerid, COLOR_GREEN, string, "%s согласился на заправку своего авто", ReturnPlayerName(playerid));
					format(string, sizeof(string), "заправляет автомобиль %s'а.", ReturnPlayerName(playerid));
					PlayerAction(offerid, string);
				}
			}
		}
        else
		{
			SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "%s вышел с сервера - запрос не актуален.", AskOffer[playerid]);
		}
	}
	else // KEY_NO // OnPlayerYNStateChange
	{
	no_ask:
        if(AskWhat[playerid] != 0)
		{
			if(offerid == INVALID_PLAYER_ID || (IsPlayerLogged(offerid) && strcheck(AskOffer[playerid], ReturnPlayerName(offerid))))
			{
			    switch(AskWhat[playerid])
			    {
			    	case ASK_INVITE_JOB:
					{
		        		SendClientMessage(playerid, COLOR_LIGHTRED, "Вы отказались устраиваться на работу");
					}
				    case ASK_POLICE_FINE:
				    {
				    	SendClientMessage(playerid, COLOR_LIGHTRED, "Вы отказались от оплаты штрафа");
				    	SendFormatMessage(offerid, COLOR_LIGHTRED, string, "%s отказался от оплаты штрафа. {FFFFFF}Арестуйте его!", ReturnPlayerName(playerid));
				    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				    	{
							format(string, sizeof(string), "- %s %s говорит: Выйдите из машины с поднятыми руками! (( %s ))", GetPlayerRank(playerid), ReturnPlayerName(playerid), ReturnPlayerName(offerid));
							ProxDetector(playerid, 30.0, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, 0xE6E6E6E6, 0xC8C8C8C8);
							PlayerPlaySound(playerid, 34403, 0, 0, 0);
							PlayerPlaySound(offerid, 34403, 0, 0, 0);
							ShowPlayerHint(playerid, "_~b~Полицейский~w~ просит вас выйти из транспорта");
							PursuitStatus[playerid] = PS_WAIT_OUT_VEH;
							PursuitCount[playerid] = 15;
				    	}
				    	PursuitAllowArrest[playerid] = true;
				    }
				    default:
				    {
				    	if(offerid == INVALID_PLAYER_ID)
				    	{
				    		SendClientMessage(playerid, COLOR_LIGHTRED, "Предложение отклонено");
				    	}
				    	else
				    	{
				    		SendFormatMessage(playerid, COLOR_LIGHTRED, string, "Вы отклонили предложение от %s", AskOffer[playerid]);
							SendFormatMessage(offerid, COLOR_LIGHTRED, string, "%s отклонил ваше предложение", ReturnPlayerName(playerid));
				    	}

				    }
				}
			}
			else
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, string, "%s вышел с сервера - запрос не актуален", AskOffer[playerid]);
			}
		}
	}
stop_ask:
	StopAsking(playerid);
	return true;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
	printf("Incoming connection for player ID %i [%s: %i]", playerid, ip_address, port);
	return true;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success)
    {
    	printf("FAILED RCON LOGIN BY IP %s USING PASSWORD %s", ip, password);

    	new string[128];
        foreach(Player, i)
        {
            if(!strcmp(ip, ReturnPlayerIP(i), true))
            {
                format(string, sizeof(string), "[AdmWrn]: %s[%d] пытается авторизоваться под rcon с неверным паролем", ReturnPlayerName(i), i);
				SendAdminMessage(COLOR_LIGHTRED, string);
                if(PlayerInfo[i][pAdmin] < ADMIN_DEVELOPER || !AdminDuty[i])
                {
                	Kick(i);
                }
                return true;
            }
        }
    	format(string, sizeof(string), "[AdmWrn]: Попытка rcon-авторизации с неверным паролем [IP: %s]", ip);
		SendAdminMessage(COLOR_LIGHTRED, string);
        //BlockIpAddress(ip, 3600 * 1000);// 1 hour
    }
	return 1;
}

Public: OnPlayerVehicleCrash(playerid, Float:damage)
{
	new tmp = floatround(damage / DAMAGE_COEFFICIENT);
	new vehicleid = GetPlayerVehicleID(playerid);
	FadeColorForPlayer(playerid, 255, 0, 0, tmp, 255, 0, 0, 0, tmp);
	MySetPlayerHealth(playerid, MyGetPlayerHealth(playerid) - damage);

	// Работа Дальнобойщика
#if defined	_job_job_trucker_included
	if(TruckerStatus[playerid] > 0 && IsPlayerInVehicle(playerid, TruckerVeh[playerid]))
	{
	    TruckerDmg[playerid] += damage * 10.0;
	}
#endif	
#if defined	_job_part_delivery_included
	if(DeliveryVehLoadCount[vehicleid] > 0)
	{
		DeliveryVehLoadDamage[vehicleid] -= floatround(damage);
		ProgressBarUpdate(playerid, DeliveryVehLoadDamage[vehicleid], 100);
	}
#endif	
	return true;
}

/*public OnTrailerUpdate(playerid, vehicleid)
{// Every millisecond
    return 1;
}*/

stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:			return 331;
		case 2..8:		return weaponid + 331;
        case 9:			return 341;
		case 10..15:	return weaponid + 311;
		case 16..18:	return weaponid + 326;
		case 22..29:	return weaponid + 324;
		case 30, 31:	return weaponid + 325;
		case 32:		return 372;
		case 33..45:	return weaponid + 324;
		case 46:		return 371;
	}
	return 0;
}

Public: QuickTimer()
{	//	WARNING! ТАЙМЕР ВЫЗЫВАЕТСЯ 10 РАЗ В СЕКУНДУ, НЕ НАГРУЖАТЬ ЛИШНИМ
    new panelsx, doorsx, lightsx, tiresx;
    foreach(Vehicle, v)
    {
        if(VehInfo[v][vFlashMode])
        {
        	GetVehicleDamageStatus(v, panelsx, doorsx, lightsx, tiresx);
			switch(VehInfo[v][vFlashMode])
			{
				case 1:
				{   //  просто моргание то одной, то другой фарой
				    switch(VehInfo[v][vFlashState])
					{
				        case 0:	UpdateVehicleDamageStatus(v, panelsx, doorsx, 2, tiresx);
					    case 5:	UpdateVehicleDamageStatus(v, panelsx, doorsx, 8, tiresx);
						case 9:
							VehInfo[v][vFlashState] = -1;
					}
				}
				case 2:
				{//  3 маргания то одной, то другой фарой
				    switch(VehInfo[v][vFlashState])
					{
				        case 0, 2, 6, 8, 14:				UpdateVehicleDamageStatus(v, panelsx, doorsx, 2, tiresx);
						case 1, 3, 5, 7, 9, 11, 13, 15, 17:	UpdateVehicleDamageStatus(v, panelsx, doorsx, 5, tiresx);
						case 4, 10, 12, 16, 18:				UpdateVehicleDamageStatus(v, panelsx, doorsx, 8, tiresx);
						case 19:
						{
						    UpdateVehicleDamageStatus(v, panelsx, doorsx, 5, tiresx);
							VehInfo[v][vFlashState] = -1;
						}
					}
				}
				case 3:
				{
	                switch(VehInfo[v][vFlashState])
					{//  2 одной, 2 другой (быстро)
				        case 0, 2:		UpdateVehicleDamageStatus(v, panelsx, doorsx, 2, tiresx);
						case 1, 3, 5:	UpdateVehicleDamageStatus(v, panelsx, doorsx, 5, tiresx);
						case 4, 6:		UpdateVehicleDamageStatus(v, panelsx, doorsx, 8, tiresx);
						case 7:
						{
						    UpdateVehicleDamageStatus(v, panelsx, doorsx, 5, tiresx);
							VehInfo[v][vFlashState] = -1;
						}
					}
				}
				case 4:
				{   //  быстрое моргание 2 фарами
	                switch(VehInfo[v][vFlashState])
					{
						case 0, 2, 4, 6:	UpdateVehicleDamageStatus(v, panelsx, doorsx, 0, tiresx);
						case 1, 3, 5, 7:	UpdateVehicleDamageStatus(v, panelsx, doorsx, 5, tiresx);
						case 10:
							VehInfo[v][vFlashState] = -1;
					}
				}
				case 5:
				{   //  быстрое моргание то одной то другой
					if(VehInfo[v][vFlashState] == 0)
						UpdateVehicleDamageStatus(v, panelsx, doorsx, 2, tiresx);
					else
					{
					   	UpdateVehicleDamageStatus(v, panelsx, doorsx, 8, tiresx);
						VehInfo[v][vFlashState] = -1;
					}
				}
			}
			VehInfo[v][vFlashState]++;
        }
    }
    #if defined _interface_cam_effect_included
   		IFace.CamEffect_UpdateTime();
   	#endif
    foreach(LoginPlayer, i)
    {
    	#if defined _interface_cam_effect_included
	    	IFace.CamEffect_Update(i);
    	#endif
    	#if defined _police_pursuit_included	
    		Police.Pursuit_QuickTimer(i);
    	#endif	
    }
    return true;
}

public OnPlayerChangeArmour(playerid, Float:oldArmour, Float:armour)
{
	PlayerInfo[playerid][pSaveArmour] = armour;

	if((oldArmour <= 0 && armour > 0) || (oldArmour > 0 && armour <= 0))	
	{
		IFace.ToggleGroup(playerid, IFace.INTERFACE, true);
	}
	return true;
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerNPC(playerid))	return true;
	
	if(IsPlayerLogged(playerid) == 0)
	{
		//	Login Cam
		if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && gPlayerRegged[playerid] != REG_STATE_UNDEFINED && gPlayerShowLoginCam[playerid] == false)
		{
			ShowPlayerLogin(playerid);
		}
	}
	else
	{
		new string[512];
		new pstate = GetPlayerState(playerid);
		new Float:X, Float:Y, Float:Z, Float:A,
			Float:health,
			vehicleid = GetPlayerVehicleID(playerid);

		//	Стрелка GPS над авто
		if(pstate != PLAYER_STATE_DRIVER && gps_Data[playerid][GPS_OBJ])
		{
			DestroyDynamicObject(gps_Data[playerid][GPS_OBJ]), gps_Data[playerid][GPS_OBJ] = INVALID_STREAMER_ID;
		}
		else if(pstate == PLAYER_STATE_DRIVER)
		{
			// Спидометр
			IFace.Veh_Update(playerid, 1);

			if(gps_Data[playerid][GPS_CP] > 0)
			{
				if(gps_Data[playerid][GPS_OBJ] == 0)
					gps_Data[playerid][GPS_OBJ] = CreateDynamicObject(19132, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, playerid);//1318,19130
				//	Угол поворота
				new Float:lX = floatabs(X - gps_Data[playerid][GPS_POS][0]);
				new Float:lY = floatabs(Y - gps_Data[playerid][GPS_POS][1]);
				new Float:angle = atan2(lX, lY);
				if(X > gps_Data[playerid][GPS_POS][0] && Y > gps_Data[playerid][GPS_POS][1])		angle = 180.0 + (90.0 - angle);
				else if(X > gps_Data[playerid][GPS_POS][0] && Y < gps_Data[playerid][GPS_POS][1])	angle += 90.0;
				else if(X < gps_Data[playerid][GPS_POS][0] && Y > gps_Data[playerid][GPS_POS][1])	angle += 270.0;
				else if(X < gps_Data[playerid][GPS_POS][0] && Y < gps_Data[playerid][GPS_POS][1])	angle = (90 - angle);
				angle -= A;
				AttachDynamicObjectToVehicle(gps_Data[playerid][GPS_OBJ], vehicleid, 0.0, 0.0, 2.0, 0.0, -100.0, angle);
			}
			
			foreach(LoginPlayer, i)
			{
				if(GetPVarInt(i, "Police:Spikes"))
				{
					Streamer_GetFloatData(STREAMER_TYPE_OBJECT, GetPVarInt(i, "Police:Spikes"), E_STREAMER_X, X);
					Streamer_GetFloatData(STREAMER_TYPE_OBJECT, GetPVarInt(i, "Police:Spikes"), E_STREAMER_Y, Y);
					Streamer_GetFloatData(STREAMER_TYPE_OBJECT, GetPVarInt(i, "Police:Spikes"), E_STREAMER_Z, Z);
					if(IsPlayerInRangeOfPoint(playerid, 3.0, X, Y, Z))
					{
				        new panels, doors, lights, tires;
				        GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
				        tires = encode_tires(1, 1, 1, 1);
				        UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
					}
				}
			}
		}

		if(pstate == PLAYER_STATE_DRIVER || pstate == PLAYER_STATE_PASSENGER)
		{
			new modelid = GetVehicleModel(vehicleid);
	        new Speed = GetVehicleSpeed(vehicleid);
	        MyGetVehiclePos(vehicleid, X, Y, Z, A);
	        GetVehicleHealth(vehicleid, health);

	        if(VehInfo[vehicleid][vModelType] != MTYPE_BIKE && modelid != 432)
			{	
				if(EffectCheck{playerid} == 0 && OldSpeed[playerid] - Speed > 20)
				{	//  crash
					new Float:damage = (floatround(OldSpeed[playerid] - Speed) - 20) * DAMAGE_COEFFICIENT;
					CallLocalFunction("OnPlayerVehicleCrash", "if", playerid, damage);
				}
				OldSpeed[playerid] = Speed;
			}
		}
		else
		{
			MyGetPlayerPos(playerid, X, Y, Z, A);
		}
		//---
		if(GetPVarInt(playerid, "Police:Pursuit:Handsup") && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_HANDSUP)
		{
			MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
		}
		//	---	Attach weapon
		if(GetTickCount() - armedbody_pTick[playerid] > 113)
		{
			new slots[] = { 3, 5 }, weapon, ammo, pArmedWeapon = GetPlayerWeapon(playerid);
			for(new i = 0; i < sizeof(slots); i++)
			{
				GetPlayerWeaponData(playerid, slots[i], weapon, ammo);
				if(weapon && ammo && pArmedWeapon != weapon)
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_SLOT_WEAPON + i) == 0)
					{
						SetPlayerAttachedObject(playerid, ATTACH_SLOT_WEAPON + i, GetWeaponModel(weapon), attachWeaponPos[i][WA_BONE], Arr6<attachWeaponPos[i][WA_POS]>, 1.0, 1.0, 1.0);
					}
				}
				else if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_SLOT_WEAPON + i))
				{
					RemovePlayerAttachedObject(playerid, ATTACH_SLOT_WEAPON + i);
				}
			}
			//---
			armedbody_pTick[playerid] = GetTickCount();
		}
		// Debug TextDraw
		if(showDebug[playerid])
		{
		    new Float:mapZ, status[32] = "~r~flying";
			MapAndreas_FindZ_For2DCoord(X, Y, mapZ);
			if(GetPlayerInterior(playerid) > 0)				status = "~y~inter";
			else if(Z < 0.1 && IsPlayerSwiming(playerid))	status = "~b~swiming";
			else if(Z < mapZ + 2.5)							status = "~g~ground";

			GetPlayerHealth(playerid, health);
			format(string, 512, "~y~DEBUG:~n~\
								~w~x: %.1f, y: %.1f, z: %.1f, angel: %.0f~n~\
								~w~mapZ: %.2f   %s~w~~n~\
								Interior: %02d, Virt.World: %02d~n~\
								Dialogid: %d~n~\
								pState: %d, pSpeed: %d~n~\
								InGangZone: %d~n~\
								PickupedBiz: %d",
								X, Y, Z, A,
								mapZ, status,
								GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid),
								Dialogid[playerid], pstate, GetPlayerSpeed(playerid), InGangZone[playerid], PickupedBiz[playerid]);
			PlayerTextDrawSetString(playerid, debugTD, string);
		}
	}
	return true;
}

public OnPlayerStreamIn(playerid, forplayerid)
{// playerid попадает в зону для forplayerid
	if(InMask[forplayerid])	ShowPlayerNameTagForPlayer(playerid, forplayerid, false);
	else 					ShowPlayerNameTagForPlayer(playerid, forplayerid, pNameTags[playerid]);
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{// playerid выходит из зоны forplayerid
	/*if(SpectateID[forplayerid] == playerid)
	{
		UpdatePlayerSpectate(forplayerid, playerid);
		Timer_UpdatePlayerSpectate(forplayerid, playerid);
	}*/
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(VehInfo[vehicleid][vModelType] == MTYPE_TRAIN || VehInfo[vehicleid][vLocked] > 0)
		SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, true);
	else
		SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, false);
	return true;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return true;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(playerid != clickedplayerid)
	{
	    //  Phone system
	    if(IsPlayerLogged(clickedplayerid))
		{
	        SetPVarInt(playerid, "Phone:ClickPlayer", clickedplayerid);
            Dialog_Show(playerid, Dialog:Phone_Main);
		}
	}
	else
	{
		ShowDialog(playerid, DMENU_MAIN);
	}
	return true;
}

stock ShowLicenses(giveplayerid, playerid)
{
	new lstring[1024];
	format(lstring, sizeof(lstring),	MAIN_COLOR "• {FFFFFF}Права категории A:\t%s\n\
									"	MAIN_COLOR "• {FFFFFF}Права категории B:\t%s\n\
									"	MAIN_COLOR "• {FFFFFF}Права категории C:\t%s\n\
									"	MAIN_COLOR "• {FFFFFF}Права категории D:\t%s\n\
									"	MAIN_COLOR "• {FFFFFF}Лицензия на оружие:\t%s",
									(PlayerInfo[playerid][pCarLicA]) ? (SCOLOR_GREEN "[Имеется]") : ("{FF6347}[Отсутствует]"),
									(PlayerInfo[playerid][pCarLicB]) ? (SCOLOR_GREEN "[Имеется]") : ("{FF6347}[Отсутствует]"),
									(PlayerInfo[playerid][pCarLicC]) ? (SCOLOR_GREEN "[Имеется]") : ("{FF6347}[Отсутствует]"),
									(PlayerInfo[playerid][pCarLicD]) ? (SCOLOR_GREEN "[Имеется]") : ("{FF6347}[Отсутствует]"),
									(PlayerInfo[playerid][pGunLic])	? (SCOLOR_GREEN "[Имеется]") : ("{FF6347}[Отсутствует]"));

	new string[64];
    if(playerid == giveplayerid) string = "Список лицензий";
	else format(string, sizeof(string), "%s[%d]: Лицензии", ReturnPlayerName(playerid), playerid);
	return MyShowPlayerDialog(giveplayerid, DMODE_NONE, DIALOG_STYLE_TABLIST, string, lstring, "Закрыть", "", 0);
}

stock ShowPass(giveplayerid, playerid)
{
	new string[512], jobname[32] = "{FF6347}Отсутствует";
    if(PlayerInfo[playerid][pFaction] > 0)
	{
		format(string, sizeof(string),	MAIN_COLOR "• {FFFFFF}Фракция:\t" MAIN_COLOR "%s\n\
									"	MAIN_COLOR "• {FFFFFF}Ранг:\t" MAIN_COLOR "%s\n",
										GetFactionName(PlayerInfo[playerid][pFaction]),
										GetPlayerRank(playerid));
	}
    else
	{
		new job = Job.GetPlayerJob(playerid);
		if(job > 0 && IsLegalJob(job)) format(jobname, 32,	MAIN_COLOR "%s", GetJobName(job));
		format(string, sizeof(string), "%s" MAIN_COLOR "• {FFFFFF}Место работы:\t%s\n", string, jobname);
	}
    /*format(string, sizeof(string), "%s"MAIN_COLOR"• {FFFFFF}Законопослушность:\t%s%d\n\n\
    								"MAIN_COLOR"• {FFFFFF}Лицензия на вождение:\t%s\n\
									"MAIN_COLOR"• {FFFFFF}Лицензия на оружие:\t%s",
									string,
									PlayerInfo[playerid][pLaw] > 0 ? (""MAIN_COLOR"") : ("{FF6347}"),
									PlayerInfo[playerid][pLaw],
									PlayerInfo[playerid][pCarLic] ? (""MAIN_COLOR"Имеется") : ("{FF6347}Отсутствует"),
    								PlayerInfo[playerid][pGunLic] ? (""MAIN_COLOR"Имеется") : ("{FF6347}Отсутствует"));*/
	new title[48];
	if(playerid == giveplayerid) title = "Документы";
	else format(title, 48, "%s[%d]: Документы", ReturnPlayerName(playerid), playerid);
	return MyShowPlayerDialog(giveplayerid, DMODE_NONE, DIALOG_STYLE_TABLIST, title, string, "Закрыть", "");
}

stock ShowStats(giveplayerid, playerid)
{
	new string[128], lstring[1792], account[64];

	if(PlayerInfo[playerid][pVip])
	{
		mysql_format(g_SQL, string, sizeof(string), "SELECT FROM_UNIXTIME(`vipunix`) FROM `players` WHERE `id` = '%d'", PlayerInfo[playerid][pUserID]);
		new Cache:result = mysql_query(g_SQL, string);
		cache_get_value_index(0, 0, string);
		cache_delete(result);
		format(account, sizeof(account), "Премиум\n{FFFFFF}Оплачен до:\t\t\t{B1C8FB}%s", string);
	}
	else account = "Стандартный";
	//new IPadress[16];
	//GetPlayerIp(playerid, IPadress, sizeof(IPadress));

	//	Общее
	format(lstring, sizeof(lstring), "{FFFFFF}Имя:\t\t\t\t{B1C8FB}%s\n\
	                                {FFFFFF}Аккаунт:\t\t\t{B1C8FB}%s\n\
	                                {FFFFFF}Номер аккаунта:\t\t{B1C8FB}%d\n\
									\n\
									{FFFFFF}Уровень:\t\t\t{B1C8FB}%d\n\
									{FFFFFF}Опыт:\t\t\t\t{B1C8FB}%d/%d\n\
									{FFFFFF}Апгрейды:\t\t\t{B1C8FB}%d\n\
									{FFFFFF}Предупреждения:\t\t{B1C8FB}%d/3\n\
									\n\
									{FFFFFF}Скин ID:\t\t\t{B1C8FB}%d\n\
									{FFFFFF}Законопосл.:\t\t\t{B1C8FB}%d\n\
									{FFFFFF}Розыск:\t\t\t{B1C8FB}%d\n",
													ReturnPlayerName(playerid),
													account,
													PlayerInfo[playerid][pUserID],
													PlayerInfo[playerid][pLevel],
													PlayerInfo[playerid][pExp], getNextLevelExp(playerid),
													PlayerInfo[playerid][pUpgrade],
													PlayerInfo[playerid][pWarns],
													PlayerInfo[playerid][pSkin],
													PlayerInfo[playerid][pLaw],
													GetPlayerWantedLevel(playerid));
	format(lstring, sizeof(lstring), "%s\
									{FFFFFF}Смертей:\t\t\t{B1C8FB}%d\n\
									{FFFFFF}Убийств:\t\t\t{B1C8FB}%d\n\
									\n\
									{FFFFFF}Деньги:\t\t\t{B1C8FB}$%d.00\n\
									{FFFFFF}В банке:\t\t\t{B1C8FB}$%.2f\n\
									{FFFFFF}Монеты:\t\t\t{B1C8FB}%d шт\n",
													lstring,
													PlayerInfo[playerid][pDeaths],
													PlayerInfo[playerid][pKills],
													PlayerInfo[playerid][pMoney],
													PlayerInfo[playerid][pBank],
													GetPlayerCoins(playerid));

	//	Работа
	format(lstring, sizeof(lstring), "%s\n{FFFFFF}Работа:\t\t\t{B1C8FB}%s\n", lstring, GetJobName(Job.GetPlayerJob(playerid)));
	if(Job.GetPlayerJob(playerid))
	{
		format(lstring, sizeof(lstring), "%s{FFFFFF}Контракт:\t\t\t{B1C8FB}%d минут\n", lstring, Job.GetPlayerContract(playerid));
	}

	//	Организация
	new fname[32] = "Отсутствует";
	if(PlayerInfo[playerid][pFaction] > 0)
	{
		strput(fname, GetFactionName(PlayerInfo[playerid][pFaction]));
	}
	format(lstring, sizeof(lstring), "%s\n{FFFFFF}Организация:\t\t\t{B1C8FB}%s\n", lstring, fname);
	if(PlayerInfo[playerid][pFaction] > 0)
	{
		format(lstring, sizeof(lstring),
			"%s{FFFFFF}Должность:\t\t\t{B1C8FB}%s\n\
			{FFFFFF}Ранг:\t\t\t\t{B1C8FB}%d\n",
				lstring, GetPlayerRank(playerid), PlayerInfo[playerid][pRank]);
	}

	//	Жилье
	new h = FoundHouse(GetPlayerHouse(playerid));
	if(h != (-1))
	{
		format(lstring, sizeof lstring, "%s\n{FFFFFF}Дом:\t\t\t\t{B1C8FB}%s, %d", lstring, GetPointArea(HouseInfo[h][hX], HouseInfo[h][hY]), HouseInfo[h][hID]);
	}
	if(PlayerInfo[playerid][pRent] > 0)
	{
		h = FoundHouse(PlayerInfo[playerid][pRent]);
		if(h != (-1))
		{
			format(lstring, sizeof lstring, "%s\n{FFFFFF}Проживание:\t\t\t{B1C8FB}%s, %d\n", lstring, GetPointArea(HouseInfo[h][hX], HouseInfo[h][hY]), HouseInfo[h][hID]);
		}
	}
	else if(PlayerInfo[playerid][pRent] < 0)
	{
		format(lstring, sizeof lstring, "%s\n{FFFFFF}Проживание:\t\t\t{B1C8FB}Los Santos, Jefferson\n", lstring);
	}
	else if(PlayerInfo[playerid][pHousing] > 0)
	{
		h = FoundHouse(PlayerInfo[playerid][pHousing]);
		if(h != (-1))
		{
			format(lstring, sizeof lstring, "%s\n{FFFFFF}Проживание:\t\t\t{B1C8FB}%s, %d\n", lstring, GetPointArea(HouseInfo[h][hX], HouseInfo[h][hY]), HouseInfo[h][hID]);
		}
	}
	else
	{
		strcat(lstring, "\n{FFFFFF}Проживание:\t\t\t{B1C8FB}Отсутствует\n");
	}

	//	Бизнес
	new b = FoundBiz(GetPlayerBiz(playerid));
	if(b != (-1))
	{
		format(lstring, sizeof(lstring),
			"%s\n{FFFFFF}Бизнес:\t\t\t{B1C8FB}%s\n\
			{FFFFFF}Название:\t\t\t{B1C8FB}'%s'\n\
			{FFFFFF}Район:\t\t\t\t{B1C8FB}%s\n",
				lstring, BizTypeData[ BizInfo[b][bType] ][btName], BizInfo[b][bName],
				GetPointArea(BizInfo[b][bPos][0], BizInfo[b][bPos][1]));
	}

	strcat(lstring, "                  "MAIN_COLOR"________________________________\n\
						\t\t       Silver Break © 2016\n\
						\t\t\t "SITE_ADRESS);

    if(playerid == giveplayerid) string = "Личная статистика";
	else format(string, sizeof(string), "%s[%d]: Статистика", ReturnPlayerName(playerid), playerid);
	return MyShowPlayerDialog(giveplayerid, DMENU_STATS, DIALOG_STYLE_MSGBOX, string, lstring, "Ок", ((openWithMenu[playerid]) ? ("Назад") : ("Закрыть")), 0);
}

stock ShowDialog(playerid, dialogid, action = INVALID_DIALOGID)
{
	if(dialogid != -1 && Dialogid[playerid] != INVALID_DIALOGID) return true;

	new string[128], lstring[1024];
	if(action == INVALID_DIALOGID) action = dialogid;
	switch(dialogid)
	{
	    case INVALID_DIALOGID:	// Скрыть диалоговое окно
	    {
	        MyHidePlayerDialog(playerid);
	    }
	    case DMODE_EMAIL:	// Ввод почты
	    {
		    strcat(lstring, "Введите email адрес своей почты в окошко и нажмите 'Ввести'\n\
		    				Это даст возможность поменять пароль в случае утери или взлома");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Указать email адрес", lstring, "Ввести", "Назад", 0);
	    }
	    case DMODE_NEWBIE:
	    {
	    	strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Что мне делать?\n\
	    	"MAIN_COLOR"• {FFFFFF}Как заработать денег?\n\
	    	"MAIN_COLOR"• {FFFFFF}Как получить лидерку?\n\
	    	"MAIN_COLOR"• {FFFFFF}Какие фракции есть на сервере?\n\
	    	"MAIN_COLOR"• {FFFFFF}Как получить админку?\n\
	    	"MAIN_COLOR"• {FFFFFF}Что за зеленая полоска сверху\n\
	    	"MAIN_COLOR"• {FFFFFF}Другой вопрос");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Информация", lstring, "Выбрать", "Выход", 0);
	    }
	    case DMODE_ADMINS:// Админы онлайн
	    {
	        new bool:found;
			foreach(LoginPlayer, i)
			{
	            if(GetPlayerAdmin(i))
	            {
	                format(lstring, sizeof lstring, "%s%s %s[%d]\n", lstring, GetPlayerAdminStatus(i), ReturnPlayerName(i), i);
	                found = true;
	            }
	        }
	        if(!found)
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На сервере нет администраторов онлайн.");
	        MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_LIST, "Онлайн администрация", lstring, "Ок");
	    }
	    case DMODE_ANIMLIST:
	    {
			for(new i; i < sizeof(AnimList); i++)
			{
			    format(lstring, sizeof(lstring), "%s[%d] %s\n", lstring, i+1, AnimList[i][ANIM_TITLE]);
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Список анимаций", lstring, "Проиграть", "Закрыть");
	    }
	    case DMODE_LAWYER:
	    {
	        if(PlayerInfo[playerid][pJailTime] > 0) return 1;
	        new wl = -PlayerInfo[playerid][pJailTime];
	        new wl2 = wl-1;
	        // Без услуг адвоката
	        strcat(lstring, "{FFFFFF}Без адвоката:\t\t[0$]\t\t");
	        if(wl == 0)			format(lstring, sizeof lstring, "%s{33AA33}[Освобождение]\n", lstring);
	        else if(wl < 4)		format(lstring, sizeof lstring, "%s{8D8DFF}[Штраф: %d$]\n", lstring, wl * FINE_PER_WANTED);
	        else 				format(lstring, sizeof lstring, "%s{FF6347}[Тюрьма: %d дн.]\n", lstring, wl - 3);
			// С услугами адвоката
			format(lstring, sizeof lstring, "%s{FFFFFF}С адвокатом:\t\t[%d$]\t\t", lstring, floatround(wl * FINE_PER_WANTED * 1.5));
	        if(wl2 <= 0)		format(lstring, sizeof lstring, "%s{33AA33}[Освобождение]\n", lstring);
	        else if(wl2 < 4)	format(lstring, sizeof lstring, "%s{8D8DFF}[Штраф: %d$]\n", lstring, wl2 * FINE_PER_WANTED);
	        else 				format(lstring, sizeof lstring, "%s{FF6347}[Тюрьма: %d дн.]\n", lstring, wl2 - 3);
	        // Оставить залог
			format(lstring, sizeof lstring, "%s{FFFFFF}Оставить залог:\t[%d coins]\t{33AA33}[Освобождение]", lstring, wl*5);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Вам предоставили адвоката", lstring, "Выбрать", "Закрыть");
	    }
	    case DMODE_POLICE_HQ:
	    {
	    	if(PM_Type[playerid] == 0)
	    	{
	    		if(PoliceMission[0][pmNum] == 0)
	    		{
	    			lstring = "{AFAFAF}Нет ни одного свободного задания.";
	    		}
	    		else
	    		{
			 		for(new x = 0; x < sizeof(PoliceMission); x++)
				    {
				        if(PoliceMission[x][pmNum] == 0)	break;
				        new lefttime = PoliceMission[x][pmUNIX] - gettime();
				        new leftmin = lefttime / 60;
				        new leftsec = lefttime % 60;
				        strput(string, GetPointArea(HouseInfo[ PoliceMission[x][pmPlace] ][hX], HouseInfo[ PoliceMission[x][pmPlace] ][hY]));
				        format(lstring, sizeof(lstring), "%s{8D8DFF}#%d: {FFFFFF}Прибыть по %s, %d {8D8DFF}(осталось: %02d:%02d)\n",lstring, PoliceMission[x][pmNum],
																																	string,
																																	HouseInfo[ PoliceMission[x][pmPlace] ][hID],
																																	leftmin, leftsec);
					}
	    		}
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Los Santos Police Dept.", lstring, "Принять", "Закрыть");
			}
			else
			{
		        new lefttime = PM_UNIX[playerid] - gettime();
		        if(PM_Type[playerid] == 10) lefttime *= -1;
		        new leftmin = lefttime / 60;
		        new leftsec = lefttime % 60;
			    strcat(lstring, "{B1C8FB}Текущее задание:\n");
			    if(PM_Type[playerid] == 2 && PM_Step[playerid] == 1)
			    {
				    strcat(lstring, "{FFFFFF}Отвезти подозреваемого в участок\n");
			    }
			    else if(PM_Type[playerid] == 3)
			    {
			    	if(PM_Step[playerid] == 1)
			    	{
			   			format(lstring, sizeof(lstring), "%s{FFFFFF}Найти %s в указанной зоне поиска\n", lstring, ReturnVehicleName(PM_Place[playerid]));
			    	}
			   		else if(PM_Step[playerid] == 2)
			   		{
			   			strcat(lstring, "{FFFFFF}Обозначить угнанную машину, подойдя к ней\n");
			   		}
			    }
			    else if(PM_Type[playerid] == 10)
			    {
			   		format(lstring, sizeof(lstring), "%s{FFFFFF}Остановите и задержите подозреваемого %s[%d]\n", lstring, ReturnPlayerName(PM_Place[playerid]), PM_Place[playerid]);
			    }
			    else
			    {
			    	format(lstring, sizeof(lstring), "%s{FFFFFF}Поступил вызов из дома %d по Los Santos\n", lstring, HouseInfo[PM_Place[playerid]][hID]);
			    }
			    format(lstring, sizeof(lstring), "%s{B1C8FB}Осталось: {FFFFFF}%02d:%02d\n", lstring, leftmin, leftsec);
		 		strcat(lstring, "\n{FF6347}Для отмены задания введите 'cancel' или 'отмена':");
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "{000CFF}Los Santos Police Dept.", lstring, "Ввести", "Закрыть");
			}
	    }
	    case DMODE_POLICE_MISSION:
	    {
			switch(PM_Type[playerid])
			{
			    case 1:// Ложный вызов
			    {
			        if(random(2) == 0)
			        {
				        strcat(lstring, "Незнакомка: 'Здравствуйте, офицер. Да, это я вас вызывала...\n\
										Я услышала какой-то шум на заднем дворе и забеспокоилась.\n\
										Оказалось, что это была чья-то собака. Извините за беспокойство.'");
			        }
			        else
			        {
				        strcat(lstring, "Незнакомец: 'Прошу прощения, офицер.\n\
										Я услышал выстрелы и немедленно позвонил в полицию!\n\
										Это мой сынишка играет в свои видеоигры. Еще раз извините.'");
			        }
			    }
			    case 2:// Буйный человек
			    {
			        strcat(lstring, "Незнакомка: 'К нам вломился какой-то мужчина и начал угрожать!\n\
									Я вижу его первый раз в жизни. Сделайте что-нибудь, пожалуйста!'\n\
			        				(крики из комнаты): 'Сучие ублюдки! Я тут все вам разнесу!'");
			    }
			    case 3:// Угон машины
			    {
			        strcat(lstring, "Незнакомец: 'Эта козлина угнала мою машину прямо из под окна!\n\
			        				Он поехал в ту сторону! Верните мою машину, пожалуйста! Она мне дорога.'" );
			    }
			    case 4:// Пропал человек
			    {
			    }
			}
			format(string, sizeof(string), "Дом #%d", HouseInfo[ PM_Place[playerid] ][hID]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, string, lstring, "Принять", "", 0);
	    }
	    case DMODE_POLICE_DUTY:
	    {
	    	new str[2][32];
	    	if(GetPlayerWantedLevel(playerid))	format(str[0], 32, "[-$%d]", GetPlayerWantedLevel(playerid) * FINE_PER_WANTED);
	    	else 								strcat(str[0], "{AFAFAF}[Нет штрафов]");

	    	if(PlayerInfo[playerid][pGunLic])	strcat(str[1], "{AFAFAF}[Недоступно]");
	    	else
	    	{
	    		if(PlayerInfo[playerid][pShooting] >= 4)	strcat(str[1], "[-$350]");
		    	else 										strcat(str[1], "{AFAFAF}[Недоступно]");
	    	}
	    	format(lstring, sizeof(lstring),
	    		""MAIN_COLOR"• {FFFFFF}Оплатить штрафы\t%s\n\
	    		"MAIN_COLOR"• {FFFFFF}Получить лицензию на оружие\t%s", str[0], str[1]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Полицейский участок", lstring, "Выбрать", "Закрыть");
	    }
	    case DMODE_POLICE_WANTED:
	    {
		    format(lstring, sizeof(lstring), "\n{FFFFFF}Вы хотите оплатить штраф в размере {44B2FF}$%d{FFFFFF}?\n\t", (GetPlayerWantedLevel(playerid) * FINE_PER_WANTED));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Оплата штрафа", lstring, "Оплатить", "Назад");
	    }
	    case DMODE_POLICE_STOPMENU:
	    {
	    	new target = PM_Place[playerid];
	    	new hour; gettime(hour, _, _);
	    	new wl = GetPlayerWantedLevel(target);
	    	//new vehicleid = GetPlayerVehicleID(target);
	    	//if(vehicleid == 0)
	    	new vehicleid = gLastVehicle[target];
	    	new _wlstr[24];
	    	if(wl == 0)	format(_wlstr, sizeof(_wlstr), "{33AA33}[Нет розыска]");
	    	else 		format(_wlstr, sizeof(_wlstr), "{FF6347}[Розыск: %d]", wl);
	    	format(string, sizeof(string), "%s %s", ReturnPlayerName(target), _wlstr);
	    	if(wl < 4)
	    	{
	    		if(GetPlayerState(target) == PLAYER_STATE_DRIVER)
	    		{
	    			strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Потребовать выйти\n");
	    		}
	    		else
	    		{
	    			strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Взаимодействие\n\n");
	    		}
	    		if(vehicleid > 0 && GetPVarInt(target, "Pursuit:CheckDoc") == 0)
	    		{
	    			strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Проверить документы\n");
	    		}
	    		else
	    		{
	    			strcat(lstring, "{AFAFAF}• Проверить документы\t{AFAFAF}[Недоступно]\n");
	    		}
	    		if(vehicleid > 0 && GetPVarInt(target, "Pursuit:CheckDrunk") == 0)
	    		{
	    			strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Проверить на опьянение\n");
	    		}
	    		else
	    		{
	    			strcat(lstring, "{AFAFAF}• Проверить на опьянение\t{AFAFAF}[Недоступно]\n");
	    		}
	    		if(vehicleid > 0 && GetPVarInt(target, "Pursuit:CheckLight") == 0 && IsVehicleWithEngine(vehicleid) && (hour <= 5 || hour >= 20))
	    		{
	    			strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Проверить состояние фар\n");
	    		}
	    		else
	    		{
	    			strcat(lstring, "{AFAFAF}• Проверить состояние фар\t{AFAFAF}[Недоступно]\n");
	    		}
		    	if(wl > 0)	strcat(lstring, ""MAIN_COLOR"• {CFB53B}Выписать штраф");
		    	else 		strcat(lstring, ""MAIN_COLOR"• {CFB53B}Закончить проверку");
	    	}
	    	else
	    	{
	    		strcat(lstring, ""MAIN_COLOR"• {CFB53B}Потребовать выйти");
	    	}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, string, lstring, "Выбрать", "");
	    }
	    case DMODE_SHOP:
	    {
			format(lstring, sizeof(lstring),
				"Товар\tЦена\n\
				" MAIN_COLOR "• {FFFFFF}Наручные часы\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Балончик с краской\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Мобильный телефон\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Фейерверк\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Пачка сигарет\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Гамбургер\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Коробка\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Кейс\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Чемодан\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Сумка\t$%d\n\
				" MAIN_COLOR "• {FFFFFF}Рюгзак\t$%d", GetThingCost(THING_WATCH), 
													80, 
													150, 
													GetThingCost(THING_FIREWORK), 
													GetThingCost(THING_CIGARETTE) * 10,
													GetThingCost(THING_CHOCOLATE),
													GetThingCost(THING_BOX),
													GetThingCost(THING_SUITCASE),
													GetThingCost(THING_SUITCASE2),
													GetThingCost(THING_BAG),
													GetThingCost(THING_BAG2));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, "Товары 24/7", lstring, "Купить", "Закрыть");
	    }
	    case DMODE_SEXSHOP:
	    {
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Секс шоп (все по $35)", 	MAIN_COLOR "• {FFFFFF}Двойной фаллоимитатор\n\
																								" MAIN_COLOR "• {FFFFFF}Фаллоимитатор\n\
																		        				" MAIN_COLOR "• {FFFFFF}Вибратор\n\
																		        				" MAIN_COLOR "• {FFFFFF}Серебряный вибратор\n", "Купить", "Закрыть");
	    }
	    case DMODE_HOUSE:
	    {
	        if(PickupedHouse[playerid] >= 0)
	        {
		        new h = PickupedHouse[playerid];
		        new Class = HouseInfo[h][hClass] + 64;
		        if(!HouseInfo[h][hOwnerID])
		        {
					if(HouseInfo[h][hDonate] == 0)
					{
					    format(lstring, sizeof(lstring),
							"{FFFFFF}Класс: "MAIN_COLOR"%c\n{FFFFFF}Интерьер: " MAIN_COLOR "%d\n{FFFFFF}Стоимость: " MAIN_COLOR "%d$", Class, HouseInfo[h][hInt], HouseInfo[h][hPrice]);
					}
					else
					{
					    format(lstring, sizeof(lstring),
							"{CFB53B}Класс: {FFFFFF}%c (премиум)\n{CFB53B}Интерьер: {FFFFFF}%d\n{CFB53B}Стоимость: {FFFFFF}%d монет", Class, HouseInfo[h][hInt], HouseInfo[h][hPrice]);
					}
					format(string, sizeof(string), "Дом #%d", HouseInfo[h][hID]);
					MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, string, lstring, "Купить", "Закрыть");
		        }
	        }
	    }
	    case DMODE_HOUSE_SELL:
	    {
		    strcat(lstring, 	"{B1C8FB}Вы пытаетесь продать свой дом\n\
								Для подтверждения введите 'sell' или 'продать'\n\
		    					Для отмены продажи нажмите на кнопку 'Отмена'\n");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Предупреждение", lstring, "Ввести", "Отмена");
			GameTextForPlayer(playerid, "~r~Warning!~n~", 5000, 4);
	    }
	    case DMODE_RADIO:
	    {
	        new vehicleid = GetPlayerVehicleID(playerid);
	        if(vehicleid > 0 && GetPlayerState(playerid) == 2)
	        {
	        	if(VehInfo[vehicleid][vRadio] > 0)	strcat(lstring, "{FF6347}[!] ");
				else 								strcat(lstring, "{6E6E6E}");
		        strcat(lstring, "Выключить радио\n");
		        for(new r; r < sizeof(RadioList); r++)
		        {
					if(VehInfo[vehicleid][vRadio] == r+1)	strcat(lstring, "{33AA33}");
					else 									strcat(lstring, "{FFFFFF}");
		            format(string, 128, "%s\n", RadioList[r][RADIO_NAME]);
		            strcat(lstring, string);
		        }
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Приемник: Радиостанции", lstring, "Выбрать", "Закрыть");
	        }
	    }
	    case DMODE_RADIO_PLEER:
	    {
	        if(Acsr.GetSlotToType(playerid, ACSR_EARFLAPS) == INVALID_DATA)
	        {
	        	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в наушниках.");
	        }
        	if(GetPVarInt(playerid, "Thing:RadioID"))	strcat(lstring, "{FF6347}[!] ");
			else 										strcat(lstring, "{6E6E6E}");
	        strcat(lstring, "Выключить радио\n");
	        for(new r; r < sizeof(RadioList); r++)
	        {
				if(GetPVarInt(playerid, "Thing:RadioID") == r+1)	strcat(lstring, "{33AA33}");
				else 												strcat(lstring, "{FFFFFF}");
	            format(string, 128, "%s\n", RadioList[r][RADIO_NAME]);
	            strcat(lstring, string);
	        }
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Плеер: Радиостанции", lstring, "Выбрать", "Закрыть");
	    }
	    case DMODE_VMENU:
	    {
	    	new vehicleid = GetPVarInt(playerid, "VehicleMenu:VehicleID"),
	    		driverid = VehInfo[vehicleid][vDriver];
	    	if(PlayerInfo[playerid][pFaction] == F_POLICE && IsPoliceDuty(playerid))
			{
				if(PM_Type[playerid] == 10)
				{
					if(driverid >= 0 && PM_Place[playerid] == driverid && PursuitStatus[driverid] == PS_WAIT)
					{
						return ShowDialog(playerid, DMODE_POLICE_STOPMENU);
					}
				}
				else if(PM_Type[playerid] == 0)
				{
					if(driverid >= 0 && PursuitStatus[driverid] == PS_NONE)
					{
						format(lstring, sizeof(lstring), "Потребовать выйти %s'а\n", ReturnPlayerName(VehInfo[vehicleid][vDriver]));
					}
					if(VehInfo[vehicleid][vCoDriver] >= 0 && PursuitStatus[ VehInfo[vehicleid][vCoDriver] ] == PS_NONE)
					{
						format(lstring, sizeof(lstring), "%sПотребовать выйти %s'а\n", lstring, ReturnPlayerName(VehInfo[vehicleid][vCoDriver]));
					}
					if(VehInfo[vehicleid][vLeftSeat] >= 0 && PursuitStatus[ VehInfo[vehicleid][vLeftSeat] ] == PS_NONE)
					{
						format(lstring, sizeof(lstring), "%sПотребовать выйти %s'а\n", lstring, ReturnPlayerName(VehInfo[vehicleid][vLeftSeat]));
					}
					if(VehInfo[vehicleid][vRightSeat] >= 0 && PursuitStatus[ VehInfo[vehicleid][vRightSeat] ] == PS_NONE)
					{
						format(lstring, sizeof(lstring), "%sПотребовать выйти %s'а\n", lstring, ReturnPlayerName(VehInfo[vehicleid][vRightSeat]));
					}
				}
		    }
			else if(Job.GetPlayerNowWork(playerid) == JOB_MECHANIC)
			{
				if(VehInfo[vehicleid][vDriver] >= 0)
				{
					strcat(lstring, "Предложить заправку\n");
				}
			}
			format(lstring, sizeof(lstring), "%s%s машину\n", lstring, VehInfo[vehicleid][vLocked] ? ("Открыть") : ("Закрыть"));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Меню авто", lstring, "Выбрать", "Закрыть");
	    }
	    case DMODE_REFILL:
	    {
	    	new vehicleid = gLastVehicle[playerid];
	    	if(CarInfo[vehicleid][cType] != C_TYPE_JOB || CarInfo[vehicleid][cOwnerID] != JOB_MECHANIC)
	    	{
	    		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, ваш последний транспорт должен быть рабочим.");
	    	}
	    	new Float:pos[3];
	    	new v = GetPVarInt(playerid, "Mechanic:Refill:VehicleID");
			GetVehiclePos(v, Arr3<pos>);
			if(GetVehicleDistanceFromPoint(vehicleid, Arr3<pos>) > 10)
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, ваш рабочий авто должен быть рядом с заправляемым.");
	    	}
	    	if(GetPlayerDistanceFromPoint(playerid, Arr3<pos>) > 10)
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, вы должны быть рядом с заправляемым автомобилем.");
	    	}
	    	if(VehInfo[v][vDriver] < 0)
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, в автомобиле должен сидеть водитель.");
			}
	    	format(lstring, sizeof(lstring), "{FFFFFF}Введите количество литров для заправки авто\n\
	    		В авто %d/%d литров\n\
	    		У вас %d литров", floatround(VehInfo[v][vFuel]), GetVehicleMaxFuel(v), floatround(VehInfo[vehicleid][vFuel]));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Заправка", lstring, "Ввод", "Закрыть");
	    }
	    case DMODE_REFILL2:
	    {
	    	new vehicleid = gLastVehicle[playerid];
	    	if(CarInfo[vehicleid][cType] != C_TYPE_JOB || CarInfo[vehicleid][cOwnerID] != JOB_MECHANIC)
	    	{
	    		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, ваш последний транспорт должен быть рабочим.");
	    	}
	    	new Float:pos[3];
	    	new v = GetPVarInt(playerid, "Mechanic:Refill:VehicleID");
			GetVehiclePos(v, Arr3<pos>);
			if(GetVehicleDistanceFromPoint(vehicleid, Arr3<pos>) > 10)
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, ваш рабочий авто должен быть рядом с заправляемым.");
	    	}
	    	if(GetPlayerDistanceFromPoint(playerid, Arr3<pos>) > 10)
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, вы должны быть рядом с заправляемым автомобилем.");
	    	}
	    	if(VehInfo[v][vDriver] < 0)
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, в автомобиле должен сидеть водитель.");
			}
			new count = GetPVarInt(playerid, "Mechanic:Refill:Count");
	    	format(lstring, sizeof(lstring), "{FFFFFF}Введите стоимость заправки авто:\n\
	    		(От $0 до $%d)", floatround(PRICE_FUEL * count * 5));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Заправка", lstring, "Ввод", "Назад");
	    }
	    case DMODE_VFIND:
	    {
	        lstring = "Введите название авто полностью или частично:";
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Поиск авто", lstring, "Найти", "Закрыть");
	    }
	    case DMODE_GOTOLIST:
	    {
	        for(new g = 0; g < sizeof GotoList; g++)
	            format(lstring, sizeof lstring, "%s[%d] %s\n", lstring, g + 1, GotoList[g][G_NAME]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Точки телепорта", lstring, "Телепорт", "Закрыть");
	    }
	    case DMODE_REPAIR:
		{
		    new item[4], price = 0, Float:health,
				v = GetPlayerVehicleID(playerid);
			GetVehicleDamageStatus(v, Arr4<item>);
			GetVehicleHealth(v, health);
			//printf("Vehicle Status : [Panels] : %d - [Doors] : %d - [Lights] : %d - [Tires] : %d", Arr4<item>);

			//	Панель
			if(item[0]) price += 25;
			//	Фары
			if(item[2]) price += 10;
		    //	Двери
			new door_price = 0;
			if(item[1] & 0x4 || item[1] & 0x2)				door_price += 10;	//  капот поврежден
		    if(item[1] >> 8 & 0x4 || item[1] >> 8 & 0x2)	door_price += 10;	//  багажник поврежден
		 	if(item[1] >> 16 & 0x4 || item[1] >> 16 & 0x2)  door_price += 10;	//  дверь водителя повреждена
			if(item[1] >> 24 & 0x4 || item[1] >> 24 & 0x2)	door_price += 10;	//  дверь пасажира повреждена
			//	Колеса
			new tire_price = 0;
			if(item[3] & 0x1)   tire_price += 10;
			if(item[3] & 0x2)   tire_price += 10;
			if(item[3] & 0x4)   tire_price += 10;
			if(item[3] & 0x8)   tire_price += 10;
			//  price
		    price = price + door_price + tire_price;
			SetPVarInt(playerid, "repair_body_price", price);

		// 	КУЗОВНЫЕ РАБОТЫ
			if(price) 		format(lstring, sizeof(lstring), "%s"MAIN_COLOR"[1] {FFFFFF}Кузовные работы\t\t[%d$]\n", lstring, price);
			else 			strcat(lstring, "{AFAFAF}[1] Кузовные работы\t\t[Не требуются]\n" );
			if(item[0])		strcat(lstring, "{FFFFFF}   - Ремонт бампера\t\t[25$]\n");
			else			strcat(lstring, "{AFAFAF}   - Ремонт бампера\t\t[Не требуется]\n");
			if(door_price)	format(lstring, sizeof(lstring), "%s{FFFFFF}   - Ремонт дверей\t\t[%d$]\n", lstring, door_price);
			else 			strcat(lstring, "{AFAFAF}   - Ремонт дверей\t\t[Не требуется]\n");
			if(item[2])		strcat(lstring, "{FFFFFF}   - Ремонт фар\t\t\t[10$]\n");
			else 			strcat(lstring, "{AFAFAF}   - Ремонт фар\t\t\t[Не требуется]\n");
			if(tire_price)	format(lstring, sizeof(lstring), "%s{FFFFFF}   - Ремонт колес\t\t[%d$]\n", lstring, tire_price);
			else 			strcat(lstring, "{AFAFAF}   - Ремонт колес\t\t[Не требуется]\n");
		//  ДВИГАТЕЛЬ
			if(health < 900.0)
			{
			    new e_price = floatround((1000.0 - health) / 7.5);
			    format(lstring, sizeof(lstring), "%s"MAIN_COLOR"[2] {FFFFFF}Перебор двигателя\t\t[%d$]\n", lstring, e_price);
			    price += e_price;
			}
			else strcat(lstring, "{AFAFAF}[2] Перебор двигателя\t\t[Не требуется]\n");
			strcat(lstring,
				""MAIN_COLOR"[3] {FFFFFF}Перекраска\t\t\t[100$]\n\
				"MAIN_COLOR"[4] {FFFFFF}Специальный тюнинг\n");
			SetPVarInt(playerid, "repair_all_price", floatround(price * 0.9));
			if(price)	format(lstring, sizeof(lstring), "%s"MAIN_COLOR"[5] {FFFFFF}Полный ремонт\t\t[%d$]", lstring, floatround(price * 0.9));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Автомастерская", lstring, "Выбрать", "Закрыть");
		}
		case DMODE_TUNING:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			//	Неон
			lstring = "{FFFFFF}[1] Неон\n";
			if(CarInfo[vehicleid][cNeon] != 1)	strcat(lstring, "{BA0A0A}- Красный\t\t[30 coins]\n");
			else 								strcat(lstring, "{AFAFAF}- Красный\t\t[Демонтаж]\n");
			if(CarInfo[vehicleid][cNeon] != 2)	strcat(lstring, "{0A0ABA}- Синий\t\t[30 coins]\n");
			else 								strcat(lstring, "{AFAFAF}- Синий\t\t[Демонтаж]\n");
			if(CarInfo[vehicleid][cNeon] != 3)	strcat(lstring, "{10BA0A}- Зеленый\t\t[30 coins]\n");
			else 								strcat(lstring, "{AFAFAF}- Зеленый\t\t[Демонтаж]\n");
			if(CarInfo[vehicleid][cNeon] != 4)	strcat(lstring, "{C9C00C}- Желтый\t\t[30 coins]\n");
			else 								strcat(lstring, "{AFAFAF}- Желтый\t\t[Демонтаж]\n");
			if(CarInfo[vehicleid][cNeon] != 5)	strcat(lstring, "{7A0CC9}- Фиолетовый\t\t[30 coins]\n");
			else 								strcat(lstring, "{AFAFAF}- Фиолетовый\t\t[Демонтаж]\n");
			if(CarInfo[vehicleid][cNeon] != 6)	strcat(lstring, "{FFFFFF}- Белый\t\t[30 coins]\n");
			else 								strcat(lstring, "{AFAFAF}- Белый\t\t[Демонтаж]\n");
			//	Стробоскопы
			if(CarInfo[vehicleid][cFlash])		strcat(lstring, "{AFAFAF}[2] Стробоскопы\t[Демонтаж]\n");
			else 								strcat(lstring, "{FFFFFF}[2] Стробоскопы\t[50 coins]\n");
			//  Блатные номера
			strcat(lstring, "{FFFFFF}[3] Новые номера");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Автомастерская - Специальный тюнинг", lstring, "Выбрать", "Назад");
		}
		case DMODE_CARPLATE:
		{
		    format(lstring, sizeof(lstring), ""MAIN_COLOR"Стоимость замены: {FFFFFF}50 coins\n\
											  "MAIN_COLOR"Примеры номеров: {FFFFFF}s-break, wanted, hunter\n\n\
											  "MAIN_COLOR"Введите желаемый номер: {FFFFFF}(от 1 до 9 символов)");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Автомастерская - Специальный тюнинг", lstring, "Купить", "Назад");
		}
		case DMODE_JOBLIST:
		{
			if(IsLegalJob(Job.GetPlayerJob(playerid)))
			{
				lstring = ""MAIN_COLOR"• Уволиться с работы\n\
						{AFAFAF}• Таксист\t{AFAFAF}(2 лвл)\n\
						{AFAFAF}• Водитель автобуса\t{AFAFAF}(2 лвл)\n\
						{AFAFAF}• Дальнобойщик\t{AFAFAF}(3 лвл)\n\
						{AFAFAF}• Механик\t{AFAFAF}(4 лвл)";
			}
			else
			{
				lstring = ""MAIN_COLOR"•{FFFFFF} Таксист\t"MAIN_COLOR"(2 лвл)\n\
						"MAIN_COLOR"•{FFFFFF} Водитель автобуса\t"MAIN_COLOR"(2 лвл)\n\
						"MAIN_COLOR"•{FFFFFF} Дальнобойщик\t"MAIN_COLOR"(3 лвл)\n\
						"MAIN_COLOR"•{FFFFFF} Механик\t"MAIN_COLOR"(4 лвл)";
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Доступная работа", lstring, "Выбрать", "Закрыть");
	    }
	    case DMODE_GAS:
	    {
			new vehicleid = gLastVehicle[playerid];
			new price = floatround(VehInfo[vehicleid][vWishFuel] * PRICE_FUEL, floatround_ceil);
			strcat(lstring, "[1] Правила пользования\n\
							[2] Оплата бензина");
			if(price > 0)	format(lstring, sizeof lstring, "%s(%d$)\n", lstring, price);
			else 			strcat(lstring, "(N/A)\n");

			format(lstring, sizeof lstring, "%s[3] Покупка канистры (%d$)\n", lstring, floatround(PRICE_FUEL * 20));

			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Заправочная станция", lstring, "Выбрать", "Закрыть");
	    }
	    case DMODE_GAS_REFILL:
	    {
	        new vehicleid = GetPlayerVehicleID(playerid);
	        if(vehicleid)
	        {
	        	new Float:price = PRICE_FUEL;
	        	if(Job.GetPlayerNowWork(playerid) == JOB_MECHANIC && CarInfo[vehicleid][cType] == C_TYPE_JOB && CarInfo[vehicleid][cOwnerID] == JOB_MECHANIC)
				{
					price *= 0.5;
				}
		        format(lstring, sizeof(lstring), "{FFFFFF}Стоимость: "MAIN_COLOR"%0.1f$\n", price);
		        format(lstring, sizeof(lstring), "%s{FFFFFF}В вашем баке: "MAIN_COLOR"%d/%dл.\n", lstring, floatround(VehInfo[vehicleid][vFuel]), GetVehicleMaxFuel(vehicleid));
		        format(lstring, sizeof(lstring), "%s"MAIN_COLOR"Введите желаемое количество литров:\n", lstring);
		        format(lstring, sizeof(lstring), "%s\n{FFFFFF}(Транспорт может заправить любой пассажир)", lstring);
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Заправочная станция", lstring, "Ввести", "Закрыть");
			}
	    }
	    case DMODE_GAS_RULES:
	    {
	        strcat(lstring, ""MAIN_COLOR"[Правила пользования]\n\
	        				{FFFFFF}1. Заглушите двигатель автомобиля\n\
	        				2. Посигнальте, чтобы к вам подошел заправщик\n\
	        				3. Скажите ему, сколько бензина вам необходимо\n\
	        				4. Пройдите на кассу для оплаты, пока наш сотрудник будет вас заправлять\n\
	        				\nПредлагаем вам приобрести канистру с бензином\n\
	        				С помощью нее вы сможете дозаправить ваш транспорт в дороге\n\
	        				В канистру вмещается около 20% топлива вашего бензобака\n");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Заправка: Правила пользования", lstring, "Ок", "Назад");
	    }
		case DMODE_AUTOSCHOOL:
		{
			if(PlayerInfo[playerid][pASElement] == 0xA98AC7 && PlayerInfo[playerid][pCarLic])
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы уже полностью прошли автошколу.");
			}
            else if(!PlayerInfo[playerid][pASElement])
			{	// Приветствие
				format(lstring, sizeof(lstring), "{FFFFFF}Здравствуйте, приветствуем вас в нашей "MAIN_COLOR"Автошколе{FFFFFF}!\n\n\
					Мы готовы професионально обучить вас навыку вождения,\n\
					и выдать права на вождения автомобиля!\n\
					Для этого вам необходимо будет выполнить несколько элементов на площадке!\n\n\
					Стоимость обучения в школе: "MAIN_COLOR"$%d\n\
					Проходить элементы вы сможете в любое время!", PRICE_AUTOSCHOOL);
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Автошкола", lstring, "Оплатить", "Закрыть");
			}
			else
			{	// Прохождение элементов
				lstring = "{33AA33}< Выполнить все элементы >{FFFFFF}\n";
				new count = 0;
			    for(new i = 1; i <= sizeof(AS_Mission); i++)
				{
					if((PlayerInfo[playerid][pASElement] >> i) & 0x1)
					{
						format(lstring, sizeof(lstring), "%s{33AA33}• Элемент #%d: {FFFFFF}%s\n", lstring, i, AS_Mission[i - 1][AS_Name]);
						count++;
					}
					else
					{
					    format(lstring, sizeof(lstring), "%s{FF6347}• Элемент #%d: {FFFFFF}%s\n", lstring, i, AS_Mission[i - 1][AS_Name]);
					}
				}
			    if(!PlayerInfo[playerid][pCarLic] && count > 1)	strcat(lstring, "{33AA33}> Получить права");
                MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Автошкола", lstring, "Выбрать", "Закрыть");
			}
		}
		case DMODE_SHOOTING:
		{
			if(PlayerInfo[playerid][pGunLic] == 0)
			{
				if(PlayerInfo[playerid][pShooting] == 0)
				{
					lstring = "{FFFFFF}Здравствуйте, хотите получить лицензию на оружие?\n\n\
								Легко, только нам нужно удостовериться в навыках вашей стрельбы.\n\
								Для этого вам нужно пройти несколько заданий в нашем тире,\n\
								Если вам удасться это сделать - мы выдадим вам лицензию на оружие!\n\n\
								Стоимость прохождения тира:\t\t"MAIN_COLOR"700${FFFFFF}\n\
								Попыток:\t\t\t\t\t"MAIN_COLOR"неограничено{FFFFFF}\n\n\
								Если вы готовы оплатить и приступить к выполнению - нажмите '"MAIN_COLOR"Оплатить{FFFFFF}'.";
					MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Тир", lstring, "Оплатить", "Закрыть");
				}
				else if(PlayerInfo[playerid][pShooting] == 4)
				{
					return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы уже прошли все задания.");
				}
				else
				{
					format(lstring, sizeof lstring, ""MAIN_COLOR"• {FFFFFF}Информация о прохождении тира\n\
													"MAIN_COLOR"• {FFFFFF}Начать выполнение зачетов\n\
													{33AA33}< Может договоримся? [%d coins] >", CoinForShooting);
	                MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Тир", lstring, "Начать", "Закрыть");
				}
			}
		    else
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас уже есть лицензия на оружие.");
				gPickupTime[playerid] = 5;
			}
		}
		case DMODE_SHOOTING_INFO:
		{
		 	lstring = "{88AA88}В зачет входит 3 этапа:{FFFFFF}\n\
				    	\t"MAIN_COLOR"• {FFFFFF} Стрельба по неподвижным мишеням на близкой,\n\
						\tсредней и дальней дистанции. (Glock 9mm; 30 патронов; 30 сек.)\n\
						\t"MAIN_COLOR"• {FFFFFF} Стрельба по движущимся на вас мишеням. (Glock 9mm; 35 патронов; 45 сек.)\n\
						\t"MAIN_COLOR"• {FFFFFF} Стрельба по движущимся паралельно вам мишеням. (Glock 9mm; 40 патронов; 60 сек.)\n\n\
						* При провале - все этапы начинаются сначала.";
        	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Тир: Информация", lstring, "Назад", "");
		}
		case DMODE_BUYELEMENT:
		{
		    format(lstring, sizeof(lstring),
		    	"{FFFFFF}Вы действительно хотите выполнить все элементы автошколы?\n\
		    	Для подтверждения введите 'skip' или 'пропустить'\n\
		    	\n{33AA33}Стоимость услуги: {FFFFFF}40 монет");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Предупреждение", lstring, "Ввести", "Назад");
		}
		case DMODE_REACTION:
		{
			new targetid = gTargetid[playerid];
		    if(PM_Type[playerid] == 10 && PM_Place[playerid] == targetid)
		    {
		    	if(PursuitStatus[targetid] == PS_WAIT || PursuitStatus[targetid] == PS_OUT_COMPLETE)
		    	{
		    		if(PlayerInfo[targetid][pNextFriskTime] > gettime())	strcat(lstring, "{AFAFAF}• Обыскать\t{AFAFAF}[Недоступно]\n");
		    		else 													strcat(lstring, "{B1C8FB}• Обыскать\t{B1C8FB}[/frisk]\n");
		    		if(PursuitIllegalItem[targetid])			strcat(lstring, "{B1C8FB}• Изъять запр. предметы\n");
		    		else 										strcat(lstring, "{AFAFAF}• Изъять запр. предметы\t{AFAFAF}[Недоступно]\n");
			    	if(0 < GetPlayerWantedLevel(targetid) < 4)	strcat(lstring, "{CFB53B}• Выписать штраф");
					else 										strcat(lstring, "{CFB53B}• Завершить проверку");
		    	}
		    	else
		    	{
		    		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Взаимодействие с игроком в данный момент невозможно.");
		    	}
		    	SetPVarInt(playerid, "Player:Reaction:PursuitMenu", 1);

		    	new _wlstr[24];
		    	new wl = GetPlayerWantedLevel(gTargetid[playerid]);
		    	if(wl == 0)	format(_wlstr, sizeof(_wlstr), "{33AA33}[Нет розыска]");
		    	else 		format(_wlstr, sizeof(_wlstr), "{FF6347}[Розыск: %d]", wl);
		    	format(string, sizeof(string), "%s %s", ReturnPlayerName(gTargetid[playerid]), _wlstr);
		    }
		    else
		    {
			    lstring = 	""MAIN_COLOR"• {FFFFFF}Поздороваться\t[/hi]\n\
			    			"MAIN_COLOR"• {FFFFFF}Показать документы\t[/showpass]\n\
			    			"MAIN_COLOR"• {FFFFFF}Передать наличные\t[/pay]";
			    
			    //	###	Действия для организаций
				if(PlayerInfo[playerid][pFaction] == F_POLICE)
				{
					if(IsPoliceDuty(playerid))
			    	{
			    		if(GetPlayerState(targetid) != PLAYER_STATE_WASTED)
						{
							if(PM_Type[playerid] == 0
							&& PursuitStatus[targetid] == PS_NONE
							&& !IsForce(PlayerInfo[targetid][pFaction])
							&& InGangZone[targetid] < 0
							&& !IsPlayerAFK(targetid)
							&& (GetPlayerWantedLevel(targetid) > 0 || PursuitLastUNIX[targetid] < gettime()))
							{
								strcat(lstring, "\n"MAIN_COLOR"• {B1C8FB}Начать проверку\t{B1C8FB}[ ~ ]");
							}
							else
							{
								strcat(lstring, "\n"MAIN_COLOR"• {AFAFAF}Начать проверку\t{AFAFAF}[Недоступно]");
							}
						}
					}
				}
				else if(PlayerInfo[playerid][pFaction] == F_NEWS && PlayerInfo[playerid][pRank] >= 3)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(GetPlayerInterior(playerid) == 18 || (vehicleid > 0 && CarInfo[vehicleid][cType] == C_TYPE_FACTION && CarInfo[vehicleid][cOwnerID] == F_NEWS))
					{
						if(TalkingLive[playerid] != INVALID_PLAYER_ID && TalkingLive[playerid] == targetid)
						{
							strcat(lstring, "\n"MAIN_COLOR"• {B1C8FB}Закончить интервью\t{B1C8FB}[/live]");
						}
						else if(TalkingLive[playerid] == INVALID_PLAYER_ID && TalkingLive[targetid] == INVALID_PLAYER_ID)
						{
							strcat(lstring, "\n"MAIN_COLOR"• {B1C8FB}Взять интервью\t{B1C8FB}[/live]");
						}
					}
				}

				#if defined	_job_part_delivery_included
					if(GetPVarInt(gTargetid[playerid], "Player:JobPartner") == PlayerInfo[playerid][pUserID])
					{
						strcat(lstring, "\n"MAIN_COLOR"• {FF6347}Завершить работу\t{FF6347}[ ~ ]");
					}
					else
					{
						new rentcar = GetPVarInt(playerid, "RentCar");
						if(rentcar > 0 && DeliveryVehLoadCount[rentcar] > 0)
						{
							strcat(lstring, "\n"MAIN_COLOR"• {B1C8FB}Предложить поработать\t{B1C8FB}[ ~ ]");
						}
					}
				#endif	

				if(GetNearRing(playerid) != (-1) && gPlayerRing[ gTargetid[playerid] ] == (-1))
				{
					strcat(lstring, "\n"MAIN_COLOR"• {CFB53B}Вызвать на спарринг\t{CFB53B}[/box]");
				}

				//	###	Действия для лидера и зама
				if(PlayerInfo[playerid][pFaction] > 0 && PlayerInfo[playerid][pRank] >= GetRankMax(PlayerInfo[playerid][pFaction]) - 1)
				{	
				    if(PlayerInfo[ gTargetid[playerid] ][pFaction] == F_NONE)
				    {
						strcat(lstring, "\n"MAIN_COLOR"• {CFB53B}Принять в организацию\t{CFB53B}[/invite]");
				    }
					if(PlayerInfo[playerid][pFaction] == PlayerInfo[ gTargetid[playerid] ][pFaction] && PlayerInfo[playerid][pRank] > PlayerInfo[ gTargetid[playerid] ][pRank])
					{
						strcat(lstring, "\n"MAIN_COLOR"• {CFB53B}Выгнать из организации\t{CFB53B}[/uninvite]");
						strcat(lstring, "\n"MAIN_COLOR"• {CFB53B}Изменить ранг\t{CFB53B}[/giverank]");
					}
				}

				format(string, sizeof(string), "%s: Действия", ReturnPlayerName(gTargetid[playerid]));
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, string, lstring, "Выбрать", "Закрыть");
		}
		case DMODE_PAY_SUMM:
		{
		    MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Передача денег", "Введите кол-во денег, которые хотите передать:", "Передать", "Назад");
		}
		case DMODE_BONUS_LIST:
		{
			new Cache:result = mysql_query(g_SQL, "SELECT `code`, `type`, `value` FROM `bonuses`");
			if(!cache_num_rows())
			{
			    MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Список бонусов", "Ни одного бонус кода не создано!", "Закрыть", "", 0);
			}
			else
			{
			    new code[MAX_CODE_SIZE], type, value;
			    for(new r = 0; r < cache_num_rows(); r++)
			    {
			        cache_get_value_index(r, 0, code);
					cache_get_value_index_int(r, 1, type);
					cache_get_value_index_int(r, 2, value);
			        if(type == 0) 		string = "Деньги";
					else if(type == 1) 	string = "Монеты";
					else if(type == 2) 	string = "Опыт";
			        format(lstring, sizeof(lstring), "%s[{33AA33}%s{FFFFFF}]\tДает: %s (Кол-во: %d)\n", lstring, code, string, value);
				}
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Список бонусов", lstring, "Закрыть", "", 0);
			}
			cache_delete(result);
		}
		case DMODE_HOTEL:
		{
		    if(PlayerInfo[playerid][pRent] < 0)
		    {
		    	format(lstring, sizeof(lstring),
		    		"{FFFFFF}Оплачено: "MAIN_COLOR"%d дней\n\
		    		{FFFFFF}____________________\n\
		    		"MAIN_COLOR"• {FFFFFF}Сменить номер\t[$15]\n\
		    		"MAIN_COLOR"• {FFFFFF}Выселиться", PlayerInfo[playerid][pPaymentDays]);
                MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Отель", lstring, "Выбрать", "Закрыть");
		    }
			else
			{
				if(PlayerInfo[playerid][pRent])	lstring = "{FF6347}Вы уже где-то арендуете жилье\n\n";
				format(lstring, sizeof(lstring), "%s{FFFFFF}Здравствуйте, хотите снять номер за "MAIN_COLOR"%d$/день{FFFFFF}?\nВведите количество дней для аренды:", lstring, HOTEL_COST);
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Отель", lstring, "Снять", "Закрыть");
			}
		}
		case DMODE_EX_HOTEL:
		{
			if(PlayerInfo[playerid][pRent] < 0)
			{
				format(lstring, sizeof(lstring), "{FFFFFF}Хотите продлить аренду номера?\nНапоминаем, что стоимость аренды "MAIN_COLOR"%d$/день{FFFFFF}\n\nВведите количество дней для аренды:", HOTEL_COST);
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Отель", lstring, "Продлить", "Назад");
			}
		}
		case DMODE_ATM:
		{
			openWithATM[playerid] = true;
			lstring = ""MAIN_COLOR"• {FFFFFF}Банковский счет\n";
			if(PlayerInfo[playerid][pPhoneNumber])	strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Оплата мобильной связи\n");
			MyApplyAnimation(playerid, "ped", "ATM", 4.1, 1, 1, 1, 0, 0);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Банкомат", lstring, "Выбрать", "Закрыть");
		}
		case DMODE_BANK:
		{
			lstring = ""MAIN_COLOR"• {FFFFFF}Банковский счет\t\n";
			new b = FoundBiz(GetPlayerBiz(playerid));
			if(b != (-1))
			{
				if(BizInfo[b][bPaymentDays] >= 0)	format(string, sizeof(string), ""MAIN_COLOR"Оплачено: {FFFFFF}%d дней", BizInfo[b][bPaymentDays]);
				else 								format(string, sizeof(string), "{FF6347}Задолжность: {FFFFFF}%d дня", (BizInfo[b][bPaymentDays] * -1));
				format(lstring, sizeof(lstring),
					"%s"MAIN_COLOR"• {FFFFFF}Банковский счет бизнеса\t\n\
					"MAIN_COLOR"• {FFFFFF}Оплата бизнеса\t[%s]\n", lstring, string);
			}
			new h = FoundHouse(GetPlayerHouse(playerid));
			if(h != (-1))
			{
				if(HouseInfo[h][hPaymentDays] >= 0)	format(string, sizeof(string), ""MAIN_COLOR"Оплачено: {FFFFFF}%d дней", HouseInfo[h][hPaymentDays]);
				else 								format(string, sizeof(string), "{FF6347}Задолжность: {FFFFFF}%d дня", (HouseInfo[h][hPaymentDays] * -1));
				format(lstring, sizeof(lstring),
					"%s"MAIN_COLOR"• {FFFFFF}Оплата дома\t[%s]\n", lstring, string);
			}
			if(PlayerInfo[playerid][pPhoneNumber])	strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Оплата мобильной связи\t\n");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Банк", lstring, "Выбрать", "Закрыть");
		}
	    case DMODE_BANK_ACTION:
		{
			new type = GetPVarInt(playerid, "Bank:Type");
			if(type == 0)	//	личный счет
			{
				if(PlayerInfo[playerid][pBank] > 0)	format(string, sizeof(string), "На счету: {33AA33}$%.2f\n", PlayerInfo[playerid][pBank]);
				else								format(string, sizeof(string), "На счету: {FF6347}$%.2f\n", PlayerInfo[playerid][pBank]);
			}
			else if(type == 1)	//	счет бизнеса
			{
				new b = FoundBiz(GetPlayerBiz(playerid));
				if(b == (-1))	return ShowDialog(playerid, DMODE_ATM);
				if(BizInfo[b][bBank] > 0.0)	format(string, sizeof(string), "На счету: {33AA33}$%.2f\n", BizInfo[b][bBank]);
				else						format(string, sizeof(string), "На счету: {FF6347}$%.2f\n", BizInfo[b][bBank]);
			}
			strcat(lstring, string);
	        strcat(lstring, "____________________\n\
	        				"MAIN_COLOR"• {FFFFFF} Снять со счета\n\
	        				"MAIN_COLOR"• {FFFFFF} Положить на счет\n");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Банковский счет", lstring, "Выбрать", "Назад");
	    }
		case DMODE_BANK_TAKE:
		{
			new type = GetPVarInt(playerid, "Bank:Type");
			if(type == 0)	//	личный счет
			{
				format(lstring, 128, "На счету: $%.2f\n\nВведите желаемую сумму в окошке: (Комиссия 1%%)", PlayerInfo[playerid][pBank]);
			}
			else if(type == 1)	//	счет бизнеса
			{
				new b = FoundBiz(GetPlayerBiz(playerid));
				if(b == (-1))	return ShowDialog(playerid, DMODE_ATM);
				format(lstring, 128, "На счету: $%.2f\n\nВведите желаемую сумму в окошке: (Комиссия 1%%)", BizInfo[b][bBank]);
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Снять со счета", lstring, "Ввести", "Назад");
		}
		case DMODE_BANK_GIVE:
		{
			new type = GetPVarInt(playerid, "Bank:Type");
			if(type == 0)	//	личный счет
			{
				format(lstring, 128, "На счету: $%.2f\n\nВведите сумму вашего депозита в окошке: (Комиссия 0%%)", PlayerInfo[playerid][pBank]);
			}
			else if(type == 1)	//	счет бизнеса
			{
				new b = FoundBiz(GetPlayerBiz(playerid));
				if(b == (-1))	return ShowDialog(playerid, DMODE_ATM);
				format(lstring, 128, "На счету: $%.2f\n\nВведите сумму вашего депозита в окошке: (Комиссия 0%%)", BizInfo[b][bBank]);
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Положить на счет", lstring, "Ввести", "Назад");
		}
		case DMODE_PROPERTY_PAY:
		{
			new type = GetPVarInt(playerid, "Bank:Type");
			if(type == 1)	//	бизнес
			{
				new b = FoundBiz(GetPlayerBiz(playerid));
				if(b == (-1))	return ShowDialog(playerid, DMODE_BANK);

				if(BizInfo[b][bPaymentDays] >= 0)	format(string, sizeof(string), ""MAIN_COLOR"%d оплаченых дней", BizInfo[b][bPaymentDays]);
				else 								format(string, sizeof(string), "{FF6347}задолжность %d дня", BizInfo[b][bPaymentDays]);

				format(lstring, sizeof(lstring), "{FFFFFF}Здравствуйте, вы хотите оплатить свой бизнес?\n\n\
				Отлично, на данный момент у вас %s{FFFFFF}.\n\
				Суточная стоимость оплаты для вас составляет "MAIN_COLOR"$%d{FFFFFF}.\n\n", string, TAX_BIZ);
			}
			else if(type == 2)	//	дом
			{
				new h = FoundHouse(GetPlayerHouse(playerid));
				if(h == (-1))	return ShowDialog(playerid, DMODE_BANK);

				if(HouseInfo[h][hPaymentDays] >= 0)	format(string, sizeof(string), ""MAIN_COLOR"%d оплаченых дней", HouseInfo[h][hPaymentDays]);
				else 								format(string, sizeof(string), "{FF6347}задолжность %d дня", HouseInfo[h][hPaymentDays]);

				format(lstring, sizeof(lstring), "{FFFFFF}Здравствуйте, вы хотите оплатить свой дом?\n\n\
				Отлично, на данный момент у вас %s{FFFFFF}.\n\
				Суточная стоимость оплаты составляет "MAIN_COLOR"$%d{FFFFFF}.\n\n", string, TAX_HOUSE);
			}
			strcat(lstring, ""MAIN_COLOR"Введите количество дней для оплаты:");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Оплата имущества", lstring, "Ввести", "Назад");
		}
		case DMODE_FINEPARK:
		{
			mysql_format(g_SQL, string, sizeof(string), "SELECT `model` FROM `cars` WHERE `type` = 1 AND `fine_park` > 0 AND `ownerid` = '%d'", PlayerInfo[playerid][pUserID]);
			new Cache:result = mysql_query(g_SQL, string);
			new veh_num = cache_num_rows();
			if(veh_num == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На штраф стоянке нет ни одной вашей машины.");
			    cache_delete(result);
			    return 1;
			}
			new model;
			cache_get_value_index_int(0, 0, model);
			cache_delete(result);
		    lstring = "{2641FE}На штраф стоянке найдена ваша собственность\n";
		    if(veh_num > 1) format(lstring, sizeof(lstring), "%s{2641FE}Всего найдено: {FFFFFF}%d{2641FE}, для начала заберите:\n", lstring, veh_num);
			format(lstring, sizeof(lstring), "%s\n{2641FE}Модель: {FFFFFF}%s[%d]\n{2641FE}Сумма штрафа: {FFFFFF}$500", lstring, VehParams[model-400][VEH_NAME], model);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Полицейский участок: Штраф-стоянка", lstring, "Оплатить", "Закрыть");
		}
		//---
		case DMODE_GPS:
		{
			if(IsPlayerActiveGPS(playerid))	strcat(lstring, ""MAIN_COLOR"• {FF6347}Выключить GPS\n");

			strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Важные места\n\
				"MAIN_COLOR"• {FFFFFF}Подработка\n\
				"MAIN_COLOR"• {FFFFFF}Легальная работа\n\
				"MAIN_COLOR"• {FFFFFF}Нелегальная работа\n\
				"MAIN_COLOR"• {FFFFFF}Транспорт\n\
				"MAIN_COLOR"• {FFFFFF}Магазины и питание\n\
				"MAIN_COLOR"• {FFFFFF}Развлечения");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Навигатор", lstring, "Выбрать", (openWithMenu[playerid] ? ("Назад") : ("Закрыть")), 0);
		}
		case DMODE_GPS_VEH:
		{
			strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Автосалон\n\
							"MAIN_COLOR"• {FFFFFF}Аренда авто\n\
							"MAIN_COLOR"• {FFFFFF}Автомастерская\n\
							"MAIN_COLOR"• {FFFFFF}Заправка\n\
							"MAIN_COLOR"• {FFFFFF}Ремонтный бокс");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Навигатор - Транспорт", lstring, "Выбрать", "Назад", 0);
		}
		case DMODE_GPS_SHOPS:
		{
			for(new i = 0; i < sizeof(BizTypeData); i++)
			{
				if(BizTypeData[i][btGPSType] == 0)
				{
					format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\n", lstring, BizTypeData[i][btName]);
				}
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Навигатор - Магазины и питание", lstring, "Выбрать", "Назад", 0);
		}
		case DMODE_GPS_REST:
		{
			for(new i = 0; i < sizeof(BizTypeData); i++)
			{
				if(BizTypeData[i][btGPSType] == 1)
				{
					format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\n", lstring, BizTypeData[i][btName]);
				}
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Навигатор - Развлечения", lstring, "Выбрать", "Назад", 0);
		}
		//---
		case DMODE_GUNDEL:
		{
			if(!weaponid_new[playerid]) return 1;
		    new curgun, ammo, weaponid = weaponid_new[playerid];
		    GetPlayerWeaponData(playerid, GunParams[weaponid][GUN_SLOT], curgun, ammo);
		    if(!curgun || curgun == weaponid) return 1;
		    format(lstring, sizeof(lstring),
		        "{FFFFFF}Покупка оружия "MAIN_COLOR"%s{FFFFFF} заменит "MAIN_COLOR"%s{FFFFFF}\n\
		        Для подтверждения замены введите '"MAIN_COLOR"да{FFFFFF}' или '"MAIN_COLOR"yes{FFFFFF}':\n",
		        	GunParams[weaponid][GUN_NAME], GunParams[curgun][GUN_NAME]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Предупреждение", lstring, "Ввести", "Назад");
		}
		case DMODE_ADLIST:
		{
			lstring = "№\tОтправитель\tТекст\tСтатус\n";
			new data[3][24] = { "{FF6347}Не проверено", "{CFB53B}Проверяется", "{9ACD32}Проверено" };
			for(new i = 0; i < MAX_ADVERT_COUNT; i++)
			{
				if(gAdvert[i][adBusy])
				{
					format(lstring, sizeof(lstring), "%s%d\t%s\t%s\t%s\n", lstring, i + 1, gAdvert[i][adSender], gAdvert[i][adText], data[ gAdvert[i][adStatus] ]);
				}
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, "Список объявлений", lstring, "Выбрать", "Закрыть");
		}
		case DMODE_ADMENU:
		{
			new num = GetPVarInt(playerid, "EditAdID") - 1;
			if(gAdvert[num][adBusy] == false || gAdvert[num][adStatus] == 2)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого объявления в очереди уже нет.");
				return ShowDialog(playerid, DMODE_ADLIST);
			}
			new stmp[64];
			format(lstring, sizeof(lstring), "%s\n1. Утвердить\n2. Редактировать\n3. Отправить администрации\n4. Удалить", gAdvert[num][adText]);
			format(stmp, sizeof(stmp), "Объявление [Отправитель: %s]", gAdvert[num][adSender]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, stmp, lstring, "Выбрать", "Назад");
		}
		case DMODE_ADEDIT:
		{
			new num = GetPVarInt(playerid, "EditAdID") - 1;
			if(gAdvert[num][adBusy] == false || gAdvert[num][adStatus] == 2)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого объявления в очереди уже нет.");
				return ShowDialog(playerid, DMODE_ADLIST);
			}
			new stmp[128];
			format(stmp, sizeof(stmp), "Объявление - Редактирование [Отправитель: %s]", gAdvert[num][adSender]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, stmp, gAdvert[num][adText], "Ввод", "Назад");
		}
		case DMODE_GIVERANK:
		{
		    if(0 < PlayerInfo[playerid][pFaction] < sizeof(Faction))
		    {
		        new faction = PlayerInfo[playerid][pFaction];
		        new targetid = GetPVarInt(playerid, "giverank_targetid");
		        for(new i; i < PlayerInfo[playerid][pRank]-1; i++)
		        {
		            if(strlen(FactionRank[faction][i+1]) <= 0) break;
		            if(PlayerInfo[targetid][pRank] == i+1) strcat(lstring, "{33AA33}");
		            format(lstring, sizeof(lstring), "%s{FFFFFF}[%d] %s\n", lstring, i+1, FactionRank[faction][i]);
		        }
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Изменить ранг", lstring, "Изменить", "Закрыть");
		    }
		}
		case DMODE_RENTCAR:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			format(lstring, sizeof(lstring), "\n{FFFFFF}Вы хотите арендовать автомобиль за {44B2FF}$%d/час{FFFFFF}?\n\t", VehInfo[vehicleid][vRentPrice]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "{44B2FF}Аренда автомобиля", lstring, "Да", "Нет");
		}
		case DMODE_EXTEND_RENTCAR:
		{
			new vehicleid = GetPVarInt(playerid, "RentCar");
			format(lstring, sizeof(lstring), "\n{FFFFFF}Аренда автомобиля подошла к концу\nВы хотите продлить аренду за {44B2FF}$%d/час{FFFFFF}?\n\t", VehInfo[vehicleid][vRentPrice]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "{44B2FF}Аренда автомобиля", lstring, "Да", "Нет");
		}
		case DMODE_DRUGSTORE:
		{// FFFF00
		    format(lstring, sizeof(lstring), "{FFFFFF}На складе: {FFFF00}%d г.\n{FFFFFF}Цена за грамм: {FFFF00}%d$\n\n{FFFFFF}Сколько грамм наркотиков вы хотите купить?", DrugStore, PRICE_DRUG);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "{F5DEB3}Наркопритон", lstring, "Купить", "Отмена");
		}
		case DMODE_MAKELEADER:
		{
		    new color[12] = ""; lstring = "";
			for(new i = 1; i < sizeof(Faction); i++)
			{
			    if(IsGang(i)) color = GetGangColorRGB(i); else color = "FFFFFF";
			    format(lstring, sizeof(lstring), "%s{FFCD00}[%d] {%s}%s\n", lstring, i, color, Faction[i][F_NAME]);
			}
			format(string, 128, "{FFCD00}Лидерка для {FFFFFF}%s", ReturnPlayerName(MakeleaderPlayerid[playerid]));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, string, lstring, "Выдать", "Отмена");
		}
		case DMODE_CHOOSEGANG:
		{
		    new color[12] = ""; lstring = "";
			for(new i = 0; i < sizeof(Faction); i++)
			{

			    if(IsGang(i))	color = GetGangColorRGB(i);
				else if(i == 0) color = "FFFFFF";
				else 			continue;
			    format(lstring, sizeof(lstring), "%s{FFCD00}[%d] {%s}%s\n", lstring, i, color, Faction[i][F_NAME]);
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "{FFCD00}Список банд", lstring, "Изменить", "Отмена");
		}
		case DMODE_HOSPITAL:
		{
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, "Госпиталь",
				"Услуга\tСтоимость\n\
				{FFFFFF}Пройти курс реабилитации\t"MAIN_COLOR"$100\n\
				{FFFFFF}Купить бинт\t"MAIN_COLOR"$50", "Выбрать", "Закрыть");
		}
		case DMODE_BOXINFO:
		{
			strcat(lstring, "\t\t\t\t{CFB53B}Боксерские поединки\n\n\
			{8D8DFF}На рингах можно проводить боксерские поединки.\n\
			Для этого используйте меню взаимодействия {CFB53B}(прицелиться + y){8D8DFF} или команду {CFB53B}/box{8D8DFF}.\n\
			Если игрок примет ваше предложение, у вас будет {CFB53B}3 минуты на бой{8D8DFF}.\n\n\
			Бой заканчивается если:\n\
			\t{CFB53B}- У одного из игроков меньше 15hp.\n\
			\t- Один из игроков покинул ринг.\n");
			strcat(lstring, "\t- Закончилось время (ничья).\n\n\
			{8D8DFF}В случае {CFB53B}победы{8D8DFF} ваша сила вырастает на {CFB53B}1 единицу{8D8DFF}.\n\
			В случае {CFB53B}поражения{8D8DFF} на {CFB53B}0.5 единиц{8D8DFF}.");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Информация", lstring, "Понятно", "", 0);
		}
		case DMODE_FSTYLE:
		{
			for(new i = 1; i < sizeof(FightStyleNames); i++)
			{
				if((PlayerInfo[playerid][pLearnFStyle] >> (i - 1)) & 0x1)
				{
					format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t" SCOLOR_GREEN "Изучен\n", lstring, FightStyleNames[i]);
				}
				else
				{
					format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t" SCOLOR_LIGHTRED "Изучить [-1 upgrade]\n", lstring, FightStyleNames[i]);
				}
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Изучение стиля боя", lstring, "Выбрать", "Закрыть");
		}
		//---	admin
		case DADMIN_TICKETS:
		{
			lstring = "№\tОтправитель\tТекст\tСтатус\n";
			new const status[2][24] = { "{FF6347}Не рассмотрен", "{CFB53B}Рассматривается" };
			for(new i = 0; i < MAX_ADVERT_COUNT; i++)
			{
				if(gAsk[i][askBusy])
				{
					format(lstring, sizeof(lstring), "%s%d\t%s\t%s\t%s\n", lstring, i + 1, ReturnPlayerName(gAsk[i][askSender]), gAsk[i][askText], status[ gAsk[i][askStatus] ]);
				}
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, "Тикеты", lstring, "Выбрать", "Закрыть");
		}
		case DADMIN_TICKET_MENU:
		{
			new num = GetPVarInt(playerid, "Admin:InTicket");
			if(!gAsk[num][askBusy])
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого вопроса в очереди уже нет или его уже рассматривают.");
				return ShowDialog(playerid, DMODE_ADLIST);
			}
			gAsk[num][askStatus] = true;
			format(lstring, sizeof(lstring), "%s\n1. Ответить\n2. Удалить", gAsk[num][askText]);
			format(string, sizeof(string), "Тикет [Отправитель: %s]", ReturnPlayerName(gAsk[num][askSender]));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, string, lstring, "Выбрать", "Назад");
		}
		case DADMIN_TICKET_ANS:
		{
			new num = GetPVarInt(playerid, "Admin:InTicket");
			if(!gAsk[num][askBusy])
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого вопроса в очереди уже нет или его уже рассматривают.");
				return ShowDialog(playerid, DMODE_ADLIST);
			}
			format(string, sizeof(string), "Тикет - Ответ [Отправитель: %s]", ReturnPlayerName(gAsk[num][askSender]));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, string, gAsk[num][askText], "Ответить", "Назад");
		}
		//---   server
		case DSERV_MAIN:
		{
		    format(lstring, sizeof(lstring),
		        ""MAIN_COLOR"• {FFFFFF}Статистика сервера\n\
		         "MAIN_COLOR"• {FFFFFF}Список администраторов\n\
		         "MAIN_COLOR"• {FFFFFF}Список лидеров\n");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Управление сервером", lstring, "Выбрать", "Закрыть");
		}
		case DSERV_STATS:
		{
			new uptimename[128], timer = SetTimer("EmptyFunc", 1000, false);
			new players, admins, afk, criminal, police, buses, jobs, noteam, levelsum;

			new tick = GetTickCount()/1000;
			new const days = tick / (24*60*60);
			tick -= days * 24 * 60 * 60;
			new const hours = tick / (60*60);
			tick -= hours * 60 * 60;
			new const minutes = tick / 60;
			tick -= minutes * 60;
			new const seconds = tick % 60;
			format(uptimename, 128, "Дней[%d] Часов[%02d] Минут[%02d] Секунд[%02d]", days, hours, minutes, seconds);

			foreach(LoginPlayer, i)
			{
			    players++;
				if(IsPlayerAFK(i))							afk++;
				if(GetPlayerAdmin(i))  						admins++;
				if(IsForce(PlayerInfo[i][pFaction]))		police++;
				else if(IsGang(PlayerInfo[i][pFaction]))	criminal++;
				else if(PlayerInfo[i][pFaction] > 0)		buses++;
				else if(Job.GetPlayerJob(i) > 0)			jobs++;
				else                                        noteam++;
				levelsum += PlayerInfo[i][pLevel];
			}

			format(lstring, sizeof(lstring),
			"{FFFFFF}Авторизованных:\t{B1C8FB}%d/%d [%d%%]\n\
             {FFFFFF}Администраторов:\t{B1C8FB}%d [%d%%]\n\
             {FFFFFF}Отошли в AFK:\t\t{B1C8FB}%d [%d%%]\n\n",
							players, Iter_Count(Player), floatround(100 * players/Iter_Count(Player)),
							admins, floatround(100 * admins / players),
							afk, floatround(100 * afk / players));

			format(lstring, sizeof(lstring),
			"%s{FFFFFF}Гос.органы:\t\t{B1C8FB}%d [%d%%]\n\
			 {FFFFFF}Криминальные:\t{B1C8FB}%d [%d%%]\n\
			 {FFFFFF}Нейтральные:\t\t{B1C8FB}%d [%d%%]\n\
			 {FFFFFF}Работяги:\t\t{B1C8FB}%d [%d%%]\n\
			 {FFFFFF}Безработные:\t\t{B1C8FB}%d [%d%%]\n\n",
							lstring, police, floatround(100 * police / players),
							criminal, floatround(100 * criminal / players),
							buses, floatround(100 * buses / players),
							jobs, floatround(100 * jobs / players),
							noteam, floatround(100 * noteam / players));

			format(lstring, sizeof(lstring),
			"%s{FFFFFF}Рекорд онлайна:\t{B1C8FB}%d\n\
			 {FFFFFF}Средний уровень:\t{B1C8FB}%.1f\n\
			 {FFFFFF}Загруз таймеров:\t{B1C8FB}%.4f%%\n\
			 {B1C8FB}Uptime: %s",
							lstring, CurrentPlayerRecords,
							float(levelsum/players),
							100*float(timer)/2147483647,
							uptimename);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Статистика сервера", lstring, "Закрыть", "Назад");
		}
		case DSERV_ADMINS:
		{
			string = "%d/%m/%Y"; // Date Format
			mysql_format(g_SQL, lstring, sizeof(lstring), "SELECT `username`, `online`, `admin`, FROM_UNIXTIME(`exitunix`, '%s') FROM `players` WHERE `admin` > 0 ORDER BY `admin` DESC, `online` DESC, `exitunix` DESC", string);
			new Cache:result = mysql_query(g_SQL, lstring);
			new row_count = cache_num_rows();
			if(row_count == 0)
			{
				cache_delete(result);
			    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Не найдено ни одного администратора.");
			}
		    new name[32], date[20], online, admin;
	    	lstring = "Группа\tОнлайн\tИмя игрока\n";
		    for(new idx, r = 0; r < row_count; r++)
		    {
		        idx = 0;
				cache_get_value_index(r, idx++, name);
				cache_get_value_index_int(r, idx++, online);
				cache_get_value_index_int(r, idx++, admin);
				cache_get_value_index(r, idx++, date);
				if(online == -1)    format(lstring, sizeof(lstring), "%s{DFDFDF}%s\t{DFDFDF}%s\t{DFDFDF}%s\n", lstring, getAdminStatus(admin), date, name);
				else                format(lstring, sizeof(lstring), "%s{FFFFFF}%s\t{FFFFFF}%d\t{FFFFFF}%s\n", lstring, getAdminStatus(admin), online, name);
			}
			cache_delete(result);
			format(string, sizeof(string), "Администраторский состав:");
			if(GetPlayerAdmin(playerid) >= ADMIN_GADMIN)    MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, string, lstring, "Выбрать", "Назад");
			else											MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, string, lstring, "Закрыть", "Назад");
		}
		case DSERV_ADMINS_ACTION:
		{
			new id = GetPVarInt(playerid, "DSERV:ADMINS:ID"); string = "%d/%m/%Y"; // Date Format
			mysql_format(g_SQL, lstring, sizeof(lstring), "SELECT `username`, `online`, `admin`, FROM_UNIXTIME(`exitunix`, '%s') FROM `players` WHERE id = %d", string, id);
			new Cache:result = mysql_query(g_SQL, lstring);
			if(cache_num_rows() == 0)
			{
				cache_delete(result);
				DeletePVar(playerid, "DSERV:ADMINS:ID");
			    return ShowDialog(playerid, DSERV_ADMINS);
			}
			new name[32], online, admin, date[20];
			cache_get_value_index(0, 0, name);
			cache_get_value_index_int(0, 1, online);
			cache_get_value_index_int(0, 2, admin);
			cache_get_value_index(0, 3, date);
			cache_delete(result);

			if(online == -1) format(lstring, sizeof(lstring), "\n"MAIN_COLOR"%s %s [%s]\n\n", getAdminStatus(admin), name, date);
			else             format(lstring, sizeof(lstring), "\n"MAIN_COLOR"%s %s (id: %d)\n\n", getAdminStatus(admin), name, online);
			strcat(lstring, "{FFFFFF}Для разжалования этого админа введите 'уволить' или 'uninvite':");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Разжалование админа", lstring, "Ввести", "Назад");
		}
		case DSERV_LEADERS:
		{
			new query[512]; string = "%d/%m/%Y"; // Date Format
			mysql_format(g_SQL, query, sizeof(query), "SELECT `username`, `online`, `faction`, FROM_UNIXTIME(`exitunix`, '%s'), FROM_UNIXTIME(`leader`, '%s') FROM `players` WHERE `leader` > 0 ORDER BY `faction` ASC, `online` DESC", string, string);
			new Cache:result = mysql_query(g_SQL, query);
			new row_count = cache_num_rows();
			if(row_count == 0)
			{
				cache_delete(result);
			    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Не найдено ни одного лидера.");
			}
		    new name[32], online, faction, date[20], leader[20];
	    	lstring = "Фракция\tОнлайн\tИмя игрока\tЛидер с\n";
		    for(new idx, r = 0; r < row_count; r++)
		    {
		        idx = 0;
				cache_get_value_index(r, idx++, name);
				cache_get_value_index_int(r, idx++, online);
				cache_get_value_index_int(r, idx++, faction);
				cache_get_value_index(r, idx++, date);
				cache_get_value_index(r, idx++, leader);
				if(online == -1)    format(lstring, sizeof(lstring), "%s{DFDFDF}%s\t{DFDFDF}%s\t{DFDFDF}%s\t{DFDFDF}%s\n", lstring, GetFactionName(faction), date, name, leader);
				else                format(lstring, sizeof(lstring), "%s{FFFFFF}%s\t{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\n", lstring, GetFactionName(faction), online, name, leader);
			}
			cache_delete(result);
			format(string, sizeof(string), "Лидерский состав:");
			if(GetPlayerAdmin(playerid) >= ADMIN_GADMIN)    MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, string, lstring, "Выбрать", "Назад");
			else											MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, string, lstring, "Закрыть", "Назад");
		}
		case DSERV_LEADERS_ACTION:
		{
		}
		//---   faction
		case DFACT_MEMBERS:
		{
			new faction = PlayerInfo[playerid][pFaction];
			string = "%d/%m/%Y"; // Date Format
			mysql_format(g_SQL, lstring, sizeof(lstring), "SELECT `username`, `online`, `rank`, `p_number`, FROM_UNIXTIME(`exitunix`, '%s') FROM `players` WHERE `faction` = '%d' ORDER BY `rank` DESC, `online` DESC, `exitunix` DESC", string, PlayerInfo[playerid][pFaction]);
			new Cache:result = mysql_query(g_SQL, lstring);
			new row_count = cache_num_rows();
			if(row_count == 0)
			{
				cache_delete(result);
			    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "В вашей организации не найдено ни одного игрока.");
			}
		    new name[32], date[20], online, rank, p_number;
			lstring = "Ранг\tИмя игрока\tОнлайн\tТелефон\n";
		    for(new idx, r = 0; r < row_count; r++)
		    {
				idx = 0;
				cache_get_value_index(r, idx++, name);
				cache_get_value_index_int(r, idx++, online);
				cache_get_value_index_int(r, idx++, rank);
				cache_get_value_index_int(r, idx++, p_number);
				cache_get_value_index(r, idx++, date);
				if(rank < 1 || rank > FactionRankMax[faction]) continue;
				if(online == -1)	format(lstring, sizeof(lstring), "%s{DFDFDF}%s\t{DFDFDF}%s\t{DFDFDF}%s\t{DFDFDF}%d\n", lstring, FactionRank[faction][rank-1], name, date, p_number);
				else				format(lstring, sizeof(lstring), "%s{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%d\t{FFFFFF}%d\n", lstring, FactionRank[faction][rank-1], name, online, p_number);
			}
			cache_delete(result);
			format(string, sizeof(string), "%s: Состав организации", GetFactionName(PlayerInfo[playerid][pFaction]));
			if(IsPlayerLeader(playerid))	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, string, lstring, "Выбрать", "Закрыть");
			else                            MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, string, lstring, "Закрыть", "");
		}
		case DFACT_MEMBERS_ACTION:
		{
			new id = GetPVarInt(playerid, "DFACT:MEMBERS:ID"); string = "%d/%m/%Y"; // Date Format
			mysql_format(g_SQL, lstring, sizeof(lstring), "SELECT `rank`, `username`, `online`, FROM_UNIXTIME(`exitunix`, '%s') FROM `players` WHERE P.id = %d", string, id);
			new Cache:result = mysql_query(g_SQL, lstring);
			if(cache_num_rows() == 0)
			{
				cache_delete(result);
				DeletePVar(playerid, "DFACT:MEMBERS:ID");
			    return ShowDialog(playerid, DFACT_MEMBERS);
			}
			new rank, name[32], online, date[20];
			new faction = PlayerInfo[playerid][pFaction];
			cache_get_value_index_int(0, 0, rank);
			cache_get_value_index(0, 1, name);
			cache_get_value_index_int(0, 2, online);
			cache_get_value_index(0, 3, date);
			cache_delete(result);
			
			if(online == -1) format(lstring, sizeof(lstring), "\n"MAIN_COLOR"%s %s [%s]\n\n", FactionRank[faction][rank-1], name, date);
			else             format(lstring, sizeof(lstring), "\n"MAIN_COLOR"%s %s (id: %d)\n\n", FactionRank[faction][rank-1], name, online);
			strcat(lstring, "{FFFFFF}Для увольнения этого игрока введите 'уволить' или 'uninvite':");

			format(string, sizeof(string), "%s: Увольнение", GetFactionName(PlayerInfo[playerid][pFaction]));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, string, lstring, "Ввести", "Назад");
		}
		//---	mission
		case DMIS_TRAINING1:
		{
			format(string, sizeof(string), "%s: Диалог", ActorInfo[A_NEWBIE][a_Name]);
			format(lstring, sizeof(lstring), "{FFFFFF}Привет, я "MAIN_COLOR"%s{FFFFFF}.\n\
				Смотрю ты не местный?! Слушай, я думаю мы сможем помочь друг другу.\n\
				Я здесь жду одного человека, он должен быть с минуты на минуту,\n\
				Потом нам нужно будет ехать в аэропорт, рейс через пол часа.\n\
				Мне нужно вызвать такси, но на моем телефоне кончилась зарядка,\n\
				"MAIN_COLOR"Тут поблизости есть таксофон - добеги до туда и вызови для меня такси!{FFFFFF}\n\
				Поверь, я умею благодарить!", ActorInfo[A_NEWBIE][a_Name]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, string, lstring, "Начать", "");
		}
		case DMIS_TRAINING2:
		{
			format(string, sizeof(string), "%s: Диалог", ActorInfo[A_NEWBIE][a_Name]);
			lstring = "{FFFFFF}Огромное спасибо, вот тебе обещанная награда.\n\
				Я вижу ты отличный парень, если нужна будет помощь - обращайся!";
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, string, lstring, "Закрыть", "");
		}
		//---
		case DWAREHOUSE_MAIN:
		{
		    new const faction = GetPVarInt(playerid, "WH:faction");

		    // Основные позиции
		    format(lstring, sizeof(lstring), ""MAIN_COLOR"• Положить на склад\t\n\
						                      "MAIN_COLOR"• {FFFFFF}Деньги\t[%d$]\n\
											  "MAIN_COLOR"• {FFFFFF}Наркотики\t[%d г.]\n\
											  "MAIN_COLOR"• {FFFFFF}Материалы\t[%d шт.]",
											  Warehouse[faction][WH_MONEY],
											  Warehouse[faction][WH_DRUGS],
											  Warehouse[faction][WH_MATS]);// FF8300
			// Оружие
			new weaponid = 0;
			for(new s = 0; s < WH_GUN_MAX; s++)
			{
			    if(Warehouse[faction][WH_GUN][s] != 0)
			    {
				    weaponid = GetWarehouseWeaponid(s);
				    format(lstring, sizeof(lstring), "%s\n{FFFF66}• %s\t{FFFF66}[%d птр.]", lstring, ReturnWeaponName(weaponid), Warehouse[faction][WH_GUN][s]);
			    }
			}

		    // Вывод диалога
		    format(string, sizeof(string), "Склад '%s'", GetFactionName(faction));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, string, lstring, "Выбрать", "Закрыть");
		}
		case DWAREHOUSE_TAKE:
		{
		    new const faction = GetPVarInt(playerid, "WH:faction");
		    switch(GetPVarInt(playerid, "WH:takeitem"))
		    {
		        case 1:// Деньги
		        {
		            format(lstring, sizeof(lstring), ""MAIN_COLOR"• {FFFFFF}Деньги [%d$]\n\nВведите желаемое количество:", Warehouse[faction][WH_MONEY]);
		        }
		        case 2:// Наркотики
		        {
		            format(lstring, sizeof(lstring), ""MAIN_COLOR"• {FFFFFF}Наркотики [%d г.]\n\nВведите желаемое количество:", Warehouse[faction][WH_DRUGS]);
		        }
		        case 3:// Материалы
		        {
		            format(lstring, sizeof(lstring), ""MAIN_COLOR"• {FFFFFF}Материалы [%d шт.]\n\nВведите желаемое количество:", Warehouse[faction][WH_MATS]);
		        }
		        default:
				{
				    new bool:founded = false;
				    new const item = GetPVarInt(playerid, "WH:takeitem");
				    for(new idx, s = 0; s < WH_GUN_MAX; s++)
				    {
				        if(Warehouse[faction][WH_GUN][s] != 0 && idx++ == item - 4)
				        {
				            new weaponid = GetWarehouseWeaponid(s);
				            format(lstring, sizeof(lstring), ""MAIN_COLOR"• {FFFF66}%s [%d птр.]\n\n{FFFFFF}Введите желаемое количество:", ReturnWeaponName(weaponid), Warehouse[faction][WH_GUN][s]);
							founded = true; break;
				        }
				    }
				    if(founded == false)
					{
					    Dialogid[playerid] = INVALID_DIALOGID;
						return ShowDialog(playerid, DWAREHOUSE_MAIN);
					}
				}
		    }
		    format(string, sizeof(string), "Склад '%s'", GetFactionName(faction));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, string, lstring, "Ввести", "Назад");
		}
		case DWAREHOUSE_INV:
		{
		    // Основные позиции
		    format(lstring, sizeof(lstring), ""MAIN_COLOR"• Деньги\t[%d$]\n\
											  "MAIN_COLOR"• Наркотики\t[%d г.]\n\
											  "MAIN_COLOR"• Материалы\t[%d шт.]",
											  MyGetPlayerMoney(playerid),
											  Inv.GetThing(playerid, THING_DRUGS),
											  Inv.GetThing(playerid, THING_GUN_MATS));
			// Оружие
			for(new slot = 2, weaponid, ammo; slot < 8; slot++)
			{   // Поиск оружия в инвентаре игрока
				MyGetPlayerWeapon(playerid, slot, weaponid, ammo);
			    if(weaponid > 0 && ammo > 0)
			    {
			        if(GetWarehouseWeaponSlot(weaponid) != -1)
			        {   // Получение слота оружия на складе (-1 если не может лежать)
					    format(lstring, sizeof(lstring), "%s\n{FFFF66}• %s\t{FFFF66}[%d птр.]", lstring, ReturnWeaponName(weaponid), ammo);
					}
			    }
			}

		    // Вывод диалога
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Положить на склад", lstring, "Выбрать", "Назад");
		}
		case DWAREHOUSE_GIVE:
		{
		    switch(GetPVarInt(playerid, "WH:giveitem"))
		    {
		        case 0:// Деньги
		        {
		            format(lstring, sizeof(lstring), ""MAIN_COLOR"• Деньги [%d$]\n\nВведите желаемое количество:", MyGetPlayerMoney(playerid));
		        }
		        case 1:// Наркотики
		        {
		            format(lstring, sizeof(lstring), ""MAIN_COLOR"• Наркотики [%d г.]\n\nВведите желаемое количество:", Inv.GetThing(playerid, THING_DRUGS));
		        }
		        case 2:// Материалы
		        {
		            format(lstring, sizeof(lstring), ""MAIN_COLOR"• Материалы [%d шт.]\n\nВведите желаемое количество:", Inv.GetThing(playerid, THING_GUN_MATS));
		        }
		        default:
				{
					// Оружие
					new bool:founded = false;
				    new const item = GetPVarInt(playerid, "WH:giveitem");
					for(new idx, slot = 2, weaponid, ammo; slot < 8; slot++)
					{   // Поиск оружия в инвентаре игрока
						MyGetPlayerWeapon(playerid, slot, weaponid, ammo);
					    if(weaponid > 0 && ammo > 0)
					    {
					        if(GetWarehouseWeaponSlot(weaponid) != -1 && idx++ == item - 3)
					        {   // Получение слота оружия на складе (-1 если не может лежать)
							    format(lstring, sizeof(lstring), "%s\n{FFFF66}• %s\t{FFFF66}[%d птр.]\n\nВведите желаемое количество:", lstring, ReturnWeaponName(weaponid), ammo);
							    founded = true; break;
							}
					    }
					}
				    if(founded == false)
					{
					    Dialogid[playerid] = INVALID_DIALOGID;
						return ShowDialog(playerid, DWAREHOUSE_INV);
					}
				}
		    }
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Положить на склад", lstring, "Ввести", "Назад");
		}
		//	job
		case DJOB_GUNDEAL_MATS:
		{
			lstring = "{FFFFFF}Введите кол-во металла для закупки:\n\n\
			Стоимость единицы: "MAIN_COLOR"$100";
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Закупка металла", lstring, "Купить", "Закрыть");
		}
		case DJOB_GUNDEAL_GUN:
		{
			lstring = "Оружие\tОбойма\tМатериалы\n";
			for(new i = 0, w; i < sizeof(GunDealWeapons); i++)
			{
				w = GunDealWeapons[i];
				format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t%d\t%d\n", lstring, GunParams[w][GUN_NAME], GunParams[w][GUN_AMMO], GunParams[w][GUN_MATS]);
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, "Изготовление оружия", lstring, "Изготовить", "Назад");
		}
		case DJOB_DRUGDEAL_MATS:
		{
			lstring = "{FFFFFF}Введите кол-во травы для закупки:\n\n\
			Стоимость единицы: "MAIN_COLOR"$100";
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Закупка травы", lstring, "Купить", "Закрыть");
		}
		case DJOB_MECHANIC:
		{
			if(Job.GetPlayerJob(playerid) != JOB_MECHANIC)
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не работаете механиком.");
			}
			if(Job.GetPlayerNowWork(playerid) == JOB_MECHANIC)
			{
				string = "{FFFFFF}Вы уверены, что хотите закончить?\n\
				Вы перестанете получать заказы и не сможете чинить автомобили.";
			}
			else
			{
				string = "{FFFFFF}Вы готовы приступить к работе механиком?\n\
				Вам будет выдана рабочая одежда и начнут поступать заказы.";
			}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Выход на дежурство", string, "Да", "Закрыть");
		}
	    //---
	    case DMENU_MAIN:
	    {
	    	openWithMenu[playerid] = false;
	    	//if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] < 4)	strcat(lstring, ""MAIN_COLOR"• Мои задачи\n");
	        strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Статистика\n\
	        				"MAIN_COLOR"• {FFFFFF}Прокачка\n");
	    #if defined _player_phone_included
	        if(PlayerInfo[playerid][pPhoneNumber])
	        {
	        	strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Телефон\n");
	        }
	    #endif     
			strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Настройки\n\
							"MAIN_COLOR"• {FFFFFF}Безопасность\n\
							"MAIN_COLOR"• "MAIN_COLOR"Доп. возможности §\n\
							"MAIN_COLOR"• {FFFFFF}Ввести бонус код\n\
							"MAIN_COLOR"• {FFFFFF}Связь с администрацией");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Игровое меню", lstring, "Выбрать", "Закрыть");
	    }
	    case DMENU_TASKS:
	    {
			for(new i = 1; i < sizeof(StartMissionData); i++)
			{
				if(mission_id[playerid] == i)
				{
					format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t{CFB53B}Выполняется\n", lstring, StartMissionData[i][m_Title]);
				}
				else if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] >= i)
				{
					format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t"MAIN_COLOR"Выполнено\n", lstring, StartMissionData[i][m_Title]);
				}
				else if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] < i)
				{
					format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t{FF6347}Не выполнено\n", lstring, StartMissionData[i][m_Title]);
				}
			}
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Игровые задачи", lstring, "Выбрать", "Назад");
	    }
	    case DMENU_LEVELING:
	    {
			strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Навыки\n\
							"MAIN_COLOR"• {FFFFFF}Навыки оружия\n\
							"MAIN_COLOR"• {FFFFFF}Улучшения");
			#if defined _player_achieve_included
				strcat(lstring, "\n"MAIN_COLOR"• {FFFFFF}Достижения");
			#endif
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Прокачка", lstring, "Выбрать", (openWithMenu[playerid] ? ("Назад") : ("Закрыть")));
	    }
	    case DMENU_SKILL:
	    {
	    	new count = 0;
		    for(new i = 1; i <= sizeof(AS_Mission); i++)
			{
				if((PlayerInfo[playerid][pASElement] >> i) & 0x1)
				{
					count++;
				}
			}
	    	new proc = floatround(count / 0.07);
	    	new PREFIX[] = "{CFB53B}• ";

	    	format(lstring, sizeof(lstring),
	    		"Наименование\tУровень\tПрогресс\n\
	    		{CFB53B}— Общее —{FFFFFF}\n\
	    		{CFB53B}•{FFFFFF} Вождение\t—\t%d%%\n\
	    		{CFB53B}•{FFFFFF} Сила\t—\t%d%%\n\
	    		{CFB53B}— Професиональные навыки —{FFFFFF}\n",
					proc, floatround(PlayerInfo[playerid][pPower]));
	    	strcat(lstring, FormatSkill(PREFIX, "Таксист\t", PlayerInfo[playerid][pTaxiLevel], PlayerInfo[playerid][pTaxiSkill], GetTaxiSkill(playerid)));
	    	strcat(lstring, FormatSkill(PREFIX, "Водитель автобуса\t", PlayerInfo[playerid][pBusLevel], PlayerInfo[playerid][pBusSkill], GetBusSkill(playerid)));
	    	strcat(lstring, FormatSkill(PREFIX, "Дальнобойщик\t", PlayerInfo[playerid][pTruckLevel], PlayerInfo[playerid][pTruckSkill], GetTruckSkill(playerid)));
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, "Навыки", lstring, "Назад", "");
	    }
	    case DMENU_WEAPON_SKILL:
	    {
	    	strcat(lstring, "Оружие\tВладение\n\
	    					{CFB53B}•{FFFFFF} Silenced Pistol\t—\t0%\n\
	    					{CFB53B}•{FFFFFF} Desert Eagle\t—\t0%\n\
	    					{CFB53B}•{FFFFFF} Shotgun\t—\t0%\n\
	    					{CFB53B}•{FFFFFF} Sawnoff Shotgun\t—\t0%\n\
	    					{CFB53B}•{FFFFFF} Combat Shotgun\t—\t0%\n\
	    					{CFB53B}•{FFFFFF} MP5\t—\t0%\n\
	    					{CFB53B}•{FFFFFF} AK47\t—\t0%\n\
	    					{CFB53B}•{FFFFFF} M4\t—\t0%\n\
	    					{CFB53B}•{FFFFFF} Sniper Rifle\t—\t0%");
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, "Навыки оружия", lstring, "Назад", "");
	    }
	    case DMENU_ADVANCE:
	    {
	    	strcat(lstring, "Наименование\tТекущее\tУлучшение\n\
	    					Здоровье при спавне\t10hp\t+5hp\n\
	    					Размер инвентаря\t30kg\tМаксимум\n\
	    					Решительность\tНет");
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, "Улучшения", lstring, "Купить", "Назад");
	    }
	    case DMENU_DONATE:
	    {
	        format(lstring, sizeof(lstring),
	            ""MAIN_COLOR"< Я не знаю, как получить монеты. >\n\
	            "MAIN_COLOR"• {FFFFFF}Покупка премиум аккаунта\n\
	            "MAIN_COLOR"• {FFFFFF}Покупка номера телефона\n\
	            "MAIN_COLOR"• {FFFFFF}Покупка очков опыта\n\
	            "MAIN_COLOR"• {FFFFFF}Перевод монет в доллары\n\
	            "MAIN_COLOR"• {FFFFFF}Перевод монет в очки апргейда\n\
	            "MAIN_COLOR"• {FFFFFF}Перевод монет в законопослушность\n");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Доп. возможности", lstring, "Выбрать", (openWithMenu[playerid] ? ("Назад") : ("Закрыть")), 0);
	    }
	    case DMENU_HOWGETCOIN:
	    {
	        format(lstring, sizeof(lstring),
	            "{FFFFFF}Получить монеты и сделать игру еще приятнее можно всего в пару кликов:\n\
				1. Зайдите по адресу: "MAIN_COLOR""DONATE_URL"{FFFFFF}\n\
				2. Введите логин и количество желаемых монет\n\
				\n{AFAFAF}Монеты придут быстрее, чем вы скажите '%s'\n\
				Если у вас возникли проблемы, то обратитесь к администрации через сайт или команду /ask",
				LongWords[random(sizeof(LongWords))]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Как получить монеты?", lstring, "Назад", "", 0);
	    }
	    case DMENU_COINTOVIP:
	    {
	    	format(lstring, sizeof(lstring),
	            "{FFFFFF}Имеется монет: "MAIN_COLOR"%d\n\
	            {FFFFFF}Недельная стоимость аккаунта: "MAIN_COLOR"%d монет\n", GetPlayerCoins(playerid), CoinForVIP);
	    	if(PlayerInfo[playerid][pVip])
	    	{
	    		mysql_format(g_SQL, string, sizeof(string), "SELECT FROM_UNIXTIME('%d')", PlayerInfo[playerid][pVipUNIX]);
				new Cache:result = mysql_query(g_SQL, string);
				cache_get_value_index(0, 0, string);
				cache_delete(result);
				format(lstring, sizeof(lstring), "%s{FFFFFF}Оплачен до: "MAIN_COLOR"%s\n\n\
					{AFAFAF}Введите количество недель, на которые вы хотите продлить премиум\n\
					Месяц премиума (4 недели) будет стоить %d монет", lstring, string, 4 * CoinForVIP);
	    	}
	    	else
	    	{
	    		format(lstring, sizeof(lstring), "%s{AFAFAF}\nВведите количество недель, на которые вы хотите купить премиум\n\
					Месяц премиума (4 недели) будет стоить %d монет", lstring, 4 * CoinForVIP);
	    	}
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покупка премиум аккаунта", lstring, "Перевести", "Назад", 0);
	    }
	    case DMENU_COINTOMONEY:
	    {
	        format(lstring, sizeof(lstring),
	            "{FFFFFF}Имеется монет: "MAIN_COLOR"%d\n\
	            {FFFFFF}Текущий курс за монету: "MAIN_COLOR"%d$\n\
	            {AFAFAF}\nВведите количество монет, которые вы хотите перевести в доллары\n\
				Например, если вы введете 1000 (монет), то получите %d долларов", GetPlayerCoins(playerid), MoneyForCoin, 1000 * MoneyForCoin);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Перевод монет в доллары", lstring, "Перевести", "Назад", 0);
	    }
	    case DMENU_COINTOUPGRADE:
	    {
	        format(lstring, sizeof(lstring),
	            "{FFFFFF}Имеется монет: "MAIN_COLOR"%d\n\
	            {FFFFFF}Текущий курс за апгрейд: "MAIN_COLOR"%d монет\n\
	            {AFAFAF}\nВведите количество апгрейдов, на которые вы хотите обменять монеты\n\
		        Например, если вы введете 5 (апгрейдов), то они будут стоить %d монет", GetPlayerCoins(playerid), CoinForUpgrade, 5 * CoinForUpgrade);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Перевод монет в очки апгрейда", lstring, "Перевести", "Назад", 0);
	    }
	    case DMENU_COINTOLAW:
	    {
	        format(lstring, sizeof(lstring),
	            "{FFFFFF}Имеется монет: "MAIN_COLOR"%d\n\
	            {FFFFFF}Текущий курс за законопослушность: "MAIN_COLOR"%d монет\n\
	            {FFFFFF}Ваша законопослушность: "MAIN_COLOR"%d ед.\n\
	            {AFAFAF}\nВведите количество законопослушности, на которые вы хотите обменять монеты\n\
		        Например, если вы введете 5 (законопослушности), то они будут стоить %d монет", GetPlayerCoins(playerid), CoinForLaw, PlayerInfo[playerid][pLaw], 5 * CoinForLaw);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Перевод монет в очки законопослушности", lstring, "Перевести", "Назад", 0);
	    }
	    case DMENU_SETTING:
	    {
	    	new curspawn[16];
	    	if(PlayerInfo[playerid][pSpawn] == SPAWN_HOUSE)			curspawn = SCOLOR_GREEN "Дом";
	    	else if(PlayerInfo[playerid][pSpawn] == SPAWN_FACTION)	curspawn = SCOLOR_GREEN "Фракция";
	    	else 													curspawn = SCOLOR_GREEN "Спавн";
	        format(lstring, sizeof(lstring),
				MAIN_COLOR "• {FFFFFF}Настроить бинды для чатов\t\n"\
				MAIN_COLOR "• {FFFFFF}Личная анимация:\t%s%s\n"\
				MAIN_COLOR "• {FFFFFF}Стиль боя:\t"MAIN_COLOR"%s\n"\
				MAIN_COLOR "• {FFFFFF}Русификатор:\t%s\n"\
				MAIN_COLOR "• {FFFFFF}Интерфейс:\t%s\n"\
				MAIN_COLOR "• {FFFFFF}Цензура:\t%s\n"\
				MAIN_COLOR "• {FFFFFF}Ники игроков:\t%s\n"\
				MAIN_COLOR "• {FFFFFF}Место появления:\t%s\n"\
				MAIN_COLOR "• {FFFFFF}Иконки домов:\t%s\n"\
				MAIN_COLOR "• {FFFFFF}Зоны гетто:\t%s",
					PlayerInfo[playerid][pAnim]			? (SCOLOR_GREEN)				: (SCOLOR_LIGHTRED), PlayerAnims[ PlayerInfo[playerid][pAnim] ][PANIM_TITLE],
					FightStyleNames[ PlayerInfo[playerid][pFightStyle] ],
					PlayerInfo[playerid][pRusifik]		? (SCOLOR_GREEN "Установлен") 	: (SCOLOR_LIGHTRED "Не установлен"),
					PlayerInfo[playerid][pInterface] 	? (SCOLOR_GREEN "Включен") 		: (SCOLOR_LIGHTRED "Отключен"),
					PlayerInfo[playerid][pCensored] 	? (SCOLOR_GREEN "Включена") 	: (SCOLOR_LIGHTRED "Отключена"),
					pNameTags[playerid]				 	? (SCOLOR_GREEN "Показаны") 	: (SCOLOR_LIGHTRED "Скрыты"),
					curspawn,
					PlayerInfo[playerid][pHouseIcon]	? (SCOLOR_GREEN "Отображаются")	: (SCOLOR_LIGHTRED "Не отображаются"),
					PlayerInfo[playerid][pToggleZone]	? (SCOLOR_GREEN "Отображаются")	: (SCOLOR_LIGHTRED "Не отображаются"));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Настройки", lstring, "Выбрать", "Назад");
	    }
	    case DMENU_FSTYLE:
	    {
	    	for(new i = 0; i < sizeof(FightStyleNames); i++)
	    	{
	    		if(PlayerInfo[playerid][pFightStyle] == i)
	    		{
					format(lstring, sizeof(lstring), "%s" MAIN_COLOR "• {FFFFFF}%s\t" SCOLOR_GREEN "Установлен\n", lstring, FightStyleNames[i]);
	    		}
	    		else if(i == 0 || (PlayerInfo[playerid][pLearnFStyle] >> (i - 1)) & 0x1)
	    		{
	    			format(lstring, sizeof(lstring), "%s" MAIN_COLOR "• {FFFFFF}%s\t" SCOLOR_GREEN "Изучен\n", lstring, FightStyleNames[i]);
	    		}
	    		else
	    		{
	    			format(lstring, sizeof(lstring), "%s" MAIN_COLOR "• {FFFFFF}%s\t" SCOLOR_LIGHTRED "Не изучен\n", lstring, FightStyleNames[i]);
	    		}
	    	}
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Стиль боя", lstring, "Выбрать", "Назад");
	    }
	    case DMENU_PROTECTION:
	    {
	    	format(lstring, sizeof(lstring),
				""MAIN_COLOR"• {FFFFFF}Указать email адрес\t\n\
				"MAIN_COLOR"• {FFFFFF}Сменить ник\t\n\
				"MAIN_COLOR"• {FFFFFF}Сменить пароль\t");
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Безопасность", lstring, "Выбрать", "Назад");
	    }
	    case DMENU_CHANGE_ANIM:
	    {
	    	for(new i = 0; i < sizeof(PlayerAnims); i++)
	    	{
	    		format(lstring, sizeof(lstring), "%s\n"MAIN_COLOR"• {FFFFFF}%s", lstring, PlayerAnims[i][PANIM_TITLE]);
	    	}
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Настройки - Выбор личной анимации", lstring, "Выбрать", "Назад");
	    }
	    case DMENU_CHANGE_SPAWN:
	    {
	    	lstring = ""MAIN_COLOR"• {FFFFFF}Дом/Отель\n\
	    				"MAIN_COLOR"• {FFFFFF}Спавн фракции\n\
	    				"MAIN_COLOR"• {FFFFFF}Общий спавн";
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Настройки - Место появления", lstring, "Выбрать", "Назад");
	    }
	    case DMENU_CHANGE_PASS:
	    {
	    	if(GetPVarInt(playerid, "change_pass") == 0)	lstring = "{FFFFFF}Введите ваш "MAIN_COLOR"ТЕКУЩИЙ{FFFFFF} пароль:";
	    	else 											lstring = "{FFFFFF}Введите "MAIN_COLOR"НОВЫЙ{FFFFFF} пароль для аккаунта:";
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Настройки - Смена пароля", lstring, "Ввод", "Назад");
	    }
	    case DMENU_BONUS:
	    {
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Ввод бонус кода", "{FFFFFF}Введите код бонуса:", "Ввести", "Назад");
	    }
		case DMENU_CONTACT:
		{
			lstring = "{FFFFFF}Используйте "MAIN_COLOR"/ask [ваш_вопрос]{FFFFFF}, чтобы задать вопрос администрации\n\
					   {FFFFFF}Используйте "MAIN_COLOR"/report [playerid] [жалоба]{FFFFFF}, чтобы отправить жалобу\n\n\
					   "MAIN_COLOR"Либо введите сообщение в окошко и нажмите 'Отправить':";
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Связь с администрацией", lstring, "Отправить", (openWithMenu[playerid] ? ("Назад") : ("Закрыть")));
		}
	    //---
	    case DBIZ_MAIN:
	    {
	    	new b = PickupedBiz[playerid];
	    	if(b != INVALID_DATA)
	    	{
	    		if(BizInfo[b][bLocation] == 0)		strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Открыть меню\n");
				else
				{
					if(BizInfo[b][bEnterPrice] > 0)	
					{
						format(lstring, sizeof(lstring), ""MAIN_COLOR"• {FFFFFF}Войти в бизнес\t[$%d]\n", BizInfo[b][bEnterPrice]);
					}
					else 							
					{
						if(BizInfo[b][bPrice] > MyGetPlayerMoney(playerid))
						{
							PickupedBiz[playerid] = INVALID_DATA;
							gPickupTime[playerid] = 5;
							return PlayerEnterBiz(playerid, b);
						}
						else
						{
							strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Войти в бизнес\n");
						}
					}
				}
				if(BizInfo[b][bOwnerID] == 0)
				{
					if(MyGetPlayerMoney(playerid) >= BizInfo[b][bPrice])
					{
						format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}Купить бизнес\t[$%d]\n", lstring, BizInfo[b][bPrice]);
					}
				}		
				else if(BizInfo[b][bOwnerID] == PlayerInfo[playerid][pUserID])	strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Управление");
				format(string, sizeof(string), "%s %s", BizTypeData[ BizInfo[b][bType] ][btName], BizInfo[b][bName]);
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, string, lstring, "Выбрать", "Назад");
	    	}
	    }
	    case DBIZ_MANAGE:
	    {
	    	new b = GetBizWhichPlayer(playerid, 0);
	    	if(b != INVALID_DATA)
	    	{
	    		format(lstring, sizeof(lstring), ""MAIN_COLOR"• {FFFFFF}Изменить название:\t%s\n\
		    	"MAIN_COLOR"• {FFFFFF}Товарный склад\t[%d/%d]\n\
		    	"MAIN_COLOR"• {FFFFFF}Улучшения\t[Недоступно]\n", BizInfo[b][bName], BizInfo[b][bProduct], BizInfo[b][bMaxProds]);
		    	if(BizTypeData[ BizInfo[b][bType] ][btMaxEnterPrice] > 0)
		    	{
		    		format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}Цена за вход\t["MAIN_COLOR"$%d{FFFFFF}]\n", lstring, BizInfo[b][bEnterPrice]);
		    	}
		    	strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Продать бизнес");
		    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Управление бизнесом", lstring, "Выбрать", "Назад");
	    	}
	    }
	    case DBIZ_CHANGE_NAME:
	    {
	    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Смена названия", "{FFFFFF}Введите новое название бизнеса:", "Ввод", "Назад");
	    }
	    case DBIZ_ENTER_PRICE:
	    {
	    	new b = GetBizWhichPlayer(playerid, 0);
	    	if(b != INVALID_DATA)
	    	{
	    		format(string, sizeof(string), "{FFFFFF}Текущая стоимость: "MAIN_COLOR"$%d\n\n\
	    		{FFFFFF}Введите новую стоимость входа ($0-$%d):", BizInfo[b][bEnterPrice], BizTypeData[ BizInfo[b][bType] ][btMaxEnterPrice]);
	    		MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Стоимость входа", string, "Ввод", "Назад");
	    	}
	    }
	    case DBIZ_SELL:
	    {
	    	new b = GetBizWhichPlayer(playerid, 0);
	    	if(b != INVALID_DATA)
	    	{
	    		new price = floatround(BizInfo[b][bPrice] * 0.8);
		    	format(lstring, sizeof(lstring), "{FFFFFF}Вы уверены что хотите продать бизнес?\n\n\
		    	{FFFFFF}Стоимость продажи:\t"MAIN_COLOR"$%.2f\n\
		    	{FFFFFF}Денег в банке:\t"MAIN_COLOR"$%.2f\n\
		    	{FFFFFF}Итого:\t\t\t"MAIN_COLOR"$%.2f", float(price), BizInfo[b][bBank], float(price) + BizInfo[b][bBank]);
		    	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Продажа бизнеса", lstring, "Да", "Нет");
	    	}
	    }
	    //---
	    case DHOME_MAIN:
		{
	        new h = GetPlayerHouseID(playerid);
	        if(h < 0) return true;

	        new price, buff[24];
	        if(HouseInfo[h][hDonate] == 0) price = floatround(HouseInfo[h][hPrice] * 0.75);
	        else price = floatround(HouseInfo[h][hPrice] * MoneyForCoin * 0.75);
	        if(HouseInfo[h][hRentPrice] > 0)	format(string, sizeof(string), ""SCOLOR_GREEN"Стоимость: $%d", HouseInfo[h][hRentPrice]);
	        else 								format(string, sizeof(string), "{FF6347}Закрыта");
	        if(HouseInfo[h][hPaymentDays] >= 0)	buff = "Оплачено";
			else 								buff = "Задолжность";
	        format(lstring, sizeof(lstring), ""MAIN_COLOR"• {FFFFFF}Дверь\t[%s{FFFFFF}]\n\
	        								"MAIN_COLOR"• {FFFFFF}%s\t[%s%d дней]\n\
	        								"MAIN_COLOR"• {FFFFFF}Мебель\t["SCOLOR_GREEN"Слоты: %d/%d{FFFFFF}]\n\
											"MAIN_COLOR"• {FFFFFF}Аренда\t[%s{FFFFFF}]\n\
											"MAIN_COLOR"• {FFFFFF}Прописка\t[%s{FFFFFF}]\n\
											"MAIN_COLOR"• {FFFFFF}Продать дом\t["MAIN_COLOR"$%d{FFFFFF}]", HouseInfo[h][hLock] ? ("{FF6347}Закрыта") : (""SCOLOR_GREEN"Открыта"),
																					buff, (HouseInfo[h][hPaymentDays] > 0) ? (""SCOLOR_GREEN"") : ("{FF6347}"), HouseInfo[h][hPaymentDays],
																					GetOccupiedFurSlots(h), GetHouseFurSlot(h),
																					string,
																					(PlayerInfo[playerid][pHousing] == HouseInfo[h][hID]) ? (""SCOLOR_GREEN"Прописан") : ("{FF6347}Не прописан"),
																					price);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Дом", lstring, "Выбрать", "Назад");
	    }
	    case DHOME_ACC_REGISTER:
	    {
	        new h = GetPlayerHouseID(playerid);
	        if(h < 0) return true;
	        if(PlayerInfo[playerid][pHousing] == HouseInfo[h][hID])	lstring = "{FFFFFF}Вы уверены что хотите выписаться из этого дома?";
			else 													lstring = "{FFFFFF}Вы уверены что хотите прописаться в этом доме?";
	        MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Дом - Прописка", lstring, "Да", "Назад");
	    }
	    case DHOME_FURNITURE:
		{
			lstring = 	"{33AA33}\tКупить мебель\n\
						\tКупить дополнительные слоты\n\
						{FFFFFF}Приобретенная мебель:\n";
			new query[128];
			new house = GetPlayerHouseID(playerid);
	        mysql_format(g_SQL, query, sizeof query, "SELECT `object_id`, `fur_num`, `set` FROM `furniture` WHERE `house_id` = '%d'", HouseInfo[house][hID]);
			new Cache:result = mysql_query(g_SQL, query);
			if(cache_num_rows())
			{
				new num, set;
			    for(new r = 0; r < cache_num_rows(); r++)
			    {
			    	cache_get_value_index_int(r, 1, num);
			    	cache_get_value_index_int(r, 2, set);
				    format(lstring, sizeof(lstring), "%s%s %s\n", lstring, (set) ? ("{FFFFFF}[+]") : ("{AFAFAF}[-]"), FurnitureList[num][fName]);
			    }
			}
   			cache_delete(result);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Дом - Мебель", lstring, "Выбрать", "Назад");
		}
		case DHOME_BUY_FUR_SLOT:
		{
		    format(lstring, sizeof(lstring), "Введите кол-во слотов для покупки:\n\nЦена одного слота %d монет", FUR_SLOT_PRICE);
		    MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Дом - Мебель", lstring, "Выбрать", "Назад");
		}
		case DHOME_RENT:
		{
			new h = GetPlayerHouseID(playerid);
	        if(h < 0 || h >= sizeof(HouseInfo)) return true;
	        if(HouseInfo[h][hRentPrice] > 0)
	        {
				mysql_format(g_SQL, string, sizeof(string), "SELECT `username` FROM `players` WHERE `rent` = '%d'", HouseInfo[h][hID]);
			    new Cache:result = mysql_query(g_SQL, string);
			    if(cache_num_rows() > 0)
			    {
			    	format(lstring, sizeof(lstring), "{33AA33}Арендаторы:{FFFFFF}");
			    	new name[MAX_PLAYER_NAME];
			    	for(new i = 0; i < cache_num_rows(); i++)
			    	{
			    		cache_get_value_index(i, 0, name);
			    		format(lstring, sizeof(lstring), "%s\n\t%s", lstring, name);
			    	}
			    }
			    cache_delete(result);
			    format(lstring, sizeof(lstring), "%s\n{33AA33}Изменить стоимость\n{FF6347}Закрыть аренду", lstring);
			    MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Дом - Аренда", lstring, "Выбрать", "Назад");
	        }
	        else
	        {
	        	MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Дом - Аренда", "Введите стоимость аренды в вашем доме:", "Выбрать", "Назад");
	        }
		}
		case DHOME_RENT_MOVEOUT:
		{
			new h = GetPlayerHouseID(playerid);
	        if(h < 0) return true;
			new userid = GetPVarInt(playerid, "House:Rent:Playerid");
			format(lstring, sizeof(lstring), "{FFFFFF}Вы уверены что хотите выселить %s?", GetPlayerUsername(userid));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Дом - Аренда", lstring, "Да", "Нет");
		}
		case DHOME_RENT_CHANGE:
		{
			new h = GetPlayerHouseID(playerid);
	        if(h < 0) return true;
	        MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Дом - Аренда", "{FFFFFF}Введите стоимость аренды в вашем доме:", "Выбрать", "Назад");
		}
		case DHOME_TAKE_RENT:
		{
			new h = PickupedHouse[playerid];
			if(h >= 0 && HouseInfo[h][hOwnerID] > 0)
    		{
    			if(HouseInfo[h][hRentPrice] > 0)
    			{
    				if(PlayerInfo[playerid][pRent])	lstring = "{FF6347}Вы уже где-то арендуете жилье\n\n";
    				format(lstring, sizeof(lstring),
    					"%s{FFFFFF}Вы уверены что хотите арендовать этот дом?\n\
    					Стоимость аренды: "MAIN_COLOR"$%d/день\n\n\
    					Введите количество дней аренды:", lstring, HouseInfo[h][hRentPrice]);
    				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Дом - Аренда", lstring, "Ввод", "Отмена");
    			}
    		}
		}
		case DHOME_CANCEL_RENT:
		{
			new h = PickupedHouse[playerid];
			if(h >= 0)
    		{
    			if(PlayerInfo[playerid][pRent] == HouseInfo[h][hID]){
    				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Дом - Аренда", "Вы уверены что хотите перекратить аренду?", "Да", "Нет");
    			}
    		}
		}
		//---
		case DNPC_EMMET:
		{
		    new ammoname[48], catname[20], weaponid;
		    lstring = ""MAIN_COLOR"   [Категория]\t[Название]\t[Цена]\t[Обойма/Склад]\n";
		    for(new i; i < sizeof(EmmetStore); i++)
		    {
				switch(i)
				{
				    case 0:	catname = "Пистолет";
				    case 1:	catname = "Дробовик";
				    case 2:	catname = "Полуавтомат";
				    case 3:	catname = "Автомат";
				    case 4:	catname = "Винтовка";
				    case 5:
				    {
				        format(lstring, sizeof(lstring), "%s- {C0DCC0}Осколочная граната\t \t{C0DCC0}[%d$]\t{C0DCC0}[1 / %d]\n", lstring, EmmetStore[i][2], EmmetStore[i][1]);
				        continue;
				    }
				    case 6:
				    {
				        format(lstring, sizeof(lstring), "%s- {C0DCC0}Бронированный жилет\t \t{C0DCC0}[%d$]\t{C0DCC0}[1 / %d]\n", lstring, EmmetStore[i][2], EmmetStore[i][1]);
				        continue;
				    }
				}
				weaponid = EmmetStore[i][0];
				if(weaponid == 0 || EmmetStore[i][1] == 0)
				{
					if(weaponid == 0)	ammoname = "Пусто";
					format(lstring, sizeof(lstring), "%s{AFAFAF}- %s:\t{AFAFAF}%s\t{AFAFAF}[%d$]\t{AFAFAF}[%d / %d]\n",
						lstring, catname, ammoname, EmmetStore[i][2], GunParams[weaponid][GUN_AMMO], EmmetStore[i][1]);
				}
				else
				{
					strput(ammoname, GunParams[weaponid][GUN_NAME]);
					format(lstring, sizeof(lstring), "%s- %s:\t%s\t[%d$]\t[%d / %d]\n",
						lstring, catname, ammoname, EmmetStore[i][2], GunParams[weaponid][GUN_AMMO], EmmetStore[i][1]);
				}
		    }
		    MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST_HEADERS, "[Разговор > Emmet]", lstring, "Купить", "Закрыть");
		}
		//---
		case DRACE_JOIN:
		{
		    format(lstring, sizeof(lstring),
				"{DABB3E}Название: {FFFFFF}%s\n\
				{DABB3E}Тип гонки: {FFFFFF}Спринт\n\
				{DABB3E}Участников: {FFFFFF}%d/%d\n\
				\n{DABB3E}Рекорд: {FFFFFF}",
				RaceInfo[rName], RaceInfo[rPlayers], RaceInfo[sp_cache]);
			if(RaceInfo[rRecord] > 0 && strlen(RaceInfo[rRecordBy]))
			{
			    format(lstring, sizeof(lstring), "%s%s\n{DABB3E}Поставил: {FFFFFF}%s", lstring, UnixToRaceTime(RaceInfo[rRecord]), RaceInfo[rRecordBy]);
			}
			else strcat(lstring, "--:--.---\n{DABB3E}Поставил: {FFFFFF}n/a");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Гонка: Информация", lstring, "Войти", "Закрыть");
		}
		case DRACE_MAIN:
		{
		    format(lstring, sizeof(lstring),
		        ""MAIN_COLOR"• {FFFFFF}Список всех гонок\n\
		         "MAIN_COLOR"• {FFFFFF}Запустить случайную\n\
		         "MAIN_COLOR"• {FFFFFF}Создать новую гонку\n");
		    if(RaceInfo[rStatus] != 0) strcat(lstring, "{FF6347}[!] {AFAFAF}Остановить гонку\n");
		    if(RaceInfo[rStatus] == 1) strcat(lstring, "{FF6347}[!] {AFAFAF}Дать старт гонке\n");
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Гоночное меню", lstring, "Выбрать", "Закрыть", 0);
		}
		case DRACE_LIST:
		{
			// new Cache:result = mysql_query(g_SQL, "SELECT * FROM `races`");
			new Cache:result = mysql_query(g_SQL, "SELECT `id`, `created`, `name`, `record`, `recordby`, (SELECT COUNT(*) FROM `race_spawn` WHERE race_spawn.raceid = races.id) AS count FROM `races`");
			if(!cache_num_rows())
			{
			    cache_delete(result);
			    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Еще не создано ни одной гонки.");
			    return ShowDialog(playerid, DRACE_MAIN);
			}
			new id, created, name[32], record, recordby[32], sp_count;
		    for(new r = 0; r < cache_num_rows(); r++)
		    {
		        if(r > 11)
		        {
		            strcat(lstring, "(список переполнен, создайте страницы)");
		            break;
		        }
		        cache_get_value_index_int(r, 0, id);
		        cache_get_value_index_int(r, 1, created);
		        cache_get_value_index(r, 2, name);
		        cache_get_value_index_int(r, 3, record);
		        cache_get_value_index(r, 4, recordby);
		        cache_get_value_index_int(r, 5, sp_count);

				if(RaceInfo[rStatus] != 0 && RaceInfo[rID] == id)
				    format(lstring, sizeof(lstring), "%s{FFFFFF}#%d  | '%s' | Limit: %d | {33AA33}RUNNING NOW\n", lstring, id, name, sp_count);
				else if(created == 1)
				    format(lstring, sizeof(lstring), "%s{FFFFFF}#%d  | '%s' | Limit: %d | Record %s (%s)\n", lstring, id, name, sp_count, UnixToRaceTime(record), recordby);
				else
				    format(lstring, sizeof(lstring), "%s{FF6347}#%d  | '%s' | Limit: %d | NOT READY TO START\n", lstring, id, name, sp_count);
		    }
		    cache_delete(result);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, "Список созданных гонок", lstring, "Выбрать", "Назад", 0);
		}
		case DRACE_EDIT:
		{
		    mysql_format(g_SQL, string, sizeof(string), "SELECT `created`, `name` FROM `races` WHERE `id` = '%d'", redit_id[playerid]);
			new Cache:result = mysql_query(g_SQL, string);
			if(!cache_num_rows())
			{
			    cache_delete(result);
			    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой гонки не существует.");
			    ShowDialog(playerid, DRACE_LIST);
			    return 1;
			}
			new name[32], created;
	        cache_get_value_name_int(0, "created", created);
	        cache_get_value_name(0, "name", name);
	        cache_delete(result);
	        //---
			foreach(LoginPlayer, i)
			{
			    if(playerid != i && redit_id[i] == redit_id[playerid])
			    {
			        SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "%s[%d] уже редактирует эту гонку.", ReturnPlayerName(i), i);
			        redit_id[playerid] = 0;
			        ShowDialog(playerid, DRACE_MAIN);
			        return 1;
			    }
			}
	        //---
	        if(RaceInfo[rStatus] != 0)
	        {
	            if(redit_id[playerid] == RaceInfo[rID])
					 lstring = ""MAIN_COLOR"• {AFAFAF}Прервать гонку\n";
	            else lstring = ""MAIN_COLOR"• {AFAFAF}Запустить гонку [запущена другая]\n";
	        }
	        else	 lstring = ""MAIN_COLOR"• {FFFFFF}Запустить гонку\n";
		    //---
		    strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Параметры гонки\n");
		    //---
		    if(created == 0) strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Завершить редактирование\n");
		    else             strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Возобновить редактирование\n");
			//---
			if(created == 0)
			{
				// Cпавн точки
			    mysql_format(g_SQL, string, sizeof(string), "SELECT COUNT(*) AS count FROM `race_spawn` WHERE `raceid` = '%d'", redit_id[playerid]);
				result = mysql_query(g_SQL, string);
				new spawnpos;
				cache_get_value_index_int(0, 0, spawnpos);
				cache_delete(result);

				// Чекпоинты
			    mysql_format(g_SQL, string, sizeof(string), "SELECT COUNT(*) AS count FROM `race_cp` WHERE `raceid` = '%d'", redit_id[playerid]);
				result = mysql_query(g_SQL, string);
				new checkpoints;
				cache_get_value_index_int(0, 0, checkpoints);
				cache_delete(result);

			    strcat(lstring, "{AFAFAF}_______________________________\n");
			    if(!spawnpos) strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Создать спавн точки\n");
			    else          strcat(lstring, "{FF6347}• {FFFFFF}Редактировать спавн точки\n");
			    if(!checkpoints) strcat(lstring, ""MAIN_COLOR"• {FFFFFF}Создать чекпоинты\n");
			    else         	 strcat(lstring, "{FF6347}• {FFFFFF}Редактировать чекпоинты\n");
			    strcat(lstring, "{FF6347}• {FFFFFF}Очистить рекорд гонки\n\
							    {FF6347}• {FFFFFF}Полностью удалить гонку\n");
			}
	        format(string, 128, "Гонка #%d: %s", redit_id[playerid], name);
	 		MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, string, lstring, "Выбрать", "Назад", 0);
		}
		case DRACE_EDIT_PARAMS:
		{//
		    mysql_format(g_SQL, string, sizeof(string), "SELECT `creater`, `name`, `record`, `recordby`, `vehicle` FROM `races` WHERE `id` = '%d'", redit_id[playerid]);
			new Cache:result = mysql_query(g_SQL, string);
			if(!cache_num_rows())
			{
			    cache_delete(result);
			    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой гонки не существует.");
			    ShowDialog(playerid, DRACE_LIST);
			    return 1;
			}
			new creater[32], name[32], recordby[32], model;
	        cache_get_value_index(0, 0, creater);
	        cache_get_value_index(0, 1, name);
	        new record;
	        cache_get_value_index_int(0, 2, record);
	        cache_get_value_index(0, 3, recordby);
	        cache_get_value_index_int(0, 4, model);
			cache_delete(result);
			//
			mysql_format(g_SQL, string, sizeof(string), "SELECT COUNT(*) AS count FROM `race_cp` WHERE `raceid` = '%d'", redit_id[playerid]);
			result = mysql_query(g_SQL, string);
			new cp_count;
			cache_get_value_index_int(0, 0, cp_count);
			cache_delete(result);
			//
			mysql_format(g_SQL, string, sizeof(string), "SELECT COUNT(*) AS count FROM `race_object` WHERE `raceid` = '%d'", redit_id[playerid]);
			result = mysql_query(g_SQL, string);
			new object_count;
			cache_get_value_index_int(0, 0, object_count);
			cache_delete(result);
			//
			mysql_format(g_SQL, string, sizeof(string), "SELECT COUNT(*) AS count FROM `race_spawn` WHERE `raceid` = '%d'", redit_id[playerid]);
			result = mysql_query(g_SQL, string);
			new spawn_count;
			cache_get_value_index_int(0, 0, spawn_count);
			cache_delete(result);
			//
		    format(lstring, sizeof(lstring), "Автор гонки: %s\n", creater);
		    format(lstring, sizeof(lstring), "%sНазвание: %s\n", lstring, name);
		    format(lstring, sizeof(lstring), "%sТип: Спринт\n", lstring);
		    format(lstring, sizeof(lstring), "%sАвтомобиль: %s[%d]\n", lstring, VehParams[model - 400][VEH_NAME], model);
		    format(lstring, sizeof(lstring), "%sСпавн точек: %d\n", lstring, spawn_count);
		    format(lstring, sizeof(lstring), "%sЧекпоинтов: %d\n", lstring, cp_count);
		    format(lstring, sizeof(lstring), "%sОбъектов: %d\n", lstring, object_count);
		    format(lstring, sizeof(lstring), "%sРекорд: %s (%s)\n", lstring, UnixToRaceTime(record), recordby);
		    //
		    format(string, 128, "Гонка #%d: Редактирование", redit_id[playerid]);
	 		MyShowPlayerDialog(playerid, action, DIALOG_STYLE_LIST, string, lstring, "Изменить", "Назад", 0);
		}
		case DRACE_DELCP:
		{
		    format(lstring, sizeof(lstring),
				"Вы пытаетесь удалить все чекпоинты начиная с #%d\n\
		    	 Для подтверждения введите 'delcp' или 'чекпоинт'\n\
		    	 Для возврата в меню нажмите кнопку 'Назад'", redit_num[playerid]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Предупреждение", lstring, "Ввести", "Назад", 0);
		}
		case DRACE_DELETE:
		{
		    format(lstring, sizeof(lstring),
				"{B1C8FB}Вы пытаетесь удалить гонку #%d\n\
		    	 Все данные будут {FF6347}безвозвратно удалены{B1C8FB}\n\
		    	 Для подтверждения введите 'delete' или 'удалить'\n\
		    	 Для возврата в меню нажмите кнопку 'Назад'", redit_id[playerid]);
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Предупреждение", lstring, "Ввести", "Назад", 0);
		}
		//	casino
			//	poker
		case DPOKER_GAMESCALL:
		{
			if(GetPVarInt(playerid, "pkrChips") > 0)
			{
				SetPVarInt(playerid, "pkrActionChoice", 1);

				new tableid = GetPVarInt(playerid, "pkrTableID") - 1;
				new actualBet = PokerTable[tableid][pkrActiveBet] - GetPVarInt(playerid, "pkrCurrentBet");

				if(actualBet > GetPVarInt(playerid, "pkrChips"))
				{
					format(string, sizeof(string), "{FFFFFF}Вы уверены что хотите поддержать ставку $%d (All-In)?", actualBet);
					return MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Покер - Сравнять ставку", string, "All-In", "Отмена");
				}
				else
				{
					format(string, sizeof(string), "{FFFFFF}Вы уверены что хотите поддержать ставку $%d?", actualBet);
					return MyShowPlayerDialog(playerid, action, DIALOG_STYLE_MSGBOX, "Покер - Сравнять ставку", string, "Сравнять", "Отмена");
				}
			}
			else
			{
				new noFundsSoundID[] = { 5823, 5824, 5825 };
				new randomNoFundsSoundID = random(sizeof(noFundsSoundID));
				PlayerPlaySound(playerid, noFundsSoundID[randomNoFundsSoundID], 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_WHITE, "- Крупье: Вам не хватает средств для поддержания ставки");
			}
		}
		case DPOKER_GAMESRAISE:
		{
			new tableid = GetPVarInt(playerid, "pkrTableID") - 1;
			SetPVarInt(playerid, "pkrActionChoice", 1);

			if(GetPVarInt(playerid, "pkrCurrentBet") + GetPVarInt(playerid, "pkrChips") > PokerTable[tableid][pkrActiveBet] + PokerTable[tableid][pkrBlind] / 2)
			{
				SetPVarInt(playerid, "pkrActionChoice", 1);
				format(string, sizeof(string), "{FFFFFF}До скольки вы хотите поднять ставку? ($%d-$%d):", PokerTable[tableid][pkrActiveBet] + PokerTable[tableid][pkrBlind] / 2, GetPVarInt(playerid, "pkrCurrentBet") + GetPVarInt(playerid, "pkrChips"));
				return MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покер - Поднять ставку", string, "Поднять", "Отмена");
			}
			else if(GetPVarInt(playerid, "pkrCurrentBet") + GetPVarInt(playerid, "pkrChips") == PokerTable[tableid][pkrActiveBet] + PokerTable[tableid][pkrBlind] / 2)
			{
				SetPVarInt(playerid, "pkrActionChoice", 1);
				format(string, sizeof(string), "{FFFFFF}До скольки вы хотите поднять ставку? (All-In):", PokerTable[tableid][pkrActiveBet] + PokerTable[tableid][pkrBlind] / 2, GetPVarInt(playerid, "pkrCurrentBet") + GetPVarInt(playerid, "pkrChips"));
				return MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покер - Поднять ставку", string, "All-In", "Отмена");
			}
			else
			{
				new noFundsSoundID[] = { 5823, 5824, 5825 };
				new randomNoFundsSoundID = random(sizeof(noFundsSoundID));
				PlayerPlaySound(playerid, noFundsSoundID[randomNoFundsSoundID], 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_WHITE, "- Крупье: Вам не хватает средств для поднятия ставки");
			}
		}
		case DPOKER_GAMESBUY:
		{
			format(lstring, sizeof(lstring), "{FFFFFF}Введите ваш стартовый банк:\n\nМинимум/Максимум: {00FF00}$%d{FFFFFF}/{00FF00}$%d{FFFFFF}", PokerTable[GetPVarInt(playerid, "pkrTableID") - 1][pkrBuyInMin], PokerTable[GetPVarInt(playerid, "pkrTableID") - 1][pkrBuyInMax]);
			return MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покер - Стартовый банк", lstring, "Ввести", "Выйти");
		}
		case DPOKER_GAMESETUP:
		{
			new tableid = GetPVarInt(playerid, "pkrTableID") - 1;
			if(tableid >= 0)
			{
				if(PokerTable[tableid][pkrPass][0] == EOS)
				{
					format(lstring, sizeof(lstring),
						""MAIN_COLOR"• {FFFFFF}Максимальный стартовый банк\t("MAIN_COLOR"$%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Минимальный стартовый банк\t("MAIN_COLOR"$%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Обязательная ставка\t\t("MAIN_COLOR"$%d{FFFFFF}/"MAIN_COLOR"$%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Лимит участников\t\t("MAIN_COLOR"%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Пароль\t("MAIN_COLOR"%s{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Задержка раундов\t("MAIN_COLOR"%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Начать игру",
						PokerTable[tableid][pkrBuyInMax],
						PokerTable[tableid][pkrBuyInMin],
						PokerTable[tableid][pkrBlind],
						PokerTable[tableid][pkrBlind] / 2,
						PokerTable[tableid][pkrLimit],
						"Нет",
						PokerTable[tableid][pkrSetDelay]
					);
				}
				else
				{
					format(lstring, sizeof(lstring),
						""MAIN_COLOR"• {FFFFFF}Максимальный стартовый банк\t("MAIN_COLOR"$%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Минимальный стартовый банк\t("MAIN_COLOR"$%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Обязательная ставка\t("MAIN_COLOR"$%d{FFFFFF}/"MAIN_COLOR"$%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Лимит участников\t("MAIN_COLOR"%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Пароль\t("MAIN_COLOR"%s{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Задержка раундов\t("MAIN_COLOR"%d{FFFFFF})\n\
						"MAIN_COLOR"• {FFFFFF}Начать игру",
						PokerTable[tableid][pkrBuyInMax],
						PokerTable[tableid][pkrBuyInMin],
						PokerTable[tableid][pkrBlind],
						PokerTable[tableid][pkrBlind] / 2,
						PokerTable[tableid][pkrLimit],
						PokerTable[tableid][pkrPass],
						PokerTable[tableid][pkrSetDelay]
					);
				}
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Покер - Настройка стола", lstring, "Выбрать", "Выход");
			}
		}
		case DPOKER_GAMESETUP2:
		{
			if(GetPVarType(playerid, "pkrTableID"))
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покер - Максимальный стартовый банк", "{FFFFFF}Введите максимальный стартовый банк:", "Изменить", "Назад");
		}
		case DPOKER_GAMESETUP3:
		{
			if(GetPVarType(playerid, "pkrTableID"))
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покер - Минимальный стартовый банк", "{FFFFFF}Введите минимальный стартовый банк:", "Изменить", "Назад");
		}
		case DPOKER_GAMESETUP4:
		{
			if(GetPVarType(playerid, "pkrTableID"))
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покер - Слепая ставка", "{FFFFFF}Введите 'слепую ставку':\n\nПодсказка: Минимальная ставка будет рассчитана по введенной максимальной", "Изменить", "Назад");
		}
		case DPOKER_GAMESETUP5:
		{
			if(GetPVarType(playerid, "pkrTableID"))
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покер - Лимит игроков", "{FFFFFF}Введите лимит игроков для игры (2-6):", "Изменить", "Назад");
		}
		case DPOKER_GAMESETUP6:
		{
			if(GetPVarType(playerid, "pkrTableID"))
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покер - Установка пароля", "{FFFFFF}Введите пароль для стола:\n\n< Стоимость услуги 100 coins! >", "Изменить", "Назад");
		}
		case DPOKER_GAMESETUP7:
		{
			if(GetPVarType(playerid, "pkrTableID"))
				MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покер - Задержка между раундами", "{FFFFFF}Введите задержку между раундами (15 - 120сек):", "Изменить", "Назад");
		}
		//	chips
		case DCHIPS_MENU:
		{
			format(string, sizeof(string), "{FFFFFF}Купить фишки\t("MAIN_COLOR"%d{FFFFFF})\nПродать фишки\t("MAIN_COLOR"%d{FFFFFF})", MyGetPlayerMoney(playerid), GetChipAmount(playerid));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_TABLIST, "Автомат с фишками", string, "Выбрать", "Закрыть");
		}
		case DCHIPS_BUY:
		{
			format(string, sizeof(string), "{FFFFFF}Введите кол-ва фишек для покупки:\n\nСтоимость: "MAIN_COLOR"$1/шт.{FFFFFF}\nУ вас: "MAIN_COLOR"%d фишек\n\n", GetChipAmount(playerid));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Покупка фишек", string, "Купить", "Назад");
		}
		case DCHIPS_SELL:
		{
			format(string, sizeof(string), "{FFFFFF}Введите кол-ва фишек для продажи:\n\nСтоимость: "MAIN_COLOR"$1/шт{FFFFFF}\nУ вас: "MAIN_COLOR"%d фишек{FFFFFF}\n\n", GetChipAmount(playerid));
			MyShowPlayerDialog(playerid, action, DIALOG_STYLE_INPUT, "Продажа фишек", string, "Продать", "Назад");
		}
		//-- case
	}
	// Dialogid[playerid] = action;
	// end of stock ShowDialog
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new string[256];
	if(Anticheat.GetToggle() && dialogid != -1 && Dialogid[playerid] != dialogid)
	{
		format(string, sizeof(string), "[AdmWrn]: %s[%d] попытка подмены диалога", ReturnPlayerName(playerid), playerid);
		SendAdminMessage(COLOR_LIGHTRED, string);
	    MyHidePlayerDialog(playerid);
	    return true;
	}
	Dialogid[playerid] = INVALID_DIALOGID;
	switch(dialogid)
	{
	    case DMODE_NONE:
	    {
			return true;
		}
		case DMODE_EMAIL:
		{
			if(response)
			{
			    if(!strlen(inputtext))
			    	return ShowDialog(playerid, dialogid);

			    if(!IsValidEmail(inputtext))
			    {
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введенный email адрес некорректен.");
			        return ShowDialog(playerid, dialogid);
			    }
			    new query[256];
			    mysql_format(g_SQL, query, sizeof query, "SELECT COUNT(*) FROM `players` WHERE `email` = '%e'", inputtext);
			    new Cache:result = mysql_query(g_SQL, query);
			    new count;
			    cache_get_value_index_int(0, 0, count);
			    if(count)
			    {
					cache_delete(result);
			    	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введенный email уже используется другим игроком.");
			        return ShowDialog(playerid, dialogid);
			    }
			   	cache_delete(result);
			    SendConfirmMail(playerid, inputtext);
			    SendFormatMessage(playerid, COLOR_WHITE, string, "[Настройки]: На почту %s отправлено письмо для ее подтверждения", inputtext);
			}
			else ShowDialog(playerid, DMENU_PROTECTION);
		}
		case DMODE_NEWBIE:
		{
			if(response)
			{
				new lstring[1024];
				if(listitem == 0)	//	Что мне делать?
				{
					strcat(lstring,
					"{FFFFFF}Ты только на старте своего игрового пути\n\
					Для начала выполни некоторые задания, которые помогут тебе освоиться.\n\
					Просто следи за подсказками и диалоговыми окнами - они подскажут тебе что делать!\n\
					Вы можете в любой момент посмотреть что вам осталось:\n\
					\t- Откройте меню "MAIN_COLOR"(клавиша H или команда /mm){FFFFFF}\n\
					\t- Выберите первый пункт "MAIN_COLOR"'Мои задачи'{FFFFFF}\n\
					У вас откроется описание задачи и требования для ее выполнения.\n\
					"MAIN_COLOR"За выполнение вы получаете опыт!");
				}
				else if(listitem == 1)	//	Как заработать денег?
				{
					strcat(lstring, "{FFFFFF}На сервере есть множество работ.\n\
					Все они поделены на 3 типа: "MAIN_COLOR"подработка{FFFFFF}, "MAIN_COLOR"легальные{FFFFFF} и "MAIN_COLOR"нелегальные {FFFFFF}работы\n\
					\n\
					"MAIN_COLOR"• {FFFFFF}Подработка доступна всем, не требует устройства и каких-то особых навыков.\n\
					(Для просмотра подработок используйте "MAIN_COLOR"/gps > Подработка{FFFFFF})\n\
					\n");
					strcat(lstring,
					""MAIN_COLOR"• {FFFFFF}Легальная работа доступна в мэрии начиная со 2 уровня и требует лицензии на авто.\n\
					(Для просмотра легальной работы используйте "MAIN_COLOR"/gps > Легальная работа{FFFFFF})\n\
					\n\
					"MAIN_COLOR"• {FFFFFF}Нелегальная работа требует разрешения от мафии, поэтому получить ее достаточно трудно.\n\
					(Для просмотра нелегальной работы используйте "MAIN_COLOR"/gps > Нелегальная работа{FFFFFF})\n");
				}
				else if(listitem == 2)	//	Как получить лидерку?
				{
					lstring = "{FFFFFF}Все фракции сервера нуждаются в лидерах\n\
					Поэтому периодически проводятся наборы\n\
					Чтобы стать лидером требуется:\n\n\
					\t"MAIN_COLOR"• {FFFFFF}Возраст 14+\n\
					\t"MAIN_COLOR"• {FFFFFF}Игровой уровень 4+\n\
					\t"MAIN_COLOR"• {FFFFFF}Опыт во фракции (на нашем сервере)\n\n\
					Подробнее о лидерстве можно узнать "MAIN_COLOR"на форуме в 'Информационном разделе'";
				}
				else if(listitem == 3)	//	Какие фракции есть на сервере?
				{
					lstring = "{FFFFFF}На сервере присутствует: "MAIN_COLOR"банды{FFFFFF}, "MAIN_COLOR"мафии{FFFFFF} и "MAIN_COLOR"государственные организации{FFFFFF}\n\
					Лидеры фракций периодически проводят наборы\n\
					Чтобы найти лидера фракции используйте "MAIN_COLOR"/leaders";
				}
				else if(listitem == 4)	//	Как получить админку?
				{
					lstring = "{FFFFFF}Каждый администратор нашего сервера проходит путь игрока (уровень 5+)\n\
					После чего имеет возможность попасть на набор в хелперы и только потом в модераторы\n\n\
					Независимо от ваших знаний, опыта на других серверах, личных качеств и вероубеждений\n\
					Другого пути в админ-команду на нашем проекте нет.";
				}
				else if(listitem == 5)	//	Что за зеленая полоска
				{
					lstring = "{FFFFFF}Данная полоска отображает сытость вашего персонажа.\n\
					Когда она заполнена - вы сыты, если же она упала до нуля - вы голодны.\n\
					Когда вы голодны - вы теряете свое здоровье.\n\
					Пополнить сытость можно в закусочных, ларьках и 24/7.";
				}
				else if(listitem == 6)
				{
					return ShowDialog(playerid, DMENU_CONTACT);
				}
				MyShowPlayerDialog(playerid, DMODE_NEWBIE2, DIALOG_STYLE_MSGBOX, "Информация", lstring, "Назад", "", 0);
			}
			else gPickupTime[playerid] = 3;
		}
		case DMODE_NEWBIE2:
		{
			ShowDialog(playerid, DMODE_NEWBIE);
		}
		case DMODE_ANIMLIST:
		{
		    if(response)
		    {
		        if(listitem >= sizeof(AnimList)) return 1;
		        //
    			LoopingAnim(playerid,
					AnimList[listitem][ANIM_LIB],
					AnimList[listitem][ANIM_NAME],
					AnimList[listitem][ANIM_DELTA],
					AnimList[listitem][ANIM_LOOP],
					AnimList[listitem][ANIM_LOCKX],
					AnimList[listitem][ANIM_LOCKY],
					AnimList[listitem][ANIM_FREEZE],
					AnimList[listitem][ANIM_TIME],
					AnimList[listitem][ANIM_SYNC]);
    			ShowDialog(playerid, dialogid);
		    }
		}
		case DMODE_LAWYER:
		{
	        if(!response || PlayerInfo[playerid][pJailTime] >= 0) return 1;
	        new wl = -PlayerInfo[playerid][pJailTime];
	        switch(listitem)
	        {
	            case 0: return 1; // Без адвоката
	            case 1: // С адвокатом
	            {
	                new const price = floatround(wl * FINE_PER_WANTED * 1.5);
	                if(MyGetPlayerMoney(playerid) < price)
	                {
	                    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не хватает денег для оплаты адвоката.");
	                    return ShowDialog(playerid, dialogid);
	                }
	                MyGivePlayerMoney(playerid, -price);
	                PlayerInfo[playerid][pJailTime] += 1;
	                JailTime[playerid] = 1;
	            }
	            case 2:// Оставить залог
	            {
	                new const price = wl*5;
	                if(GetPlayerCoins(playerid) < price)
	                {
	                    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не хватает монет для этой операции.");
	                    return ShowDialog(playerid, dialogid);
	                }
	                GivePlayerCoins(playerid, -price);
	                PlayerInfo[playerid][pJailTime] = 0;
	                JailTime[playerid] = 1;
	            }
	        }
		}
		case DMODE_POLICE_HQ:
		{
		    if(response)
		    {
		    	if(PM_Type[playerid] == 0)
		    	{
		  			if(listitem == -1)	return true;
					if(PoliceMission[listitem][pmNum] == 0)
					{
					    if(listitem != 0)	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Это задание уже не актуально.");
					    return ShowDialog(playerid, dialogid);
					}
				    PoliceMissionAccept(playerid, listitem);
			    }
			    else
			    {
					if(strlen(inputtext) == 0 || (strcmp(inputtext, "cancel", true) && strcmp(inputtext, "отмена", true)))
					{
						return ShowDialog(playerid, dialogid);
					}

					if(PM_Type[playerid] == 10)
					{
					    new bool:founded = false;
				        foreach(Cop, copid)
						{
							if(playerid != copid && PM_Type[copid] == 10 && PM_Place[copid] == PM_Place[playerid])
							{
							    founded = true;
								break;
							}
						}
						if(founded == false)
						{
						    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете отказаться от преследования, пока выполняете его в одиночку.");
						}
						format(string, 128, "[R] %s %s: {FFFFFF}Не могу продолжать преследование %s'a.", GetPlayerRank(playerid), ReturnPlayerName(playerid), ReturnPlayerName(PM_Place[playerid]));
						SendPoliceMessage(COLOR_BLUE, string);
					}
					else
					{
						SendFormatMessage(playerid, COLOR_BLUE, string, "[R] %s %s: {FFFFFF}Отмена по вызову, не могу выполнять задание.", GetPlayerRank(playerid), ReturnPlayerName(playerid));
					}
					PoliceMissionCancel(playerid);
			    }
		    }
		}
	    case DMODE_POLICE_MISSION:
	    {
	        gPickupTime[playerid] = 5;
			switch(PM_Type[playerid])
			{
			    case 1:// Ложный вызов
			    {
					SendFormatMessage(playerid, COLOR_BLUE, string, "[R] %s %s: {FFFFFF}Докладываю: по адресу ложный вызов, 10-8.", GetPlayerRank(playerid), ReturnPlayerName(playerid));
					PoliceMissionComplete(playerid, COST_PER_WANTED);
			    }
			    case 2:// Буйный человек
			    {
			        PM_Step[playerid] = 1;
					MySetPlayerCheckpoint(playerid, CPPOLICE_MISSION, 1540.0, -1675.0, 13.5, 15.0);
					SendFormatMessage(playerid, COLOR_BLUE, string, "[R] %s %s: {FFFFFF}Докладываю: по адресу буйный мужчина, везу его в участок.", GetPlayerRank(playerid), ReturnPlayerName(playerid));
			    }
			    case 3:// Угон машины
			    {
			        // Замена автомобиля
					new v = GetRandomVehicle(playerid, 1000.0);
					if(v == 0)
					{
						PoliceMissionCancel(playerid, "Транспорт не найден");
						return 1;
					}
				    new Float:X, Float:Y, Float:Z, Float:A;
				    MyGetVehiclePos(v, X, Y, Z, A);
				    MyDestroyVehicle(v);
				    new vehicles[] = {429,402,411,541,415,560,559,603,475,506,451};
				    v = MyCreateVehicle(vehicles[random(sizeof(vehicles))], X, Y, Z, A, -1, -1);
				    PM_Place[playerid] = v;

					// Текстдрав автомобиля
					ShowWorkInfo(playerid, "", 0, "", 0, GetVehicleModel(v));
					WorkInfo_SetText(playerid, "In Wanted");
					WorkInfo_SetPreviewVehCol(playerid, CarInfo[v][cColor1], CarInfo[v][cColor2]);
					//PlayerTextDrawSetPreviewModel(playerid, InWantedTD, GetVehicleModel(v));
					//PlayerTextDrawSetPreviewVehCol(playerid, InWantedTD, CarInfo[v][cColor1], CarInfo[v][cColor2]);
					//PlayerTextDrawShow(playerid, InWantedTD);
					//PlayerTextDrawShow(playerid, InWantedInfo);

				    // Создание зоны поиска
				    new const ZoneSize = 500;
				    new Float:DoubleX = random(ZoneSize);
				    new Float:DoubleY = random(ZoneSize);
					PM_SearchZone[playerid] = GangZoneCreate(X-DoubleX,Y-DoubleY,X+(ZoneSize-DoubleX),Y+(ZoneSize-DoubleY));
		    	    PM_SearchZone2[playerid] = CreateDynamicRectangle(X-DoubleX,Y-DoubleY,X+(ZoneSize-DoubleX),Y+(ZoneSize-DoubleY), -1, -1, playerid);
					MySetPlayerCheckpoint(playerid, CPPOLICE_MISSION, X - DoubleX + ZoneSize / 2, Y - DoubleY + ZoneSize / 2, 10.0, 0.0);
		    	    GangZoneShowForPlayer(playerid, PM_SearchZone[playerid], 0x000000DD);

			        PM_Step[playerid] = 1;
					SendFormatMessage(playerid, COLOR_BLUE, string, "[R] %s %s: {FFFFFF}Докладываю: угон автомобиля %s, начинаю патрулирование.", GetPlayerRank(playerid), ReturnPlayerName(playerid), ReturnVehicleName(PM_Place[playerid]));
			    }
			    case 4:// Пропал человек
			    {
			    }
			}
	    }
	    case DMODE_POLICE_DUTY:
	    {
	    	if(response)
	    	{
	    		if(listitem == 0)
	    		{
	    			if(GetPlayerWantedLevel(playerid) == 0)
					{
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "За вами не числится ни одного текущего штрафа.");
					}
					else ShowDialog(playerid, DMODE_POLICE_WANTED);
	    		}
	    		else if(listitem == 1)
	    		{
	    			//	Полчение лицензии
	    			if(PlayerInfo[playerid][pGunLic])
	    			{
	    				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас уже есть лицензия.");
	                    return ShowDialog(playerid, dialogid);
	    			}
	    			if(PlayerInfo[playerid][pLaw] < 0)
	    			{
	    				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас должна быть положительная законопослушность.");
	                    return ShowDialog(playerid, dialogid);
	    			}
	    			if(PlayerInfo[playerid][pShooting] < 4)
	    			{
	    				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны сдать экзамен в тире.");
	                    return ShowDialog(playerid, dialogid);
	    			}
	    			if(MyGetPlayerMoney(playerid) < 350)
	    			{
	    				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно наличных.");
	                    return ShowDialog(playerid, dialogid);
	    			}
	    			MyGivePlayerMoney(playerid, -350);
					PlayerInfo[playerid][pGunLic] = 1;
					SendClientMessage(playerid, COLOR_GREEN, "Поздравляю, вы получаете лицензию на оружие! Теперь вы можете закупаться в аммунации!");
					ShowPlayerHint(playerid, "Вы получили:___________________~n~~g~- Лицензию на оружие");
					SuccesAnim(playerid);
					PlayerPlaySound(playerid, 36205, 0.0, 0.0, 0.0);
	    		}
	    	}
	    }
	    case DMODE_POLICE_WANTED:
	    {
	        if(response)
	        {
				new price = (GetPlayerWantedLevel(playerid) * FINE_PER_WANTED);
				if(MyGetPlayerMoney(playerid) < price)
				{
				    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег для оплаты штрафов.");
					return ShowDialog(playerid, dialogid);
				}
				MySetPlayerWantedLevel(playerid, 0);
				MyGivePlayerMoney(playerid, -price);
	        }
	        else
	        {
	        	ShowDialog(playerid, DMODE_POLICE_DUTY);
	        }
	    }
	    case DMODE_POLICE_STOPMENU:
	    {
	    	new targetid = PM_Place[playerid];
	    	new vehicleid = gLastVehicle[targetid];
	    	if(PursuitStatus[targetid] == PS_WAIT)
	    	{
				switch(listitem)
				{
					case 0:
					{	//	Требование выйти
		    			if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
		    			{
			    			PursuitStatus[targetid] = PS_WAIT_OUT_VEH;
		    				PursuitCount[targetid] = 15 + 1;
		    				format(string, sizeof(string), "- %s %s говорит: Выйдите из машины с поднятыми руками! (( %s ))", GetPlayerRank(playerid), ReturnPlayerName(playerid), ReturnPlayerName(targetid));
							ProxDetector(playerid, 30.0, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, 0xE6E6E6E6, 0xC8C8C8C8);
							PlayerPlaySound(playerid, 34403, 0, 0, 0);
							PlayerPlaySound(targetid, 34403, 0, 0, 0);
							ShowPlayerHint(targetid, "_~b~Полицейский~w~ просит вас выйти из транспорта");
						}
						else
						{
				    		PursuitStatus[targetid] = PS_OUT_COMPLETE;
				    		PursuitCount[targetid] = 30;
				    		PursuitHandsup(targetid);
					        SendClientMessage(targetid, COLOR_BLUE, "> Оставайтесь на месте пока полицейский вас не проверит.");
						}
						return true;
					}
					case 1:	
					{	//	Проверить документы
						if(GetPVarInt(targetid, "Pursuit:CheckDoc") == 0)
						{
							new check;
							SendFormatMessage(targetid, COLOR_BLUE, string, "%s %s проверил ваши документы.", GetPlayerRank(playerid), ReturnPlayerName(playerid));
		   	                if(IsAvailableVehicle(vehicleid, targetid) < VEH_AVAILABLE_CONTROL)
		   	                {
		   	                	CrimePlayer(targetid, CRIME_THEFT_AUTO);
		   	                	check++;
		   	                }
		   	                //if(PlayerInfo[targetid][pCarLic] == 0 && VehInfo[vehicleid][vModelType] != MTYPE_NODOOR
							//&& VehInfo[vehicleid][vModelType] != MTYPE_BIKE && VehInfo[vehicleid][vModelType] != MTYPE_RC)
							if(IsPlayerHaveLicThisVehicle(playerid, GetVehicleModel(vehicleid)))
							{
		   	                	CrimePlayer(targetid, CRIME_NOT_LIC);
		   	                	check++;
							}
							if(check == 0)
							{
								SendFormatMessage(playerid, COLOR_BLUE, string, "Вы успешно проверили документы %s.", ReturnPlayerName(targetid));
							}
							SetPVarInt(targetid, "Pursuit:CheckDoc", 1); 
						}
					}
					case 2:
					{	//	Проверить опьянение
						if(GetPVarInt(targetid, "Pursuit:CheckDrunk") == 0)
						{
							if(GetPlayerDrunkLevel(playerid) > 2000)
							{
								CrimePlayer(targetid, CRIME_DRUNK);
							}
		   	            	else
		   	            	{
		   	            		SendFormatMessage(targetid, COLOR_BLUE, string, "%s %s проверил вас на опьянение", GetPlayerRank(playerid), ReturnPlayerName(playerid));
		   	            		SendFormatMessage(playerid, COLOR_BLUE, string, "Результат проверки: %s оказался трезвым", ReturnPlayerName(targetid));
		   	            	}
		   	            	SetPVarInt(targetid, "Pursuit:CheckDrunk", 1);
						}
					}
					case 3:
					{	//	Проверка фар
						if(GetPVarInt(targetid, "Pursuit:CheckLight") == 0)
						{
							new hour; gettime(hour, _, _);
		   	            	if(IsVehicleWithEngine(vehicleid) && (hour <= 5 || hour >= 20))
		   	            	{
		   	            		if(PursuitLamp[targetid] == false)
		   	            		{
		   	            			CrimePlayer(targetid, CRIME_NOT_LIGHT);
			   	            	}
			   	            	else
			   	            	{
			   	            		SendFormatMessage(targetid, COLOR_BLUE, string, "%s %s проверил состояние ваших фар", GetPlayerRank(playerid), ReturnPlayerName(playerid));
			   	            		SendFormatMessage(playerid, COLOR_BLUE, string, "Результат проверки: %s ехал с включенными фарами", ReturnPlayerName(targetid));
			   	            	}
			   	            }
							SetPVarInt(targetid, "Pursuit:CheckLight", 1);
						}
					}
					case 4:
					{
						new wl = GetPlayerWantedLevel(targetid);
						if(0 < wl < 4)
						{	//	выписать штраф
			    			if(AskPlayer(playerid, targetid, ASK_POLICE_FINE))
			    			{
								new finecash = wl * FINE_PER_WANTED;
								AskAmount[targetid] = finecash;
								//PursuitCount[targetid] = 40;	//	ожидаем оплату штрафа
								SendFormatMessage(playerid, COLOR_DBLUE, string, "Нарушителю %s выписана квитанция со штрафом, ожидайте оплату!", ReturnPlayerName(targetid));
								SendFormatMessage(targetid, COLOR_DBLUE, string, "%s %s выписал вам штраф на %d$. Оплатить? "ASK_CONFIRM_INFO, GetPlayerRank(playerid), ReturnPlayerName(playerid), finecash);
								return true;
							}
							else
							{
								SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, подождите.");
							}
			    		}
			    		else if(wl == 0)
			    		{
			    			CancelPlayerPursuit(targetid, 1);
							SendFormatMessage(playerid, COLOR_DBLUE, string, "У подозреваемого %s не обнаружено правонарушений", ReturnPlayerName(targetid));
							SendFormatMessage(targetid, COLOR_DBLUE, string, "%s %s не нашел никаких правонарушений, вы свободны", GetPlayerRank(playerid), ReturnPlayerName(playerid));
			    			return true;
			    		}
					}
				}
				ShowDialog(playerid, dialogid);
	    	}
	    }
	    case DMODE_SHOP:
	    {
	        if(!response) 	return true;
	        new b = GetBizWhichPlayer(playerid);
	        if(b != INVALID_DATA && BizInfo[b][bType] == BUS_SHOP)
	        {
		        new price;
	            switch(listitem)
				{
	                case 0:
					{	// Наручные часы
						price = GetThingCost(THING_WATCH);
						if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						if(Inv.AddPlayerThing(playerid, THING_WATCH, 1) == 0)
						{
							return ShowDialog(playerid, dialogid);
						}
	                }
					case 1:
					{	// Балончик с краской
						price = 80;
					    if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
					    new weapon, ammo;
					    GetPlayerWeaponData(playerid, 9, weapon, ammo);
					    if(weapon == 41 && ammo > 10000)
					    {
					    	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас слишком много краски.");
							return ShowDialog(playerid, dialogid);
					    }
	                    //MyGivePlayerWeapon(playerid, 41, 150);
	                    Inv.GivePlayerWeapon(playerid, 41, 150);
	                }
					case 2:
					{	// 	Мобильный телефон
					#if defined _player_phone_included
						if(PlayerInfo[playerid][pPhoneNumber] > 0)
						{
	                        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас уже есть мобильный телефон.");
	                        return ShowDialog(playerid, dialogid);
						}
						price = 150;
						if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						PlayerInfo[playerid][pPhoneNumber] = CreatePhoneNumber();
						if(PlayerInfo[playerid][pPhoneNumber] == 0)
						{
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Не нашли номера для вас, попробуйте еще раз.");
							return ShowDialog(playerid, dialogid);
						}
						SendFormatMessage(playerid, COLOR_WHITE, string, "Ваш номер телефона: %d", PlayerInfo[playerid][pPhoneNumber]);
						PlayerInfo[playerid][pPhoneEnable] = true;
						PlayerInfo[playerid][pPhoneBalance] = 50;
						UpdatePlayerData(playerid, "p_number", PlayerInfo[playerid][pPhoneNumber]);
					#else
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Товар недоступен в данный момент.");
	                    return ShowDialog(playerid, dialogid);		
					#endif	
					}
					case 3:
					{	// Фейерверк: Ракета
						price = GetThingCost(THING_FIREWORK);
					    if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						if(Inv.AddPlayerThing(playerid, THING_FIREWORK, 1) == 0)
						{
							return ShowDialog(playerid, dialogid);
						}
					}
					case 4:
					{   // Пачка сигарет
						price = GetThingCost(THING_CIGARETTE);
					    if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						if(Inv.AddPlayerThing(playerid, THING_CIGARETTE, 10) == 0)
						{
							return ShowDialog(playerid, dialogid);
						}
					}
					case 5:
					{	//	шоколадный баточник
						price = GetThingCost(THING_CHOCOLATE);
						if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						if(Inv.AddPlayerThing(playerid, THING_CHOCOLATE, 1) == 0)
						{
							return ShowDialog(playerid, dialogid);
						}
					}
					case 6:
					{	//	Коробка
						price = GetThingCost(THING_BOX);
						if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						if(Inv.AddPlayerThing(playerid, THING_BOX, 1) == 0)
						{
							return ShowDialog(playerid, dialogid);
						}
					}
					case 7:
					{	//	Кейс
						price = GetThingCost(THING_SUITCASE);
						if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						if(Inv.AddPlayerThing(playerid, THING_SUITCASE, 1) == 0)
						{
							return ShowDialog(playerid, dialogid);
						}
					}
					case 8:
					{	//	Чемодан
						price = GetThingCost(THING_SUITCASE2);
						if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						if(Inv.AddPlayerThing(playerid, THING_SUITCASE2, 1) == 0)
						{
							return ShowDialog(playerid, dialogid);
						}
					}
					case 9:
					{	//	Сумка
						price = GetThingCost(THING_BAG);
						if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						if(Inv.AddPlayerThing(playerid, THING_BAG, 1) == 0)
						{
							return ShowDialog(playerid, dialogid);
						}
					}
					case 10:
					{	//	Рюгзак
						price = GetThingCost(THING_BAG2);
						if(MyGetPlayerMoney(playerid) < price)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
							return ShowDialog(playerid, dialogid);
					    }
						if(Inv.AddPlayerThing(playerid, THING_BAG2, 1) == 0)
						{
							return ShowDialog(playerid, dialogid);
						}
					}
	            }
	            BizSaleProds(b, price, 1);
	            MyGivePlayerMoney(playerid, -price);
	            MyApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);
	            SetPlayerFacingAngle(playerid, 180.0);
	            return ShowDialog(playerid, dialogid);
	        }
	    }
		case DMODE_SEXSHOP:
		{
			if(response)
			{
			    MyGivePlayerMoney(playerid, -35);
			    SendClientMessage(playerid, COLOR_WHITE, "Вы купили фаллоиметатор за $35");
			    switch(listitem)
			    {
			        case 0: Inv.GivePlayerWeapon(playerid, 10, 1); //MyGivePlayerWeapon(playerid, 10, 1);
			        case 1: Inv.GivePlayerWeapon(playerid, 11, 1); //MyGivePlayerWeapon(playerid, 11, 1);
			        case 2: Inv.GivePlayerWeapon(playerid, 12, 1); //MyGivePlayerWeapon(playerid, 12, 1);
			        case 3: Inv.GivePlayerWeapon(playerid, 13, 1); //MyGivePlayerWeapon(playerid, 13, 1);
			    }
			}
		}
		case DMODE_HOUSE:
		{
		    gPickupTime[playerid] = 3;
		    if(response)
		    {
		    	if(GetPlayerHouse(playerid) > 0){
		    		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете иметь больше одного дома");
		    		return ShowDialog(playerid, dialogid);
		    	}
		        new h = PickupedHouse[playerid];
				PickupedHouse[playerid] = -1;
		        if(h >= 0 && HouseInfo[h][hOwnerID] == 0 && BuyPlayerHouse(playerid, h))
		        {
		            if(HouseInfo[h][hDonate] == 0)
			            format(string, 128, "Вы успешно купили дом #%d за %d$", HouseInfo[h][hID], HouseInfo[h][hPrice]);
			        else
			            format(string, 128, "Вы успешно купили дом #%d за %d монет", HouseInfo[h][hID], HouseInfo[h][hPrice]);
		            SendClientMessage(playerid, COLOR_WHITE, string);
		            UpdatePlayerStatics(playerid);
		            gPickupTime[playerid] = 0;
		        }
		    }
			else PickupedHouse[playerid] = -1;
		}
		case DMODE_HOUSE_SELL:
		{
		    if(response)
		    {
				if(!strlen(inputtext) || (strcmp(inputtext, "sell", true) && strcmp(inputtext, "продать", true)))
					return ShowDialog(playerid, dialogid);
				new h = PickupedHouse[playerid];
			    if(h != -1 && HouseInfo[h][hOwnerID] == PlayerInfo[playerid][pUserID])
			    {
			        SellHouse(h);
					UpdatePlayerStatics(playerid);
			    }
			}
			//else PickupedHouse[playerid] = -1;
		}
		case DMODE_RADIO:
		{
		    if(response && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
				new vehicleid = GetPlayerVehicleID(playerid);
				VehInfo[vehicleid][vRadio] = listitem;
				UpdateVehRadio(vehicleid);
				PlayerAction(playerid, "переключает радиостанцию.");
	        }
		}
		case DMODE_RADIO_PLEER:
		{
	        if(response)
	        {
				SetPVarInt(playerid, "Thing:RadioID", listitem);
				UpdatePlayerRadio(playerid);
				PlayerAction(playerid, "переключает радиостанцию в плеере.");
	        }
		}
		case DMODE_VMENU:
	    {
	    	if(response)
		    {
		    	new item = 0, targetid = INVALID_PLAYER_ID;
		    	new vehicleid = GetPVarInt(playerid, "VehicleMenu:VehicleID");
		    	if(PlayerInfo[playerid][pFaction] == F_POLICE && IsPoliceDuty(playerid) && PM_Type[playerid] == 0)
				{
					if(VehInfo[vehicleid][vDriver] >= 0 && PursuitStatus[ VehInfo[vehicleid][vDriver] ] == PS_NONE && listitem == item++)
					{
						targetid = VehInfo[vehicleid][vDriver];
					}
					else if(VehInfo[vehicleid][vCoDriver] >= 0 && PursuitStatus[ VehInfo[vehicleid][vCoDriver] ] == PS_NONE && listitem == item++)
					{
						targetid = VehInfo[vehicleid][vCoDriver];
					}
					else if(VehInfo[vehicleid][vLeftSeat] >= 0 && PursuitStatus[ VehInfo[vehicleid][vLeftSeat] ] == PS_NONE && listitem == item++)
					{
						targetid = VehInfo[vehicleid][vLeftSeat];
					}
					else if(VehInfo[vehicleid][vRightSeat] >= 0 && PursuitStatus[ VehInfo[vehicleid][vRightSeat] ] == PS_NONE && listitem == item++)
					{
						targetid = VehInfo[vehicleid][vRightSeat];
					}
					if(targetid != INVALID_PLAYER_ID)
					{
						if(IsForce(PlayerInfo[targetid][pFaction]))
						{
						    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Подозреваемый работает в полиции, вы не можете остановить его.");
						}
						else if(IsPlayerAFK(targetid))
						{
							return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Подозреваемый находится в AFK, его нельзя остановить.");
						}
						else if(GetPlayerWantedLevel(targetid) == 0 && PursuitLastUNIX[targetid] > gettime())
						{
						    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Совсем недавно этого игрока уже проверяли.");
						}
						PursuitStatus[targetid] = PS_WAIT_OUT_VEH;
						PursuitCount[targetid] = 15 + 1;
						pursuit_timer[targetid] = SetTimerEx("PursuitTimer", 1000, true, "i", targetid);
						PM_Type[playerid] = 10, PM_Place[playerid] = targetid;
						format(string, sizeof(string), "- %s %s говорит: Выйдите из машины с поднятыми руками! (( %s ))", GetPlayerRank(playerid), ReturnPlayerName(playerid), ReturnPlayerName(targetid));
						ProxDetector(playerid, 30.0, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, 0xE6E6E6E6, 0xC8C8C8C8);
						PlayerPlaySound(playerid, 34403, 0, 0, 0);
						PlayerPlaySound(targetid, 34403, 0, 0, 0);
						ShowPlayerHint(targetid, "_~b~Полицейский~w~ просит вас выйти из транспорта");
					}
				}
				else if(Job.GetPlayerNowWork(playerid) == JOB_MECHANIC)
				{
					if(VehInfo[vehicleid][vDriver] >= 0 && listitem == item++)
					{
						SetPVarInt(playerid, "Mechanic:Refill:VehicleID", vehicleid);
						ShowDialog(playerid, DMODE_REFILL);
					}
				}
				if(listitem == item++)
				{
					LockPlayerVehicle(playerid, vehicleid);
				}
		    }
	    }
	    case DMODE_REFILL:
	    {
	    	if(response)
	    	{
	    		new vehicleid = gLastVehicle[playerid];
	    		if(CarInfo[vehicleid][cType] != C_TYPE_JOB || CarInfo[vehicleid][cOwnerID] != JOB_MECHANIC)
		    	{
		    		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, ваш последний транспорт должен быть рабочим.");
		    		return ShowDialog(playerid, dialogid);
		    	}
		    	new Float:pos[3];
		    	new v = GetPVarInt(playerid, "Mechanic:Refill:VehicleID");
				GetVehiclePos(v, Arr3<pos>);
				if(GetVehicleDistanceFromPoint(vehicleid, Arr3<pos>) > 10)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, ваш рабочий авто должен быть рядом с заправляемым.");
					return ShowDialog(playerid, dialogid);
		    	}
		    	if(GetPlayerDistanceFromPoint(playerid, Arr3<pos>) > 10)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, вы должны быть рядом с заправляемым автомобилем.");
					return ShowDialog(playerid, dialogid);
		    	}
		    	if(VehInfo[v][vDriver] < 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, в автомобиле должен сидеть водитель.");
					return ShowDialog(playerid, dialogid);
				}

	    		new val = strval(inputtext);
	    		if(val <= 0 || val > VehInfo[vehicleid][vFuel] || (VehInfo[v][vFuel] + val) > GetVehicleMaxFuel(v))
	    		{
	    			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Столько топлива не влезет в бак, либо у вас столько нет.");
		    		return ShowDialog(playerid, dialogid);
	    		}
	    		SetPVarInt(playerid, "Mechanic:Refill:Count", val);
	    		ShowDialog(playerid, DMODE_REFILL2);
	    	}
	    	else
	    	{
	    		DeletePVar(playerid, "Mechanic:Refill:VehicleID");
	    		DeletePVar(playerid, "Mechanic:Refill:Count");
	    	}
	    }
	    case DMODE_REFILL2:
	    {
	    	if(response)
	    	{
	    		new vehicleid = gLastVehicle[playerid];
	    		if(CarInfo[vehicleid][cType] != C_TYPE_JOB || CarInfo[vehicleid][cOwnerID] != JOB_MECHANIC)
		    	{
		    		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, ваш последний транспорт должен быть рабочим.");
		    		return ShowDialog(playerid, dialogid);
		    	}
		    	new Float:pos[3];
		    	new v = GetPVarInt(playerid, "Mechanic:Refill:VehicleID");
				GetVehiclePos(v, Arr3<pos>);
				if(GetVehicleDistanceFromPoint(vehicleid, Arr3<pos>) > 10)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, ваш рабочий авто должен быть рядом с заправляемым.");
					return ShowDialog(playerid, dialogid);
		    	}
		    	if(GetPlayerDistanceFromPoint(playerid, Arr3<pos>) > 10)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, вы должны быть рядом с заправляемым автомобилем.");
					return ShowDialog(playerid, dialogid);
		    	}
		    	new targetid = VehInfo[v][vDriver];
		    	if(targetid < 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для заправки, в автомобиле должен сидеть водитель.");
					return ShowDialog(playerid, dialogid);
				}
				new count = GetPVarInt(playerid, "Mechanic:Refill:Count");
	    		new cost = strval(inputtext);
	    		if(cost < 0 || cost > (PRICE_FUEL * count * 5))
	    		{
	    			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Стоимость введена неверно.");
		    		return ShowDialog(playerid, dialogid);
	    		}
	    		DeletePVar(playerid, "Mechanic:Refill:VehicleID");
	    		DeletePVar(playerid, "Mechanic:Refill:Count");
	    		if(AskPlayer(playerid, targetid, ASK_REFILL))
    			{
					AskAmount[targetid] = count;
					AskAmount2[targetid] = cost;
					SendFormatMessage(playerid, COLOR_WHITE, string, "Вы предложили %s заправить его авто на %d литров за $%d", ReturnPlayerName(targetid), count, cost);
					SendFormatMessage(targetid, COLOR_WHITE, string, "%s предложил вам заправить ваш авто на %d литров за $%d "ASK_CONFIRM_INFO, ReturnPlayerName(playerid), count, cost);
					return true;
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, попробуйте позже.");
				}
	    	}
	    	ShowDialog(playerid, DMODE_REFILL);
	    }
		case DMODE_VFIND:
		{
		    if(response)
		    {
				if(strlen(inputtext) == 0)
					return ShowDialog(playerid, dialogid);
				new results, lstring[256];
				for(new m = 0; m < sizeof VehParams; m++)
				{
				    if(strfind(VehParams[m][VEH_NAME], inputtext, true) != -1)
					{
						format(lstring, sizeof lstring, "%s%d: %s\n", lstring, VehParams[m][VEH_MODEL], VehParams[m][VEH_NAME]);
					    if(++results > 12) break;
					}
				}
				if(results == 0)
				{
				    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "По этому запросу не найдено ни одной модели.");
					return ShowDialog(playerid, dialogid);
				}
				MyShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Поиск авто", lstring, "Найти", "Закрыть");
			}
		}
		case DMODE_GOTOLIST:
		{
		    if(response)
		    {
	            new g = listitem, vehicleid = GetPlayerVehicleID(playerid);
	            CreateGotoSmoke(playerid);
		        if(vehicleid)
				{
					MySetVehiclePos(vehicleid, GotoList[g][G_X], GotoList[g][G_Y], GotoList[g][G_Z], GotoList[g][G_A]);
					LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
				}
				else MySetPlayerPos(playerid, GotoList[g][G_X], GotoList[g][G_Y], GotoList[g][G_Z], GotoList[g][G_A]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
				SetCameraBehindPlayer(playerid);
		    }
		}
		case DMODE_REPAIR:
		{
	        new vehicleid = GetPlayerVehicleID(playerid);
	        TogglePlayerControllable(playerid, true);
		    if(!response || !vehicleid)
		    {
		        DeletePVar(playerid, "repair_body_price");
		        DeletePVar(playerid, "repair_all_price");
				SetTimerEx("RecreateRepairPickup", 3000, false, "i", pRepair[playerid]);
		        return true;
		    }
		    new item[4], Float:health, price, type = 0;
    		GetVehicleHealth(vehicleid, health);
			GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Arr4<item>);
	        switch(listitem)
			{
	            case 0:
				{	//	Кузовные работы
	                if(!item[0] && !item[1] && !item[2] && !item[3])
						price = 0;
					else	price = GetPVarInt(playerid, "repair_body_price");
	    			item[0] = 0;	item[1] = 0;	item[2] = 0;	item[3] = 0;
	            }
	            case 1:
				{	//	Панель
				    if(!item[0])	price = 0;
				    else            price = 25;
    				item[0] = 0;
				}
				case 2:
				{	//	Двери
					if(item[1] & 0x4 || item[1] & 0x2)				price += 10;	//  капот поврежден
				    if(item[1] >> 8 & 0x4 || item[1] >> 8 & 0x2)	price += 10;	//  багажник поврежден
				 	if(item[1] >> 16 & 0x4 || item[1] >> 16 & 0x2)  price += 10;	//  дверь водителя повреждена
					if(item[1] >> 24 & 0x4 || item[1] >> 24 & 0x2)	price += 10;	//  дверь пасажира повреждена
					item[1] = 0;

					UpdateVehicleDamageStatus(vehicleid, Arr4<item>);
				}
				case 3:
				{	//	Фары
				    if(!item[2])	price = 0;
				    else            price = 10;
                    item[2] = 0;
				}
				case 4:
				{	//	Колеса
					if(item[3] & 0x1)   price += 10;
					if(item[3] & 0x2)   price += 10;
					if(item[3] & 0x4)   price += 10;
					if(item[3] & 0x8)   price += 10;
				    item[3] = 0;
				}
	            case 5:
				{	//	Перебор двигателя
	                if(health >= 900.0) price = 0;
					else				price = floatround((1000.0 - health) / 7.5);
               	 	type = 1;
	            }
	            case 6:
				{	//	Перекраска
					if(item[0] || item[1])
					{
                    	SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Я не могу покрасить твою тачку, пока она вся разбита.");
                    	return ShowDialog(playerid, dialogid);
					}
					if(CarInfo[vehicleid][cType] == C_TYPE_FACTION && IsGang(CarInfo[vehicleid][cOwnerID]))
					{	// Машины банд (с определенным основным цветом)
						SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Это же тачка твоей банды, ей цвета не меняют!");
                    	return ShowDialog(playerid, dialogid);
	                	//SetPVarInt(playerid, "painting_step", 2);
	                	//SetPVarInt(playerid, "repair_color_1", CarInfo[vehicleid][cColor1]);
					}
	                SetPVarInt(playerid, "painting_step", 1);
	                SetPVarInt(playerid, "repair_color_1", -1);
                	SetPVarInt(playerid, "repair_color_2", -1);
                	SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Для просмотра цвета щелкните по нему, для покупки нажмите кнопку "SCOLOR_HINT"BUY"SCOLOR_WHITE".");
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Для отмены нажмите "SCOLOR_HINT"ESC"SCOLOR_WHITE" или же кнопку "SCOLOR_HINT"CANCEL"SCOLOR_WHITE".");
				   	return ColorMenuShow(playerid);
				}
				case 7:
				{	//	специальный тюнинг
					return ShowDialog(playerid, DMODE_TUNING);
				}
				case 8:
				{	//	Полный ремонт
					price = GetPVarInt(playerid, "repair_all_price");
					type = 2;
	            }
	        }
	        if(!price)
			{
			    switch(random(3))
		        {
		            case 0: SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Все впорядке, что я делать то должен?");
		            case 1: SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Здесь все впорядке, может лучше перекрасим твою ласточку?");
		            case 2: SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: С этим все в порядке, что тебе не нравится?");
		        }
                return ShowDialog(playerid, dialogid);
			}
	        if(MyGetPlayerMoney(playerid) < price)
	        {
	       		SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: У тебя не хватает денег!");
                return ShowDialog(playerid, dialogid);
			}
		   	MyGivePlayerMoney(playerid, -price);

		   	if(type == 0)
   			{
				//printf("panels - %d  doors - %d  lights - %d  tires - %d", Arr4<item>);
  				UpdateVehicleDamageStatus(vehicleid, Arr4<item>);
			}
			else if(type == 1)	MySetVehicleHealth(vehicleid, 999.0);
		   	else if(type == 2)	MyRepairVehicle(vehicleid);
	        PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	        UpdateVehicleStatics(vehicleid);
	        switch(random(3))
	        {
	            case 0: SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Все готово! Поставим сабвуфер, тонировку?");
	            case 1: SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Сделано, командир! Что-нибудь еще?");
	            case 2: SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Все работает! Может еще чего сделаем?");
	        }
    		ShowDialog(playerid, dialogid);
		}
		case DMODE_TUNING:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					//	Неон
					case 0:	ShowDialog(playerid, dialogid);
					case 1..6:
					{
						if(CarInfo[vehicleid][cNeon] == listitem)
						{
						    RemoveNeons(vehicleid);
						    CarInfo[vehicleid][cNeon] = 0;
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							return ShowDialog(playerid, dialogid);
						}
						if(GetPlayerCoins(playerid) < 30)
						{
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не достаточно монет.");
							return ShowDialog(playerid, dialogid);
						}
						CarInfo[vehicleid][cNeon] = listitem;
						AttachNeons(vehicleid, CarInfo[vehicleid][cNeon] - 1);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						GivePlayerCoins(playerid, -30);
					}
					case 7:// Стробоскопы
					{
						if(CarInfo[vehicleid][cFlash])
						{
						    SetVehicleFlasher(vehicleid, 0);
						    CarInfo[vehicleid][cFlash] = 0;
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							return ShowDialog(playerid, dialogid);
						}
						if(GetPlayerCoins(playerid) < 50)
						{
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не достаточно монет.");
							return ShowDialog(playerid, dialogid);
						}
						CarInfo[vehicleid][cFlash] = 1;
						GivePlayerCoins(playerid, -50);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Для включения стробоскопов используйте "SCOLOR_HINT"/flash"SCOLOR_WHITE".");
					}
					case 8:// Блатные номера
					{
						if(IsAvailableVehicle(vehicleid, playerid) != VEH_AVAILABLE_OWNER)
						{
							SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Номера может менять только владелец");
					        return ShowDialog(playerid, dialogid);
					    }
						ShowDialog(playerid, DMODE_CARPLATE);
					}
				}
				SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Сделано, командир! Что-нибудь еще?");
				ShowDialog(playerid, dialogid);
			}
			else
			{
				ShowDialog(playerid, DMODE_REPAIR);
			}
		}
		case DMODE_CARPLATE:
		{
		    if(!response) return ShowDialog(playerid, DMODE_TUNING);
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if(!vehicleid || GetPlayerState(playerid) != 2) return 1;
		    if(!(0 < strlen(inputtext) < 10) || !IsCorrectName(inputtext)) return ShowDialog(playerid, dialogid);
			if(GetPlayerCoins(playerid) < 50)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не достаточно монет.");
				return ShowDialog(playerid, dialogid);
			}
			GivePlayerCoins(playerid, -50);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			strput(CarInfo[vehicleid][cPlate], RusText(inputtext));
			SetVehicleNumberPlate(vehicleid, CarInfo[vehicleid][cPlate]);
			SendClientMessage(playerid, COLOR_SAYING, "- Автомеханик: Заказ на номера принят. Они появятся через некоторое время");
			ShowDialog(playerid, DMODE_REPAIR);
		}
		case DMODE_GAS:
		{
		    if(response)
			{
				new b = PickupedBiz[playerid];
		        if(b == INVALID_DATA || BizInfo[b][bType] != BUS_GAS_STATION)
		        {
		        	return GMError(playerid, "DMODE_GAS #0");
		        }
				if(listitem == 0) ShowDialog(playerid, DMODE_GAS_RULES); // Правила пользования
				else if(listitem == 1)
				{// Оплата бензина
				    new vehicleid = gLastVehicle[playerid];
				    if(vehicleid)
				    {
					    new Float:X, Float:Y, Float:Z;
					    GetVehiclePos(vehicleid, X, Y, Z);
						if(!IsPlayerInRangeOfPoint(playerid, 50.0, X, Y, Z))
						{
						    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости нет машин, которые вы можете заправить.");
						    return ShowDialog(playerid, dialogid);
						}
						if(GetVehicleEngine(vehicleid))
						{
						    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Двигатель заправляемого автомобиля должен быть заглушен.");
						    return ShowDialog(playerid, dialogid);
						}
						if(VehInfo[vehicleid][vWishFuel] == 0)
						{
						    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не выбрали желаемый объем топлива, попробуйте еще раз.");
						    return ShowDialog(playerid, dialogid);
						}
						new Float:maxfuel = float(GetVehicleMaxFuel(vehicleid));
						if(VehInfo[vehicleid][vFuel] + VehInfo[vehicleid][vWishFuel] > maxfuel)
						{
						    VehInfo[vehicleid][vWishFuel] = maxfuel - VehInfo[vehicleid][vFuel];
						}
						new Float:price = VehInfo[vehicleid][vWishFuel] * PRICE_FUEL;
						if(MyGetPlayerMoney(playerid) < price)
						{
						    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не хватает денег на оплату топлива.");
						    return ShowDialog(playerid, dialogid);
						}
						BizSaleProds(b, floatround(price), floatround(VehInfo[vehicleid][vWishFuel]));
						VehInfo[vehicleid][vFuel] += VehInfo[vehicleid][vWishFuel];
						VehInfo[vehicleid][vWishFuel] = 0;
						MyGivePlayerMoney(playerid, -floatround(price));
						if(VehInfo[vehicleid][vDriver] >= 0)	IFace.Veh_Update(VehInfo[vehicleid][vDriver], 0);
						UpdateVehicleStatics(vehicleid);
						UpdateVehicleLabel(vehicleid);
						if(!random(2)) 	SendClientMessage(playerid, COLOR_SAYING, "- Кассир: Бензин оплачен, удачи на дорогах!");
						else 			SendClientMessage(playerid, COLOR_SAYING, "- Кассир: Ваш автомобиль заправлен, всего хорошего!");
						ShowDialog(playerid, dialogid);
					}
				}
				else if(listitem == 2)
				{	// Покупка канистры
					if(MyGetPlayerMoney(playerid) < 20)
					{
	                    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не хватает денег для покупки канистры.");
	                    return ShowDialog(playerid, dialogid);
					}
					if(Inv.AddPlayerThing(playerid, THING_GASCAN, 1) == 0)
					{
						return ShowDialog(playerid, dialogid);
					}
					BizSaleProds(b, floatround(PRICE_FUEL), 15);
					MyGivePlayerMoney(playerid, -floatround(15 * PRICE_FUEL));
					ShowDialog(playerid, dialogid);
				}
			}
			else
			{
				gPickupTime[playerid] = 3;
				PickupedBiz[playerid] = INVALID_DATA;
			}
		}
		case DMODE_GAS_REFILL:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
		    if(response && vehicleid)
		    {
				new inputfuel = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || inputfuel <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				if(VehInfo[vehicleid][vFuel] > GetVehicleMaxFuel(vehicleid))
				{
				    SendClientMessage(playerid, COLOR_SAYING, "- Заправщик: Ваш бак и так наполнен до краев, вы можете купить канистру на кассе.");
				    return ShowDialog(playerid, dialogid);
				}
				new maxfuel = GetVehicleMaxFuel(vehicleid) - floatround(VehInfo[vehicleid][vFuel]);
				if(inputfuel > maxfuel)
				{
				    if(inputfuel >= 1000.0) SendClientMessage(playerid, COLOR_SAYING, "- Заправщик: Где вы припарковали вашу цистерну, сэр?");
				    else
				    {
					    if(!random(2)) SendClientMessage(playerid, COLOR_SAYING, "- Заправщик: Перельется же, давайте меньше!");
						else SendClientMessage(playerid, COLOR_SAYING, "- Заправщик: Нет, стоп! Столько сюда не поместится!");
					}
					return ShowDialog(playerid, dialogid);
				}
				if(inputfuel == maxfuel) format(string, 128, "- Заправщик: Полный бак это хорошо! Проходите на кассу для оплаты.");
				else format(string, 128, "- Заправщик: Заправлю на %d литров, пока подходите к кассе.", floatround(inputfuel));
				VehInfo[vehicleid][vWishFuel] = float(inputfuel);
				SendClientMessage(playerid, COLOR_SAYING, string);
		    }
		}
		case DMODE_GAS_RULES:
		{
		    if(response) gPickupTime[playerid] = 3;
			else ShowDialog(playerid, DMODE_GAS);
		}
		case DMODE_JOBLIST:
		{
		    if(response)
			{
				if(IsLegalJob(Job.GetPlayerJob(playerid)))
				{	// Увольнение с работы
					if(!listitem)
					{
						if(Job.DismissPlayer(playerid))
						{
							SendClientMessage(playerid, COLOR_YELLOW, "Вы были уволены с работы по собственному желанию");
						}
					}
					else
					{
						ShowDialog(playerid, dialogid);
					}
				}
				else
				{
				    if(PlayerInfo[playerid][pFaction] > 0)
				    {
				    	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Члены фракций не могут устариваться на работу.");
				        return ShowDialog(playerid, dialogid);
				    }
				    //if(Job.GetPlayerJob(playerid) > 0)
				    //{
				    //    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы уже работаете где-то, сначала увольтесь.");
				    //    return ShowDialog(playerid, dialogid);
				    //}
					switch(listitem)
					{
						case 0://	Таксист
						{
							if(PlayerInfo[playerid][pLevel] < Jobs[JOB_TAXI][J_LEVEL])
					        {
						        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта работа доступна только с 2 уровня.");
						        return ShowDialog(playerid, dialogid);
					        }
							if(AskPlayer(INVALID_PLAYER_ID, playerid, ASK_INVITE_JOB))
							{
								AskAmount[playerid] = JOB_TAXI;
								SendClientMessage(playerid, COLOR_WHITE, "Вы собрались устроиться {44B2FF}таксистом "ASK_CONFIRM_INFO);
								if(Job.GetPlayerJob(playerid) != JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "Ваша нынешняя работа сбросится, если вы согласитесь!");
							}
					        else
					        {
					        	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сначала примите или отклоните текущий запрос.");
					        }
						}
					    case 1:// Водитель автобуса
					    {
					        if(PlayerInfo[playerid][pLevel] < Jobs[JOB_BUSDRIVER][J_LEVEL])
					        {
						        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта работа доступна только с 2 уровня.");
						        return ShowDialog(playerid, dialogid);
					        }
							if(AskPlayer(INVALID_PLAYER_ID, playerid, ASK_INVITE_JOB))
							{
								AskAmount[playerid] = JOB_BUSDRIVER;
								SendClientMessage(playerid, COLOR_WHITE, "Вы собрались устроиться {44B2FF}водителем автобуса "ASK_CONFIRM_INFO);
								if(Job.GetPlayerJob(playerid) != JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "Ваша нынешняя работа сбросится, если вы согласитесь!");
							}
					        else
					        {
					        	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сначала примите или отклоните текущий запрос.");
					        }
					    }
					    case 2:	// Дальнобойщик
					    {
					        if(PlayerInfo[playerid][pLevel] < Jobs[JOB_TRUCKER][J_LEVEL])
					        {
						        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта работа доступна только с 3 уровня.");
						        return ShowDialog(playerid, dialogid);
					        }
					        if(AskPlayer(INVALID_PLAYER_ID, playerid, ASK_INVITE_JOB))
					        {
								AskAmount[playerid] = JOB_TRUCKER;
								SendClientMessage(playerid, COLOR_WHITE, "Вы собрались устроиться {44B2FF}дальнобойщиком "ASK_CONFIRM_INFO);
								if(Job.GetPlayerJob(playerid) != JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "Ваша нынешняя работа сбросится, если вы согласитесь!");
							}
					        else
					        {
					        	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сначала примите или отклоните текущий запрос.");
					        }
					    }
					    case 3:	//	Механик
					    {
					    	if(PlayerInfo[playerid][pLevel] < Jobs[JOB_MECHANIC][J_LEVEL])
					        {
						        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта работа доступна только с 4 уровня.");
						        return ShowDialog(playerid, dialogid);
					        }
					        if(AskPlayer(INVALID_PLAYER_ID, playerid, ASK_INVITE_JOB))
					        {
								AskAmount[playerid] = JOB_MECHANIC;
								SendClientMessage(playerid, COLOR_WHITE, "Вы собрались устроиться {44B2FF}механиком "ASK_CONFIRM_INFO);
								if(Job.GetPlayerJob(playerid) != JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "Ваша нынешняя работа сбросится, если вы согласитесь!");
							}
					        else
					        {
					        	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Сначала примите или отклоните текущий запрос.");
					        }
					    }
					}
				}
			}
		}
		case DMODE_AUTOSCHOOL:
		{
			if(response)
			{
	            if(!PlayerInfo[playerid][pASElement])
				{	// Покупка прав
					if(MyGetPlayerMoney(playerid) < PRICE_AUTOSCHOOL)
					{
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег для оплаты автошколы.");
					}
					MyGivePlayerMoney(playerid, -PRICE_AUTOSCHOOL);
					PlayerInfo[playerid][pASElement] |= 0x1;
					UpdatePlayerBitData(playerid, "as_element", PlayerInfo[playerid][pASElement]);
					SendClientMessage(playerid, COLOR_SAYING, "- Инструктор: Отлично, теперь вам необходимо пройти элементы на площадке...");
					SendClientMessage(playerid, COLOR_SAYING, "- Инструктор: Вы можете прийти и выполнить их в любое время, попытки не ограничены, удачи!");
					ShowDialog(playerid, dialogid);
				}
				else
				{	// Выполнение элементов
					if(listitem == 0)	ShowDialog(playerid, DMODE_BUYELEMENT);
					else if(1 <= listitem <= sizeof(AS_Mission))
					{	// Начать выполнение элемента
						if((PlayerInfo[playerid][pASElement] >> listitem) & 1)
						{
							ShowDialog(playerid, dialogid);
		                    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы уже выполнили данный элемент.");
						}
						else
						{
						    StartASElement(playerid, listitem - 1);
						}
					}
					else if(!PlayerInfo[playerid][pCarLic])
					{	// Получить права
						PlayerInfo[playerid][pCarLic] = 1;
						UpdatePlayerData(playerid, "carlic", PlayerInfo[playerid][pCarLic]);
						SendClientMessage(playerid, COLOR_GREEN, "Инструктор: Поздравляю, вы прошли нашу автошколу и научились водить, вот ваши права!");
						if(mission_id[playerid] == MIS_GET_LICENSE)
						{
							StoryMissionComplete(playerid, MIS_SOURCE_TRAINING, 0, 0);
						}
					#if defined _player_achieve_included	
						GivePlayerAchieve(playerid, ACHIEVE_DRIVER);	//	Достижение 'Водитель'
					#endif	
						/*if(gAchieves[playerid][ACHIEVE_DRIVER] == 0)
						{

						}
						else
						{
							ShowPlayerHint(playerid, "Вы получили:___________________~n~~g~- Лицензию на вождение");
							SuccesAnim(playerid);
							PlayerPlaySound(playerid, 36205, 0.0, 0.0, 0.0);
						}*/
					}
				}
			}
		}
		case DMODE_SHOOTING:
		{
			if(response == 0)
			{
				return true;
			}
			if(PlayerInfo[playerid][pShooting] == 0)
			{
				if(MyGetPlayerMoney(playerid) < 700)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег для оплаты.");
                    return ShowDialog(playerid, dialogid);
				}
				PlayerInfo[playerid][pShooting] = 1;
				MyGivePlayerMoney(playerid, -500);
				ShowDialog(playerid, dialogid);
			}
			else
			{
				if(listitem == 0)
				{
					ShowDialog(playerid, DMODE_SHOOTING_INFO);
				}
				else if(listitem == 1)
				{
					if(0 < PlayerInfo[playerid][pShooting] <= 3)
				 	{
				 	    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);	// Попытка исправить баг с двумя стволами
						MySetPlayerPosFade(playerid, FT_TIR, 293.7, -24.6, 1001.5, 0.0, false, GetPlayerInterior(playerid), (GetPlayerVirtualWorld(playerid) + playerid + 1000));
				 		PlayerBusy{playerid} = true;
				 	}
				}
			 	else if(listitem == 2)
			 	{
			 		if(GetPlayerCoins(playerid) < CoinForShooting)
			 		{
			 			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько монет.");
			 			return ShowDialog(playerid, dialogid);
			 		}
			 		GivePlayerCoins(playerid, -CoinForShooting);
			 		PlayerInfo[playerid][pShooting] = 4;
					SuccesAnim(playerid);
					PlayerPlaySound(playerid, 36205, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GREEN, "Поздравляем, теперь отправляйтесь в полицейский участок для оплаты и получения лицензии на оружие!");
			 	}
			}
		}
		case DMODE_SHOOTING_INFO:
		{
			return ShowDialog(playerid, DMODE_SHOOTING);
		}
		case DMODE_BUYELEMENT:
		{
		    if(response)
		    {
				if(!strlen(inputtext) || (strcmp(inputtext, "skip", true) && strcmp(inputtext, "пропустить", true)))
					return ShowDialog(playerid, dialogid);
				if(GetPlayerCoins(playerid) < 40)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает монет.");
				}
				else
				{
					GivePlayerCoins(playerid, -40);
					PlayerInfo[playerid][pASElement] = 0xFF;
					UpdatePlayerBitData(playerid, "as_element", PlayerInfo[playerid][pASElement]);
					SendClientMessage(playerid, COLOR_GREEN, "Инструктор: Поздравляю, вы сдали все элементы!");
				}
		    }
		    ShowDialog(playerid, DMODE_AUTOSCHOOL);
		}
		case DMODE_REACTION:
		{
			new pursuit = GetPVarInt(playerid, "Player:Reaction:PursuitMenu");
		   	DeletePVar(playerid, "Player:Reaction:PursuitMenu");
		    if(response)
		    {
		    	new count = 0;
		    	new vehicleid = GetPlayerVehicleID(playerid);
		    	new targetid = gTargetid[playerid];
		    	valstr(string, targetid);
		    	if(PM_Type[playerid] == 10 && PM_Place[playerid] == targetid)
		    	{
		    		if(pursuit != 1)	return true;
		    		if(PursuitStatus[targetid] == PS_WAIT || PursuitStatus[targetid] == PS_OUT_COMPLETE)
		    		{
		    			if(listitem == 0)
						{
							if(PlayerInfo[targetid][pNextFriskTime] > gettime())
							{
								ShowDialog(playerid, dialogid);
							}
							else
							{
								return callcmd::frisk(playerid, string);
							}
						}
						else if(listitem == 1)
						{
							if(PursuitIllegalItem[targetid])
							{
								mysql_format(g_SQL, string, sizeof(string), "SELECT `id`, `thing` FROM `inventory` WHERE `source` = '%d' AND `source_type` = '%d'", PlayerInfo[targetid][pUserID], _:TAB_INVENTORY);
						    	new Cache:result = mysql_query(g_SQL, string);
						    	for(new i = 0, id, thing; i < cache_num_rows(); i++)
								{
									cache_get_value_name_int(i, "id", id);
									cache_get_value_name_int(i, "thing", thing);
									new legally = GetThingLegally(thing);
									if(!legally)	
									{
										Inv.DeleteItem(id);
						    		}
						    		else if(thing == THING_WEAPON)
						    		{
						    			if(PlayerInfo[targetid][pGunLic] == 0)
						    			{
						    				Inv.DeleteItem(id);
						    			}
						    		}
						    	}
						    	cache_delete(result);
						    	//	Оружие
						    	/*if(PlayerInfo[targetid][pGunLic] == 0)
						    	{
						    		for(new s = 2; s < 13; s++)
						    		{
						    			if(!MyGetPlayerWeaponID(playerid, s) || 9 <= s <= 11) continue;
	    								MySetPlayerWeapon(targetid, s, 0);
						    		}
						    		MyUpdatePlayerWeapon(targetid);
						    	}*/
						    	PursuitIllegalItem[targetid] = false;
						    	format(string, sizeof(string), "изымает нелегальные предметы у %s'а.", ReturnPlayerName(targetid));
						    	PlayerAction(playerid, string);
						    	SendFormatMessage(targetid, COLOR_DBLUE, string, "%s %s изъял у вас все нелегальные предметы", GetPlayerRank(playerid), ReturnPlayerName(playerid));
					    	}
					    	ShowDialog(playerid, dialogid);
						}
						else if(listitem == 2)
						{
							if(0 < GetPlayerWantedLevel(targetid) < 4)
							{
								if(AskPlayer(playerid, targetid, ASK_POLICE_FINE))
								{
									new wl = GetPlayerWantedLevel(targetid);
									new finecash = wl * FINE_PER_WANTED;
									AskAmount[targetid] = finecash;
									PursuitCount[targetid] = 40;	//	ожидаем оплату штрафа
									SendFormatMessage(playerid, COLOR_DBLUE, string, "Нарушителю %s выписана квитанция со штрафом, ожидайте оплату!", ReturnPlayerName(targetid));
									SendFormatMessage(targetid, COLOR_DBLUE, string, "%s %s выписал вам штраф на %d$. Оплатить? "ASK_CONFIRM_INFO, GetPlayerRank(playerid), ReturnPlayerName(playerid), finecash);
								}
								else
								{
									SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, подождите.");
									ShowDialog(playerid, dialogid);
								}
							}
							else
							{
								CancelPlayerPursuit(targetid, 1);
								SendFormatMessage(playerid, COLOR_DBLUE, string, "У подозреваемого %s не обнаружено правонарушений", ReturnPlayerName(targetid));
								SendFormatMessage(targetid, COLOR_DBLUE, string, "%s %s не нашел никаких правонарушений, вы свободны", GetPlayerRank(playerid), ReturnPlayerName(playerid));
							}
						}
		    		}
					else
					{
						gTargetid[playerid] = INVALID_PLAYER_ID;
					}
		    	}
		    	else if(pursuit == 0)
		    	{
	    		 	if(count++ == listitem)
	    		 	{
				    	// Поздороваться
					    return callcmd::hi(playerid, string);
				    }
				    if(count++ == listitem)
				    {
				    	//	Показать документы
				    	return callcmd::showpass(playerid, string);
				    }
				    if(count++ == listitem)
				    {
				    	// Передать деньги
				    	return ShowDialog(playerid, DMODE_PAY_SUMM);
				    }

					if(PlayerInfo[playerid][pFaction] == F_POLICE && IsPoliceDuty(playerid) && GetPlayerState(targetid) != PLAYER_STATE_WASTED && count++ == listitem)
					{
						if(!StartPursuit(playerid, targetid))
						{
							return ShowDialog(playerid, dialogid);
						}
					}
					else if(PlayerInfo[playerid][pFaction] == F_NEWS && PlayerInfo[playerid][pRank] >= 3
						&& (GetPlayerInterior(playerid) == 18 || (vehicleid > 0 && CarInfo[vehicleid][cType] == C_TYPE_FACTION && CarInfo[vehicleid][cOwnerID] == F_NEWS))
						&& (TalkingLive[playerid] == INVALID_PLAYER_ID || (TalkingLive[playerid] != INVALID_PLAYER_ID && TalkingLive[playerid] == gTargetid[playerid]))
						&& count++ == listitem)
					{	//	Взять интервью
					   	return callcmd::live(playerid, string);
					}

					if(GetPVarInt(gTargetid[playerid], "Player:JobPartner") == PlayerInfo[playerid][pUserID] && count++ == listitem)
					{
						SendFormatMessage(gTargetid[playerid], COLOR_LIGHTRED, string, "%s закончил работать с вами",  ReturnPlayerName(playerid));
						SendFormatMessage(playerid, COLOR_LIGHTRED, string, "Вы закончили работать с %s'ом",  ReturnPlayerName(gTargetid[playerid]));
						DeletePVar(gTargetid[playerid], "Player:JobPartner");
					}
					else
					{
						new rentcar = GetPVarInt(playerid, "RentCar");
						if(rentcar > 0 && DeliveryVehLoadCount[rentcar] > 0 && count++ == listitem)
						{
							if(AskPlayer(playerid, gTargetid[playerid], ASK_JOB_PARTNER))
							{
								SendFormatMessage(gTargetid[playerid], COLOR_WHITE, string, "%s предлагает вам поработать вместе "ASK_CONFIRM_INFO,  ReturnPlayerName(playerid));
								SendFormatMessage(playerid, COLOR_WHITE, string, "Вы предложили %s поработать вместе", ReturnPlayerName(gTargetid[playerid]));
							}
							else
							{
								return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, попробуйте позже.");
							}
						}
					}

					if(GetNearRing(playerid) != (-1) && count++ == listitem)
					{
						return callcmd::box(playerid, string);
					}

					// Для лидеров и замов
					if(PlayerInfo[playerid][pFaction] > 0 && PlayerInfo[playerid][pRank] >= GetRankMax(PlayerInfo[playerid][pFaction]) - 1)
					{
						if(PlayerInfo[ gTargetid[playerid] ][pFaction] == F_NONE && count++ == listitem)
						{//	Принять в организацию
						    return callcmd::invite(playerid, string);
						}
						else if(PlayerInfo[playerid][pFaction] == PlayerInfo[ gTargetid[playerid] ][pFaction] && PlayerInfo[playerid][pRank] > PlayerInfo[ gTargetid[playerid] ][pRank])
						{
							if(count++ == listitem)
							{	//	выгнать из организации
								return callcmd::uninvite(playerid, string);
							}
						    if(count++ == listitem)	{
						    	return callcmd::giverank(playerid, string);
						    }
						}
					}
		    	}
		    }
		    else
		    {
		    	gTargetid[playerid] = INVALID_PLAYER_ID;
		    }
		}
		case DMODE_PAY_SUMM:
		{
		    if(!response)
		    {
		        return ShowDialog(playerid, DMODE_REACTION);
		    }
			format(string, 128, "%d %d", gTargetid[playerid], strval(inputtext));
			callcmd::pay(playerid, string);
		}
		case DMODE_HOTEL:
		{
		    if(response)
		    {
			    if(PlayerInfo[playerid][pRent] < 0)
				{
					if(listitem == 0)
					{
						ShowDialog(playerid, DMODE_EX_HOTEL);
					}
					else if(listitem == 1)
					{
						ShowDialog(playerid, DMODE_HOTEL);
					}
					else if(listitem == 2)
					{
						PlayerInfo[playerid][pRent]--;// = {-1, -2, -3}
						if(PlayerInfo[playerid][pRent] < (-3))
						{
							PlayerInfo[playerid][pRent] = -1;
						}
						SendClientMessage(playerid, COLOR_GREEN, "[Аренда]: Вас переселили в другой номер!");
						MyGivePlayerMoney(playerid, -15);
					}
					else if(listitem == 3)
					{
						PlayerInfo[playerid][pRent] = 0;
				    	PlayerInfo[playerid][pPaymentDays] = 0;
						SendClientMessage(playerid, COLOR_GREEN, "[Аренда]: Наш отель к вашим услугам в любое время!");
					}
				}
				else
				{
					new days = strval(inputtext);
					if(!(0 < strlen(inputtext) < 10) || days <= 0)
			        {
			            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
			            return ShowDialog(playerid, dialogid);
			        }
					new price = HOTEL_COST * days;
					if(MyGetPlayerMoney(playerid) < price)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько наличных.");
						return ShowDialog(playerid, dialogid);
					}
					if(days > 30)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Максимальное количество дней для аренды - 30.");
						return ShowDialog(playerid, dialogid);
					}
					MyGivePlayerMoney(playerid, -price);
    				PlayerInfo[playerid][pRent] = -1 - random(3);// = {-1, -2, -3}
    				PlayerInfo[playerid][pPaymentDays] = days;
    				PlayerInfo[playerid][pSpawn] = SPAWN_HOUSE;
					SendFormatMessage(playerid, COLOR_GREEN, string, "[Аренда]: Вы успешно арендовали номер на %d дней, приятного проживания!", days);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Spawn]: Теперь вы будете появлятся в номере отеля");
					if(mission_id[playerid] == MIS_HOTEL)
					{
						new hotel_roow = PlayerInfo[playerid][pRent] * (-1) - 1; // = {0, 1, 2}
						SetPVarInt(playerid, "Mission:CompleteMission", MIS_HOTEL);
						MySetPlayerPosFade(playerid, FT_NONE, Arr4<HotelRooms[hotel_roow][H_POS]>, true, HotelRooms[hotel_roow][H_INT], VW_HOUSE + playerid);
					}
				}
				UpdatePlayerHouseMapIcon(playerid);
		    }
		}
		case DMODE_EX_HOTEL:
		{
			if(response && PlayerInfo[playerid][pRent] < 0)
		    {
		    	new days = strval(inputtext);
		        if(!(0 < strlen(inputtext) < 10) || days <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				new price = HOTEL_COST * days;
				if(MyGetPlayerMoney(playerid) < price)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько наличных.");
					return ShowDialog(playerid, dialogid);
				}
				MyGivePlayerMoney(playerid, -price);
				PlayerInfo[playerid][pPaymentDays] += days;
				SendFormatMessage(playerid, COLOR_GREEN, string, "[Аренда]: Вы успешно продлили аренду номера на %d дней, приятного проживания!", days);
		    }
		    else ShowDialog(playerid, DMODE_HOTEL);
		}
		case DMODE_ATM:
		{
			if(response)
			{
				new item = 0;
				if(listitem == item++)
				{
					openWithATM[playerid] = true;
					SetPVarInt(playerid, "Bank:Type", 0);
			        ShowDialog(playerid, DMODE_BANK_ACTION); // Банковский счет
				}
				else if(PlayerInfo[playerid][pPhoneNumber] && listitem == item++)
				{
					Dialog_Show(playerid, Dialog:Phone_Pay);
				}
				else ShowDialog(playerid, dialogid);
			}
			else
			{
				openWithATM[playerid] = false;
				DeletePVar(playerid, "Bank:Type");
				ClearAnimations(playerid);
			}
		}
		case DMODE_BANK:
		{
			if(response)
			{
				new item = 0;
				if(listitem == item++)
				{
					SetPVarInt(playerid, "Bank:Type", 0);
			        ShowDialog(playerid, DMODE_BANK_ACTION); // Банковский счет
				}

				new b = FoundBiz(GetPlayerBiz(playerid));
				if(b != (-1))
				{
					if(listitem == item++)
					{
						SetPVarInt(playerid, "Bank:Type", 1);
						ShowDialog(playerid, DMODE_BANK_ACTION);
					}
					else if(listitem == item++)
					{
						SetPVarInt(playerid, "Bank:Type", 1);
						ShowDialog(playerid, DMODE_PROPERTY_PAY);
					}
				}

				new h = FoundHouse(GetPlayerHouse(playerid));
				if(h != (-1))
				{
					if(listitem == item++)
					{
						SetPVarInt(playerid, "Bank:Type", 2);
						ShowDialog(playerid, DMODE_PROPERTY_PAY);
					}
				}

				if(PlayerInfo[playerid][pPhoneNumber] && listitem == item++)
				{
					Dialog_Show(playerid, Dialog:Phone_Pay);	// Баланс телефона
				}
				else ShowDialog(playerid, dialogid);
			}
			else
			{
				DeletePVar(playerid, "Bank:Type");
			}
		}
		case DMODE_BANK_ACTION:
		{
		    if(response)
			{
			    switch(listitem)
			    {
			        case 2: ShowDialog(playerid, DMODE_BANK_TAKE); // Снять со счета
			        case 3: ShowDialog(playerid, DMODE_BANK_GIVE); // Положить на счет
			        default: ShowDialog(playerid, dialogid);
			    }
			}
			else
			{
				if(openWithATM[playerid])	ShowDialog(playerid, DMODE_ATM);
				else 						ShowDialog(playerid, DMODE_BANK);
			}
		}
		case DMODE_BANK_TAKE:
		{
		    if(response)
		    {
		        new const money = strval(inputtext);
		        if(!(0 < strlen(inputtext) < 10) || money <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
		        new type = GetPVarInt(playerid, "Bank:Type");
		        new Float:oldbank, Float:newbank;
		        new Float:proc = float(money) / 100;
		        if(type == 0)	//	личный счет
				{
					if(PlayerInfo[playerid][pBank] < money)
			        {
			            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На счету недостаточно денег на такой депозит.");
			            return ShowDialog(playerid, dialogid);
			        }
			        oldbank = PlayerInfo[playerid][pBank];
			        GivePlayerBank(playerid, -(float(money) + proc));
			        newbank = PlayerInfo[playerid][pBank];
				}
				else if(type == 1)	//	счет бизнеса
				{
					new b = FoundBiz(GetPlayerBiz(playerid));
					if(b == (-1))	return ShowDialog(playerid, DMODE_ATM);
					if(BizInfo[b][bBank] < float(money))
			        {
			            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На счету недостаточно денег на такой депозит.");
			            return ShowDialog(playerid, dialogid);
			        }
			        oldbank = BizInfo[b][bBank];
			        BizInfo[b][bBank] -= (float(money) + proc);
			        newbank = BizInfo[b][bBank];
			        SaveBiz(b);
				}
		        MyGivePlayerMoney(playerid, money);

				SendClientMessage(playerid, COLOR_GREEN, "|___ Извещение из банка ___|");
				format(string, sizeof(string), "  Старый баланс: $%.2f", oldbank);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "  Переведено: -%d$.00", money);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "  Комиссия: $%.2f (1%s)", proc, "%%");
				SendClientMessage(playerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "  Новый баланс: $%.2f", newbank);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_GREEN, "|-----------------------------------------------|");
		    }
		    if(openWithATM[playerid])	ShowDialog(playerid, DMODE_ATM);
		    else 						ShowDialog(playerid, DMODE_BANK);
		}
		case DMODE_BANK_GIVE:
		{
		    if(response)
		    {
		        new const money = strval(inputtext);
		        if(!(0 < strlen(inputtext) < 10) || money <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
		        if(MyGetPlayerMoney(playerid) < money)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег на такой депозит.");
		            return ShowDialog(playerid, dialogid);
		        }
		        new type = GetPVarInt(playerid, "Bank:Type");
		        new Float:oldbank, Float:newbank;
		        if(type == 0)	//	личный счет
				{
			        oldbank = PlayerInfo[playerid][pBank];
			        GivePlayerBank(playerid, money);
			        newbank = PlayerInfo[playerid][pBank];
				}
				else if(type == 1)	//	счет бизнеса
				{
					new b = FoundBiz(GetPlayerBiz(playerid));
					if(b == (-1))	return ShowDialog(playerid, DMODE_ATM);
			        oldbank = BizInfo[b][bBank];
			        BizInfo[b][bBank] += float(money);
			        newbank = BizInfo[b][bBank];
			        SaveBiz(b);
				}
				MyGivePlayerMoney(playerid, -money);

				SendClientMessage(playerid, COLOR_GREEN, "|___ Извещение из банка ___|");
				format(string, sizeof(string), "  Старый баланс: $%.2f", oldbank);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "  Зачислено: +%d$.00", money);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "  Комиссия: $0.00 (0%s)", "%%");
				SendClientMessage(playerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "  Новый баланс: $%.2f", newbank);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_GREEN, "|-----------------------------------------------|");
		    }
		    if(openWithATM[playerid])	ShowDialog(playerid, DMODE_ATM);
		    else 						ShowDialog(playerid, DMODE_BANK);
		}
		case DMODE_PROPERTY_PAY:
		{
			if(response)
			{
				new days = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || days <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				new type = GetPVarInt(playerid, "Bank:Type");
				new cost = 0;
		        if(type == 1)	//	счет бизнеса
				{
					cost = TAX_BIZ * days;
					if(MyGetPlayerMoney(playerid) < cost)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько наличных.");
						return ShowDialog(playerid, dialogid);
					}

					new b = FoundBiz(GetPlayerBiz(playerid));
					if(b == (-1))	return ShowDialog(playerid, DMODE_BANK);
					if(BizInfo[b][bPaymentDays] + days > 30)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Максимальное количество оплаченых дней - 30.");
						return ShowDialog(playerid, dialogid);
					}
					BizInfo[b][bPaymentDays] += days;
			        SaveBiz(b);
				}
				if(type == 2)	//	счет дома
				{
					cost = TAX_HOUSE * days;
					if(MyGetPlayerMoney(playerid) < cost)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько наличных.");
						return ShowDialog(playerid, dialogid);
					}

					new h = FoundHouse(GetPlayerHouse(playerid));
					if(h == (-1))	return ShowDialog(playerid, DMODE_BANK);
					if(HouseInfo[h][hPaymentDays] + days > 30)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Максимальное количество оплаченых дней - 30.");
						return ShowDialog(playerid, dialogid);
					}
					HouseInfo[h][hPaymentDays] += days;
					SaveHouse(h);
				}
				SendClientMessage(playerid, COLOR_GREEN, "|___ Извещение из банка ___|");
				SendFormatMessage(playerid, COLOR_WHITE, string, "  Зачислено: +%d.00$", cost);
				SendFormatMessage(playerid, COLOR_GRAD2, string, "  Оплачено: %d дней", days);
				MyGivePlayerMoney(playerid, -cost);
				ShowDialog(playerid, dialogid);
			}
			else ShowDialog(playerid, DMODE_BANK);
		}
		case DMODE_FINEPARK:
		{
		    if(response)
		    {
			    if(MyGetPlayerMoney(playerid) < 500)
			    {
				    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не хватает денег. Выкуп машины стоит $500.");
				    return 1;
			    }
			    if(FineparkVehicle != 0)
			    {
				    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Дождитесь, пока штраф-стоянка освободится.");
				    return 1;
			    }
			    MyGivePlayerMoney(playerid, -500);

			    // Загружаем
				mysql_format(g_SQL, string, sizeof(string), "SELECT * FROM `cars` WHERE `type` = 1 AND `fine_park` > 0 AND `ownerid` = '%d' LIMIT 1", PlayerInfo[playerid][pUserID]);
				new Cache:result = mysql_query(g_SQL, string);
				if(!cache_num_rows())
				{
				    cache_delete(result);
				    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На штраф стоянке нет ни одной вашей машины.");
				}
				new Float:Health;
		        new id, modelid, color1, color2;
		        cache_get_value_index_int(0, 0, id);
		       	cache_get_value_index_int(0, 3, modelid);
		        cache_get_value_index_int(0, 8, color1);
		        cache_get_value_index_int(0, 9, color2);
		        new Panels, Doors, Lights, Tires;// Float:Health;
		        new vehid = MyCreateVehicle(modelid, 1576.9026, -1608.4280, 13.5, 180.0, color1, color2);

				mysql_format(g_SQL, string, sizeof(string), "UPDATE `cars` SET `fine_park` = '0' WHERE `id` = '%d'", id);
				mysql_query_ex(string);

				// Запись в массив
				CarInfo[vehid][cID] = id;
				cache_get_value_index_int(0, 1, CarInfo[vehid][cType]);
				cache_get_value_index_int(0, 2, CarInfo[vehid][cOwnerID]);
				CarInfo[vehid][cModel] = modelid;
				cache_get_value_index_float(0, 4, CarInfo[vehid][cX]);
				cache_get_value_index_float(0, 5, CarInfo[vehid][cY]);
				cache_get_value_index_float(0, 6, CarInfo[vehid][cZ]);
				cache_get_value_index_float(0, 7, CarInfo[vehid][cA]);
				CarInfo[vehid][cColor1] = color1;
				CarInfo[vehid][cColor2] = color2;
				cache_get_value_index(0, 10, CarInfo[vehid][cPlate], 10);
				cache_get_value_index_int(0, 11, CarInfo[vehid][cPaintJob]);
				cache_get_value_index_int(0, 12, CarInfo[vehid][cSpoiler]);
				cache_get_value_index_int(0, 13, CarInfo[vehid][cHood]);
				cache_get_value_index_int(0, 14, CarInfo[vehid][cRoof]);
				cache_get_value_index_int(0, 15, CarInfo[vehid][cSideskirt]);
				cache_get_value_index_int(0, 16, CarInfo[vehid][cNitro]);
				cache_get_value_index_int(0, 17, CarInfo[vehid][cLamps]);
				cache_get_value_index_int(0, 18, CarInfo[vehid][cExhaust]);
				cache_get_value_index_int(0, 19, CarInfo[vehid][cWheels]);
				cache_get_value_index_int(0, 20, CarInfo[vehid][cHydraulics]);
				cache_get_value_index_int(0, 21, CarInfo[vehid][cFrontBumper]);
				cache_get_value_index_int(0, 22, CarInfo[vehid][cRearBumper]);
				cache_get_value_index_int(0, 23, CarInfo[vehid][cVentR]);
				cache_get_value_index_int(0, 24, CarInfo[vehid][cVentL]);
				cache_get_value_index_float(0, 25, CarInfo[vehid][cMileage]);
				cache_get_value_index_int(0, 26, Panels);
				cache_get_value_index_int(0, 27, Doors);
				cache_get_value_index_int(0, 28, Lights);
				cache_get_value_index_int(0, 29, Tires);
				//cache_get_value_index_float(0, 30, Health);
				//cache_get_value_index_float(0, 31, VehInfo[vehid][vFuel]);
				VehInfo[vehid][vFuel] = 10.0;
				VehInfo[vehid][vLocked] = 0;
				FineparkVehicle = vehid;

				// Тюнинг транспорта
				SetVehicleNumberPlate(vehid, CarInfo[vehid][cPlate]);
				MySetVehicleToRespawn(vehid);// -> OnVehicleSpawn
				UpdateVehicleDamageStatus(vehid, Panels, Doors, Lights, Tires);
				if(Health < 400.0) Health = 400.0;
				MySetVehicleHealth(vehid, Health);
				if(CarInfo[vehid][cNeon])	AttachNeons(vehid, CarInfo[vehid][cNeon] - 1);
				SendClientMessage(playerid, COLOR_DBLUE, "* Штраф-стоянка: {FFFFFF}Заберите транспорт за 60 секунд, иначе его снова оштрафуют");
			}
		    gPickupTime[playerid] = 3;
		}
		case DMODE_GPS:
		{
			if(response)
			{
				if(IsPlayerActiveGPS(playerid))
				{
					if(listitem == 0)
					{
						HidePlayerGPSPoint(playerid);
						return SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Навигатор выключен");
					}
					else listitem--;
				}
				switch(listitem)
				{
					case 0:	//	Важные места
					{
						strcat(string, ""MAIN_COLOR"• {FFFFFF}Полицейский участок\n\
							"MAIN_COLOR"• {FFFFFF}Мэрия Лос-Сантоса\n\
							"MAIN_COLOR"• {FFFFFF}Автошкола\n\
							"MAIN_COLOR"• {FFFFFF}Центральный банк\n\
							"MAIN_COLOR"• {FFFFFF}Больница\n\
							"MAIN_COLOR"• {FFFFFF}Отель Jefferson");
						MyShowPlayerDialog(playerid, DMODE_GPS_MAIN, DIALOG_STYLE_LIST, "Навигатор - Важные места", string, "Выбрать", "Назад", 0);
					}
					case 1:	//	Подработка
					{
						strcat(string, ""MAIN_COLOR"• {FFFFFF}Товарный склад\n\
						"MAIN_COLOR"• {FFFFFF}Ферма\n\
						"MAIN_COLOR"• {FFFFFF}Служба доставки");
						MyShowPlayerDialog(playerid, DMODE_GPS_PART, DIALOG_STYLE_LIST, "Навигатор - Подработка", string, "Выбрать", "Назад", 0);
					}
					case 2:	//	Легальная работа
					{
						for(new j = 1; j < sizeof(Jobs); j++)
						{
							if(Jobs[j][J_OFF])
							{
								format(string, sizeof(string), "%s"MAIN_COLOR"• {FFFFFF}%s\n", string, Jobs[j][J_NAME]);
							}
						}
						MyShowPlayerDialog(playerid, DMODE_GPS_OFFJOB, DIALOG_STYLE_LIST, "Навигатор - Легальная работа", string, "Выбрать", "Назад", 0);
					}
					case 3:	//	Нелегальная работа
					{
						new lstring[1024];
						for(new j = 1; j < sizeof(Jobs); j++)
						{
							if(Jobs[j][J_OFF])	continue;
							format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t\n", lstring, Jobs[j][J_NAME]);
						}
						strcat(lstring,
							""MAIN_COLOR"• {FFFFFF}Место закупки металла\t(Оружейник)\n\
							"MAIN_COLOR"• {FFFFFF}Место производства\t(Оружейник)\n\
							"MAIN_COLOR"• {FFFFFF}Место закупки травы\t(Наркодиллер)\n\
							"MAIN_COLOR"• {FFFFFF}Место производства\t(Наркодиллер)");
						MyShowPlayerDialog(playerid, DMODE_GPS_JOB, DIALOG_STYLE_TABLIST, "Навигатор - Нелегальная работа", lstring, "Выбрать", "Назад", 0);
					}
					case 4:	//	Транспорт
					{
						ShowDialog(playerid, DMODE_GPS_VEH);
					}
					case 5:	//	Магазины и питание
					{
						ShowDialog(playerid, DMODE_GPS_SHOPS);
					}
					case 6:	//	Развлечения
					{
						ShowDialog(playerid, DMODE_GPS_REST);
					}
				}
				//Streamer_Update(playerid);
			}
			else if(openWithMenu[playerid])
			{
				ShowDialog(playerid, DMENU_MAIN);
			}
		}
		case DMODE_GPS_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:	//	Полицейский участок
					{
						ShowPlayerGPSPoint(playerid, 1553.0, -1675.6, 16.2);
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Полицейский участок отмечен на радаре "SCOLOR_GPS"желтым маркером");
					}
					case 1:	//	Мэрия Лос-Сантоса
					{
						ShowPlayerGPSPoint(playerid, 1480.9, -1769.5, 18.8);
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Мэрия Лос-Сантоса отмечена на радаре "SCOLOR_GPS"желтым маркером");
					}
					case 2:	//	Автошкола
					{
						//ShowPlayerGPSPoint(playerid, -2026.5, -99.5, 35.2); // San Fierro
						ShowPlayerGPSPoint(playerid, 725.65, -1440.13, 13.53); // Los Santos
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Автошкола отмечена на радаре "SCOLOR_GPS"желтым маркером");
					}
					case 3:	//	Банк
					{
						ShowPlayerGPSPoint(playerid, 1545.99, -1269.10, 17.40);
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Банк отмечен на радаре "SCOLOR_GPS"желтым маркером");
					}
					case 4:	//	Больница
					{
						ShowPlayerGPSPoint(playerid, 1172.46, -1321.5, 15.4);
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Больница отмечена на радаре "SCOLOR_GPS"желтым маркером");
					}
					case 5:	//	Jefferson
					{
						ShowPlayerGPSPoint(playerid, 2232.67, -1159.71, 25.9);
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Отель Jefferson отмечен на радаре "SCOLOR_GPS"желтым маркером");
					}
				}
			}
			else
			{
				ShowDialog(playerid, DMODE_GPS);
			}
		}
		case DMODE_GPS_VEH:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:	//	Автосалон
					{
						new num;
						for(new i = 0, Float:mindist, Float:dist; i < sizeof AutoShowPos; i++)
						{
						    dist = GetDistanceFromMeToPoint(playerid, Arr3<AutoShowPos[i]>);
						    if(mindist == 0 || mindist > dist)	{	num = i;	mindist = dist;	}
						}
						ShowPlayerGPSPoint(playerid, Arr3<AutoShowPos[num]>);
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Ближайший автосалон отмечен на радаре "SCOLOR_GPS"желтым маркером");
					}
					case 1:	//	Аренда авто
					{
						ShowPlayerGPSPoint(playerid, 1639.04, -1100.21, 23.9);
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Аренда авто отмечена на радаре "SCOLOR_GPS"желтым маркером");
					}
					case 2:	//  Автомастерская
					{
						new num;
						for(new i = 0, Float:mindist, Float:dist; i < sizeof AutoRepairPos; i++)
						{
						    dist = GetDistanceFromMeToPoint(playerid, Arr3<AutoRepairPos[i]>);
						    if(mindist == 0 || mindist > dist)	{	num = i;	mindist = dist;	}
						}
						ShowPlayerGPSPoint(playerid, Arr3<AutoRepairPos[num]>);
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Ближайшая автомастерская отмечена на радаре "SCOLOR_GPS"желтым маркером");
					}
					case 3:	//	Заправка
					{
						new lstring[512];
						SetPVarInt(playerid, "GPS:BizType", BUS_GAS_STATION);
						for(new b = 0; b < MaxBiz; b++)
						{
							if(BizInfo[b][bType] == BUS_GAS_STATION)
							{
								format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t[%.1f m.]\n", lstring, BizInfo[b][bName], GetDistanceFromMeToPoint(playerid, Arr3<BizInfo[b][bPos]>));
							}
						}
						return MyShowPlayerDialog(playerid, DMODE_GPS_BIZ, DIALOG_STYLE_TABLIST, "Навигатор - Заправка", lstring, "Выбрать", "Назад");
					}
					case 4: //  Ремонтный бокс
					{
						new num;
						for(new i = 0, Float:mindist, Float:dist; i < sizeof paynspray; i++)
						{
						    dist = GetDistanceFromMeToPoint(playerid, Arr3<paynspray[i]>);
						    if(mindist == 0 || mindist > dist)	{	num = i;	mindist = dist;	}
						}
						ShowPlayerGPSPoint(playerid, Arr3<paynspray[num]>);
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Ближайший ремонтный бокс отмечен на радаре "SCOLOR_GPS"желтым маркером");

					}
				}
			}
			else
			{
				ShowDialog(playerid, DMODE_GPS);
			}
		}
		case DMODE_GPS_PART:
		{
			if(response)
			{
				if(listitem == 0)
				{
					ShowPlayerGPSPoint(playerid, 2134.51, -2276.57, 20.67);
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Товарный склад отмечен на радаре "SCOLOR_GPS"желтым маркером");
				}
				else if(listitem == 1)
				{
					ShowPlayerGPSPoint(playerid, -1060.58, -1195.65, 129.68);
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Ферма отмечена на радаре "SCOLOR_GPS"желтым маркером");
				}
				else if(listitem == 2)
				{
					ShowPlayerGPSPoint(playerid, 2176.05, -2282.54, 13.52);
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Служба доставки отмечена на радаре "SCOLOR_GPS"желтым маркером");
				}
			}
			else
			{
				ShowDialog(playerid, DMODE_GPS);
			}
		}
		case DMODE_GPS_OFFJOB:
		{
			if(response)
			{
				for(new j = 1, c = 0; j < sizeof(Jobs); j++)
				{
					if(Jobs[j][J_OFF] && c++ == listitem)
					{
						ShowPlayerGPSPoint(playerid, Arr3<Jobs[j][J_POS]>);
						SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_GPS "Работа '%s' - отмечена на радаре "SCOLOR_GPS"желтым маркером", Jobs[j][J_NAME]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Внимание! Данная точка показывает место работы, устройство происходит в мерии!");
					}
				}
			}
			else
			{
				ShowDialog(playerid, DMODE_GPS);
			}
		}
		case DMODE_GPS_JOB:
		{
			if(response)
			{
				new c = 0;
				for(new j = 1; j < sizeof(Jobs); j++)
				{
					if(!Jobs[j][J_OFF] && c++ == listitem)
					{
						ShowPlayerGPSPoint(playerid, Arr3<Jobs[j][J_POS]>);
						SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_GPS "Работа '%s' - отмечена на радаре "SCOLOR_GPS"желтым маркером", Jobs[j][J_NAME]);
					}
				}
				if(c++ == listitem)	//	Место закупки металла (Оружейник)
				{
					ShowPlayerGPSPoint(playerid, 2744.6, -2453.5, 13.8);
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Место закупки металла отмечено на радаре "SCOLOR_GPS"желтым маркером");
				}
				else if(c++ == listitem)	//	Место производства (Оружейник)
				{
					ShowPlayerGPSPoint(playerid, -616.2, -478.0, 25.68);
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Место производства отмечено на радаре "SCOLOR_GPS"желтым маркером");
				}
				else if(c++ == listitem)	//	Место закупки травы (Наркодиллер)
				{
					ShowPlayerGPSPoint(playerid, -1066.5, -1154.4, 129.2);
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Место закупки травы отмечено на радаре "SCOLOR_GPS"желтым маркером");
				}
				else if(c++ == listitem)	//	Место производства (Наркодиллер)
				{
					ShowPlayerGPSPoint(playerid, -2164.0, -249.27, 36.51);
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Место производства отмечено на радаре "SCOLOR_GPS"желтым маркером");
				}
			}
			else
			{
				ShowDialog(playerid, DMODE_GPS);
			}
		}
		case DMODE_GPS_SHOPS:
		{
			if(response)
			{
				for(new i = 0, c = 0; i < sizeof(BizTypeData); i++)
				{
					if(BizTypeData[i][btGPSType] == 0 && c++ == listitem)
					{
						new lstring[512];
						SetPVarInt(playerid, "GPS:BizType", i);
						for(new b = 0; b < MaxBiz; b++)
						{
							if(BizInfo[b][bType] == i)
							{
								format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t[%.1f m.]\n", lstring, BizInfo[b][bName], GetDistanceFromMeToPoint(playerid, Arr3<BizInfo[b][bPos]>));
							}
						}
						format(string, sizeof(string), "Навигатор - %s", BizTypeData[i][btName]);
						return MyShowPlayerDialog(playerid, DMODE_GPS_BIZ, DIALOG_STYLE_TABLIST, string, lstring, "Выбрать", "Назад");
					}
				}
			}
			else
			{
				ShowDialog(playerid, DMODE_GPS);
			}
		}
		case DMODE_GPS_REST:
		{
			if(response)
			{
				for(new i = 0, c = 0; i < sizeof(BizTypeData); i++)
				{
					if(BizTypeData[i][btGPSType] == 1 && c++ == listitem)
					{
						new lstring[512];
						SetPVarInt(playerid, "GPS:BizType", i);
						for(new b = 0; b < MaxBiz; b++)
						{
							if(BizInfo[b][bType] == i)
							{
								format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s\t[%.1f m.]\n", lstring, BizInfo[b][bName], GetDistanceFromMeToPoint(playerid, Arr3<BizInfo[b][bPos]>));
							}
						}
						format(string, sizeof(string), "Навигатор - %s", BizTypeData[i][btName]);
						return MyShowPlayerDialog(playerid, DMODE_GPS_BIZ, DIALOG_STYLE_TABLIST, string, lstring, "Выбрать", "Назад");
					}
				}
			}
			else
			{
				ShowDialog(playerid, DMODE_GPS);
			}
		}
		case DMODE_GPS_BIZ:
		{
			new type = GetPVarInt(playerid, "GPS:BizType");
			if(response)
			{

				for(new i = 0, c = 0; i < MaxBiz; i++)
				{
					if(BizInfo[i][bType] == type && c++ == listitem)
					{
						ShowPlayerGPSPoint(playerid, Arr3<BizInfo[i][bPos]>);
						SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_GPS "%s '%s' отмечен(а) на радаре "SCOLOR_GPS"желтым маркером", BizTypeData[type][btName], BizInfo[i][bName]);
					}
				}
				Streamer_Update(playerid);
				DeletePVar(playerid, "GPS:BizType");
			}
			else
			{
				if(BizTypeData[type][btGPSType] == 0)		ShowDialog(playerid, DMODE_GPS_SHOPS);
				else if(BizTypeData[type][btGPSType] == 1)	ShowDialog(playerid, DMODE_GPS_REST);
				else if(BizTypeData[type][btGPSType] == 2)	ShowDialog(playerid, DMODE_GPS_VEH);
			}
		}
		case DMODE_GUNDEL:
		{
		    if(response && weaponid_new[playerid])
		    {
				if(!strlen(inputtext) || (strcmp(inputtext, "yes", true) && strcmp(inputtext, "да", true)))
					return ShowDialog(playerid, dialogid);

				new price = GetPVarInt(playerid, "Player:WaponBuy:Price");
				DeletePVar(playerid, "Player:WaponBuy:Price");
				if(MyGetPlayerMoney(playerid) < price)
				{
					return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не хватает денег для покупки этого оружия.");
				}
				new weapons, ammo;
			    GetPlayerWeaponData(playerid, GunParams[ weaponid_new[playerid] ][GUN_SLOT], weapons, ammo);
				if(ammo + GunParams[ weaponid_new[playerid] ][GUN_AMMO] >= 1000)
				{
				    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы купили максимальное количество патрон.");
				}
				MyGivePlayerMoney(playerid, -price);
				MyClearPlayerWeaponSlot(playerid, GunParams[ weaponid_new[playerid] ][GUN_SLOT]);
		    	//MyGivePlayerWeapon(playerid, weaponid_new[playerid], GunParams[ weaponid_new[playerid] ][GUN_AMMO]);
		    	Inv.GivePlayerWeapon(playerid, weaponid_new[playerid], GunParams[ weaponid_new[playerid] ][GUN_AMMO]);

		        new b = GetBizWhichPlayer(playerid);
	        	if(b != INVALID_DATA && BizInfo[b][bType] == BUS_AMMO)
	        	{
	        		BizSaleProds(b, GunParams[ weaponid_new[playerid] ][GUN_PRICE], 1);
	        	}
		    }
		    if(IsGang(PlayerInfo[playerid][pFaction]) && IsPlayerInRangeOfPoint(playerid, 4.0, Arr3<ActorInfo[A_EMMET][a_Pos]>))
		    {
		        ShowDialog(playerid, DNPC_EMMET);
		    }
		}
		case DMODE_SENDAD:
		{
			if(response)
			{
				new text[100];
				GetPVarString(playerid, "SendADText", text, sizeof(text));

				if(PlayerInfo[playerid][pPhoneNumber] == 0)	{
					return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам нужен телефон, чтобы отправить объявление.");
				}
				if(gAdvertCount >= MAX_ADVERT_COUNT)	{
					return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Очередь на объявления занята, попробуйте позже.");
				}
				if(MyGetPlayerMoney(playerid) < SENDAD_PRICE)	{
					return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
				}
				new slot = -1;
				for(new i; i < MAX_ADVERT_COUNT; i++)
				{
					if(gAdvert[i][adBusy] == false)	{
						slot = i;
						break;
					}
				}
				if(slot == -1)	{
					return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Очередь на объявления занята, попробуйте позже.");
				}
				gAdvertCount++;
				//new price = len * gAdvertPrice;
				format(gAdvert[slot][adSender], 24, "%s", ReturnPlayerName(playerid));
				gAdvert[slot][adPhone] = PlayerInfo[playerid][pPhoneNumber];
				format(gAdvert[slot][adText], 100, "%s", text);
				gAdvert[slot][adBusy] = true;
				gAdvert[slot][adTime] = 60 * 60;

				MyGivePlayerMoney(playerid, -SENDAD_PRICE);
				SendFormatMessage(playerid, COLOR_GREEN, string, "[Реклама]: Объявление отправлено: {FFFFFF}%s", text);
				SendClientMessage(playerid, COLOR_GREEN, "[Реклама]: Сообщение будет опубликовано после проверки репортерами");
				format(string, sizeof(string), "# | Пришло новое объявление от {FFFFFF}%s [id: %d]{33CCFF} | Подробнее: /edit", ReturnPlayerName(playerid), playerid);
				SendFactionMessage(F_NEWS, COLOR_LIGHTBLUE, string);
				SetPVarInt(playerid, "SendADTime", gettime());
			}
		}
		case DMODE_ADLIST:
		{
			if(response)
			{
				for(new i = 0, j = 0; i < MAX_ADVERT_COUNT; i++)
				{
					if(!gAdvert[i][adBusy])	continue;	
					if(j++ != listitem)	continue;
					if(pAdverReload[playerid] + 60 > gettime())
					{
					    format(string, sizeof(string), "До следующего редактирования объявления: ~y~%d сек", pAdverReload[playerid] + 60 - gettime());
					    ShowPlayerHint(playerid, string);
					    return ShowDialog(playerid, dialogid);
					}
					if(gAdvert[i][adStatus] == 1)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Это объявление редактируется другим репортером.");
						return ShowDialog(playerid, dialogid);
					}
					SetPVarInt(playerid, "EditAdID", i + 1);
					gAdvert[i][adStatus] = 1;
					return ShowDialog(playerid, DMODE_ADMENU);
				}
				return ShowDialog(playerid, dialogid);
			}
		}
		case DMODE_ADMENU:
		{
			new num = GetPVarInt(playerid,"EditAdID") - 1;
			if(response)
			{
				if(listitem == 0)
				{
					ShowDialog(playerid, dialogid);
				}
				else if(listitem == 1)
				{	//	Утвердить
					gAdvert[num][adTime] = gAdvertTime;
					gAdvertTime += 30;
					format(gAdvert[num][adCheker], MAX_PLAYER_NAME, "%s", ReturnPlayerName(playerid));
					format(gAdvert[num][adRang], MAX_PLAYER_NAME, "%s", GetPlayerRank(playerid));
					gAdvert[num][adStatus] = 2;
					pAdverReload[playerid] = gettime();
					ShowDialog(playerid, DMODE_ADLIST);
				}
				else if(listitem == 2)
				{	//	Редактировать
					ShowDialog(playerid, DMODE_ADEDIT);
				}
				else if(listitem == 3)
				{	//	Отправить администрации

					format(string, sizeof(string), "[AdmWrn] %s[%d] пожаловался на объявление от %s: {FFFFFF}%s", ReturnPlayerName(playerid), playerid, gAdvert[num][adSender], gAdvert[num][adText]);
					SendAdminMessage(COLOR_LIGHTRED, string);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Объявление отправлено администрации и удалено из очереди");

					strdel(gAdvert[num][adSender], 0, 24);
					gAdvert[num][adPhone] = 0;
					strdel(gAdvert[num][adText], 0, 100);
					strdel(gAdvert[num][adCheker], 0, 24);
					strdel(gAdvert[num][adRang], 0, 24);
					gAdvert[num][adBusy] = false;
					gAdvert[num][adStatus] = 0;
					gAdvert[num][adTime] = 0;
					gAdvertCount--;
					ShowDialog(playerid, DMODE_ADLIST);
				}
				else if(listitem == 4)
				{	//	Удалить
					format(string, sizeof(string), "# | %s %s[%d] удалил объявление: %s", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, gAdvert[num][adText]);
					SendFactionMessage(F_NEWS, COLOR_LIGHTRED, string);

					strdel(gAdvert[num][adSender], 0, 24);
					gAdvert[num][adPhone] = 0;
					strdel(gAdvert[num][adText], 0, 100);
					strdel(gAdvert[num][adCheker], 0, 24);
					strdel(gAdvert[num][adRang], 0, 24);
					gAdvert[num][adBusy] = false;
					gAdvert[num][adStatus] = 0;
					gAdvert[num][adTime] = 0;
					gAdvertCount--;
					ShowDialog(playerid, DMODE_ADLIST);
				}
			}
			else
			{
				gAdvert[num][adStatus] = 0;
				ShowDialog(playerid, DMODE_ADLIST);
			}
		}
		case DMODE_ADEDIT:
		{
			if(response)
			{
				new num = GetPVarInt(playerid, "EditAdID") - 1;
				format(gAdvert[num][adText], 100, "%s", inputtext);
				gAdvert[num][adTime] = gAdvertTime;
				gAdvertTime += 30;
				format(gAdvert[num][adCheker], MAX_PLAYER_NAME, "%s", ReturnPlayerName(playerid));
				format(gAdvert[num][adRang], MAX_PLAYER_NAME, "%s", GetPlayerRank(playerid));
				gAdvert[num][adStatus] = 2;
				gAdvert[num][adEdit] = true;
				pAdverReload[playerid] = gettime();
				ShowDialog(playerid, DMODE_ADLIST);
			}
			else
			{
				ShowDialog(playerid, DMODE_ADMENU);
			}
		}
		case DMODE_GIVERANK:
		{
			if(response)
			{
			    if(0 < PlayerInfo[playerid][pFaction] < sizeof(Faction))
			    {
				    new rank = listitem + 1, action[16];
			        new faction = PlayerInfo[playerid][pFaction];
			        new targetid = GetPVarInt(playerid, "giverank_targetid");

				    if(!IsPlayerLogged(targetid)) return 1;
				    if(PlayerInfo[targetid][pRank] == rank) return ShowDialog(playerid, dialogid);
				    else if(PlayerInfo[targetid][pRank] < rank) action = "повышает";
				    else if(PlayerInfo[targetid][pRank] > rank) action = "понижает";

				    PlayerInfo[targetid][pRank] = rank;
				    UpdatePlayerData(targetid, "rank", rank);
				    //MySetPlayerSkin(targetid, FactionSkins[faction][rank - 1]);
				    UpdatePlayerSkin(targetid);
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы %sе игрока %s до ранга %s", action, ReturnPlayerName(targetid), FactionRank[faction][rank-1]);
					SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s %s вас до ранга %s", GetPlayerRank(playerid), ReturnPlayerName(playerid), action, FactionRank[faction][rank-1]);

					format(string, sizeof(string), "%s giverank %s : %s (%d)", ReturnPlayerName(playerid), ReturnPlayerName(targetid), FactionRank[faction][rank-1], rank);
					log("Faction", string);

			    	if(gTargetid[playerid] != INVALID_PLAYER_ID)	{
			        	gTargetid[playerid] = INVALID_PLAYER_ID;
					}
			    }
			}
			else
			{
				if(gTargetid[playerid] != INVALID_PLAYER_ID)	{
		        	return ShowDialog(playerid, DMODE_REACTION);
				}
			}
		}
		case DMODE_RENTCAR:
		{
			if(response)
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
			    if(vehicleid > 0 && VehInfo[vehicleid][vRentOwner] == 0)
			    {
				    if(MyGetPlayerMoney(playerid) < VehInfo[vehicleid][vRentPrice])
				    {
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает денег на аренду автомобиля.");
				        return ShowDialog(playerid, dialogid);
				    }
				    if(GetPVarInt(playerid, "RentCar"))
				    {
				    	MySetVehicleToRespawn(GetPVarInt(playerid, "RentCar"));
				    }
			        VehInfo[vehicleid][vRentOwner] = PlayerInfo[playerid][pUserID];
			        VehInfo[vehicleid][vRentTime] = 3600;	//	аренда на час
			        SetPVarInt(playerid, "RentCar", vehicleid);
			        MyGivePlayerMoney(playerid, -VehInfo[vehicleid][vRentPrice]);
					TogglePlayerControllable(playerid, true);
					UpdateVehicleLabel(vehicleid);

			        if(CarInfo[vehicleid][cType] == C_TYPE_JOB)
			        {
			        	switch(CarInfo[vehicleid][cOwnerID])
			        	{
						#if defined	_job_job_busdriver_included
				        	case JOB_BUSDRIVER:
					        {
					        	BusDriverStatus[playerid] = 1;
								BusDriverVeh[playerid] = vehicleid;
					        	Dialog_Show(playerid, Dialog:BusDriver_Route);
					        }
					    #endif
					        case JOB_TRUCKER:
					        {
					        	ShowPlayerHint(playerid, "Нажмите ~y~~k~~TOGGLE_SUBMISSIONS~ ~w~чтобы открыть список заказов", 10000);
					        }
					        case JOB_TAXI:
					        {
					        	ShowPlayerHint(playerid, "~w~Нажмите ~y~~k~~TOGGLE_SUBMISSIONS~ ~w~чтобы выйти на дежурство таксистом", 5000);
					        }
					    }
			        }
			    }
			}
			else
			{
				TogglePlayerControllable(playerid, true);
				RemovePlayerFromVehicle(playerid);
			}
		}
		case DMODE_EXTEND_RENTCAR:
		{
			new v = GetPVarInt(playerid, "RentCar");
			TogglePlayerControllable(playerid, true);
			if(v)
			{
				if(response)
				{
					//	продлеваем на час
					if(MyGetPlayerMoney(playerid) < VehInfo[v][vRentPrice])
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно средств.");
					}
					else
					{
						MyGivePlayerMoney(playerid, -VehInfo[v][vRentPrice]);
						VehInfo[v][vRentTime] = 3600;
						SendFormatMessage(playerid, COLOR_GREEN, string, "[Аренда]: Вы продлили аренду %s на 1 час, приятного пользования!", VehParams[GetVehicleModel(v)-400][VEH_NAME]);
						return true;
					}

				}
				//	отмена аренды
				MySetVehicleToRespawn(v);
				SendFormatMessage(playerid, COLOR_LIGHTRED, string, "[Аренда]: Вы закончили аренду %s, обращайтесь еще!", VehParams[GetVehicleModel(v)-400][VEH_NAME]);
			}
		}
		case DMODE_DRUGSTORE:
		{
		    if(response)
		    {
		        new const amount = strval(inputtext);
		        if(!(0 < strlen(inputtext) < 10) || amount <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
			    if(DrugStore < amount)
			    {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На складе нет столько наркотиков.");
		            return ShowDialog(playerid, dialogid);
			    }
		        new const price = amount * PRICE_DRUG;
		        if(MyGetPlayerMoney(playerid) < price)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
		            return ShowDialog(playerid, dialogid);
		        }
				if(Inv.AddPlayerThing(playerid, THING_DRUGS, amount) == 0)
				{
					return ShowDialog(playerid, dialogid);
				}
		        DrugStore -= amount;
			    format(string, sizeof(string), "Наркотиков\n{FFFFFF}%d грамм", DrugStore);
			    UpdateDynamic3DTextLabelText(Drug3DText, 0xFFFF00FF, string);
		        MyGivePlayerMoney(playerid, -price);
		        ShowDialog(playerid, dialogid);
	        }
		}
		case DMODE_MAKELEADER:
		{
			if(response)
			{
			    format(string, 128, "%d %d", MakeleaderPlayerid[playerid], listitem + 1);
	            callcmd::makeleader(playerid, string);
			}
		}
		case DMODE_CHOOSEGANG:
		{
			if(!response) return 1;
			for(new idx, i = 0; i < sizeof(Faction); i++)
			{
			    if(i == 0 || IsGang(i)) idx++; else continue;
			    if(listitem == idx-1)
			    {
				    format(string, 4, "%d", i);
			    	callcmd::setowner(playerid, string);
			        break;
			    }
			}
		}
		case DMODE_OFFLINE_MESSAGE:
		{
			mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `offline_message` WHERE `user_id` = '%d'", PlayerInfo[playerid][pUserID]);
			mysql_query_ex(string);
		}
		case DMODE_HOSPITAL:
		{
			if(response)
			{
				if(listitem == 0)
				{
					if(MyGetPlayerMoney(playerid) < 100)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько наличных.");
						return ShowDialog(playerid, dialogid);
					}
					if(MyGetPlayerHealth(playerid) >= 100)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не нуждаетесь в медицинских услугах.");
						return ShowDialog(playerid, dialogid);
					}
					MySetPlayerHealth(playerid, 100);
					MyGivePlayerMoney(playerid, -100);
					SendClientMessage(playerid, COLOR_GREEN, "Вам были оказаны медицинские услуги!");
				}
				else if(listitem == 1)
				{
					if(MyGetPlayerMoney(playerid) < 50)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько наличных.");
						return ShowDialog(playerid, dialogid);
					}
					if(Inv.AddPlayerThing(playerid, THING_FIRSTAID, 1) == 0)
					{
		                return ShowDialog(playerid, dialogid);
					}
					MyGivePlayerMoney(playerid, -50);
				}
			}
		}
		case DMODE_BOXINFO:
		{
			gPickupTime[playerid] = 3;
		}
		case DMODE_FSTYLE:
		{
			if(response)
			{
				if((PlayerInfo[playerid][pLearnFStyle] >> listitem) & 0x1)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас уже изучен этот стиль боя.");
					return ShowDialog(playerid, dialogid);
				}
				if(PlayerInfo[playerid][pUpgrade] < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не хватает очков навыков.");
					return ShowDialog(playerid, dialogid);
				}
				PlayerInfo[playerid][pUpgrade]--;
				PlayerInfo[playerid][pLearnFStyle] |= (0x1 << listitem);
				UpdatePlayerBitData(playerid, "learn_fstyle", PlayerInfo[playerid][pLearnFStyle]);
				SendFormatMessage(playerid, COLOR_WHITE, string, "[Стиль боя]: Вы успешно изучили стиль боя: %s", FightStyleNames[listitem + 1]);
				SuccesAnim(playerid);
				ShowDialog(playerid, dialogid);
			}
			else gPickupTime[playerid] = 3;
		}
		//---	admin
		case DADMIN_TICKETS:
		{
			if(response)
			{
				for(new i = 0, j = 0; i < MAX_ASK_COUNT; i++)
				{
					if(!gAsk[i][askBusy])	continue;
					if(j++ != listitem)		continue;
					if(gAsk[i][askStatus])
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Это вопрос уже рассматривается.");
						return ShowDialog(playerid, dialogid);
					}
					SetPVarInt(playerid, "Admin:InTicket", i);
					return ShowDialog(playerid, DADMIN_TICKET_MENU);
				}
				return ShowDialog(playerid, dialogid);
			}
		}
		case DADMIN_TICKET_MENU:
		{
			new num = GetPVarInt(playerid, "Admin:InTicket");
			if(response)
			{
				if(listitem == 0)
				{
					return ShowDialog(playerid, dialogid);
				}
				else if(listitem == 1)
				{	//	Ответить
					return ShowDialog(playerid, DADMIN_TICKET_ANS);
				}
				else if(listitem == 2)
				{	//	Удалить
					format(string, sizeof(string), "%s %s[%d] удалил вопрос %s: %s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(gAsk[num][askSender]), gAsk[num][askText]);
					SendAdminMessage(COLOR_ADMIN, string);

					gAsk[num][askSender] 	= 0;
					strdel(gAsk[num][askText], 0, 100);
					gAsk[num][askBusy]		= false;
					gAsk[num][askStatus]	= false;
					gAskCount--;
					ShowDialog(playerid, DADMIN_TICKETS);
				}
			}
			else
			{
				gAsk[num][askStatus] = false;
				DeletePVar(playerid, "Admin:InTicket");
				ShowDialog(playerid, DADMIN_TICKETS);
			}
		}
		case DADMIN_TICKET_ANS:
		{
			if(response)
			{
				new num = GetPVarInt(playerid, "Admin:InTicket");
				new giveplayerid = gAsk[num][askSender];
			    if(!IsPlayerLogged(giveplayerid))
			    {
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
			    }
			    else
			    {
					SendFormatMessage(giveplayerid, COLOR_ANSWER, string, "%s %s отвечает: {FFFFFF}%s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), inputtext);
					format(string, sizeof(string), "%s %s[%d]: {FFFFFF}%s[%d], %s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, inputtext);
					SendAdminMessage(COLOR_ANSWER, string, 1);
					PlayerPlaySound(giveplayerid, 6401, 0, 0, 0);
			    }
				gAsk[num][askSender] 	= 0;
				strdel(gAsk[num][askText], 0, 100);
				gAsk[num][askBusy]		= false;
				gAsk[num][askStatus]	= false;
				gAskCount--;
				DeletePVar(playerid, "Admin:InTicket");
				ShowDialog(playerid, DADMIN_TICKETS);
			}
			else
			{
				ShowDialog(playerid, DADMIN_TICKET_MENU);
			}
		}
		//---   server
		case DSERV_MAIN:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: ShowDialog(playerid, DSERV_STATS);	// Статистика сервера
		            case 1: ShowDialog(playerid, DSERV_ADMINS); // Список администраторов
		            case 2: ShowDialog(playerid, DSERV_LEADERS);// Список лидеров
		        }
		    }
		}
		case DSERV_STATS:
		{
		    if(!response) ShowDialog(playerid, DSERV_MAIN);
		}
		case DSERV_ADMINS:
		{
		    if(!response) return ShowDialog(playerid, DSERV_MAIN);
		    else if(GetPlayerAdmin(playerid) >= ADMIN_GADMIN)
		    {
				mysql_format(g_SQL, string, sizeof(string), "SELECT `id`,`admin` FROM `players` WHERE `admin` > 0 ORDER BY `admin` DESC, `online` DESC, `exitunix` DESC LIMIT %d,1", listitem);
				new Cache:result = mysql_query(g_SQL, string);
				if(cache_num_rows())
				{
				    new id, admin;
				    cache_get_value_index_int(0, 0, id);
				    cache_get_value_index_int(0, 1, admin);
				    if(GetPlayerAdmin(playerid) <= admin)
				    {
				        ShowDialog(playerid, dialogid);
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете выбрать админа вашего уровня или выше.");
				    }
				    else
				    {
						SetPVarInt(playerid, "DSERV:ADMINS:ID", id);
						ShowDialog(playerid, DSERV_ADMINS_ACTION);
					}
				}
				cache_delete(result);
		    }
		}
		case DSERV_ADMINS_ACTION:
		{
		    if(response && GetPlayerAdmin(playerid) >= ADMIN_GADMIN)
		    {
				if(!strlen(inputtext) || (strcmp(inputtext, "uninvite", true) && strcmp(inputtext, "уволить", true)))
				{
					return ShowDialog(playerid, dialogid);
				}
			    new id = GetPVarInt(playerid, "DSERV:ADMINS:ID");
				mysql_format(g_SQL, string, sizeof(string), "SELECT `username`, `online`, `admin` FROM `players` WHERE `id` = '%d'", id);
				new Cache:result = mysql_query(g_SQL, string);
				if(cache_num_rows() == 0)
				{
					cache_delete(result);
					DeletePVar(playerid, "DSERV:ADMINS:ID");
				    return ShowDialog(playerid, DSERV_ADMINS);
				}
				new name[32], online, admin;
				cache_get_value_index(0, 0, name);
				cache_get_value_index_int(0, 1, online);
				cache_get_value_index_int(0, 2, admin);
				cache_delete(result);

			    if(GetPlayerAdmin(playerid) <= admin)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете разжаловать этого админа.");
					DeletePVar(playerid, "DSERV:ADMINS:ID");
				    return ShowDialog(playerid, DSERV_ADMINS);
			    }
				if(IsPlayerLogged(online))
				{
			    	format(string, sizeof(string), "%d 0", online);
					return callcmd::makeadmin(playerid, string);
				}
				else
				{
					format(string, sizeof(string), "UPDATE `players` SET `admin` = '0' WHERE `id` = '%d'", id);
					mysql_query_ex(string);

	    			format(string, sizeof(string), "[Сервер]: %s %s снял с вас админку", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid));
	    			SendOfflineMessage(id, string);

					format(string, sizeof(string), "[AdmCmd]: %s %s[%d] разжаловал %sа %s (offline)", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, getAdminStatus(admin), name);
					SendAdminMessage(COLOR_ADMIN, string);
				}
		    }
		    ShowDialog(playerid, DSERV_ADMINS);
			DeletePVar(playerid, "DSERV:ADMINS:ID");
		}
		case DSERV_LEADERS:
		{
		    if(!response) return ShowDialog(playerid, DSERV_MAIN);
		    else if(GetPlayerAdmin(playerid) >= ADMIN_GADMIN)
		    {
		    }
		}
		case DSERV_LEADERS_ACTION:
		{
		}
		//---   faction
		case DFACT_MEMBERS:
		{
		    if(response && IsPlayerLeader(playerid))
		    {
				mysql_format(g_SQL, string, sizeof(string), "SELECT `id` FROM `players` WHERE `faction` = '%d' ORDER BY `rank` DESC, `online` DESC, `exitunix` DESC LIMIT %d,1", PlayerInfo[playerid][pFaction], listitem);
				new Cache:result = mysql_query(g_SQL, string);
				if(cache_num_rows())
				{
				    new id;
				    cache_get_value_index_int(0, 0, id);
				    if(PlayerInfo[playerid][pUserID] == id)
				    {
				        ShowDialog(playerid, dialogid);
				    }
				    else
				    {
						SetPVarInt(playerid, "DFACT:MEMBERS:ID", id);
						ShowDialog(playerid, DFACT_MEMBERS_ACTION);
					}
				}
				cache_delete(result);
			}
		}
		case DFACT_MEMBERS_ACTION:
		{
		    new id = GetPVarInt(playerid, "DFACT:MEMBERS:ID");
		    if(response && IsPlayerLeader(playerid))
		    {
				if(!strlen(inputtext) || (strcmp(inputtext, "uninvite", true) && strcmp(inputtext, "уволить", true)))
				{
					return ShowDialog(playerid, dialogid);
				}
				mysql_format(g_SQL, string, sizeof(string), "SELECT `username`, `online` FROM `players` WHERE `id` = '%d'", id);
				new Cache:result = mysql_query(g_SQL, string);
				if(cache_num_rows() == 0)
				{
					cache_delete(result);
					DeletePVar(playerid, "DFACT:MEMBERS:ID");
				    return ShowDialog(playerid, DFACT_MEMBERS);
				}
				new name[32], online;
				cache_get_value_index(0, 0, name);
				cache_get_value_index_int(0, 1, online);
				cache_delete(result);
				
				if(IsPlayerLogged(online))
				{
			    	valstr(string, online);
					return callcmd::uninvite(playerid, string);
				}
				else
				{
					format(string, sizeof(string), "UPDATE `players` SET `faction` = '0' AND `rank` = '0' WHERE `id` = '%d'", id);
					mysql_query_ex(string);

	    			format(string, sizeof(string), "[Фракция]: %s %s выгнал вас из фракции", GetPlayerRank(playerid), ReturnPlayerName(playerid));
	    			SendOfflineMessage(id, string);

					SendFormatMessage(playerid, COLOR_LIGHTRED, string, "Вы выгнали %s из организации", name);
					format(string, sizeof(string), "%s uninvite %s (offline): %s", ReturnPlayerName(playerid), name, GetFactionName(PlayerInfo[playerid][pFaction]));
					log("Faction", string);
				}
		    }
		    ShowDialog(playerid, DFACT_MEMBERS);
			DeletePVar(playerid, "DFACT:MEMBERS:ID");
		}
		//---	mission
		case DMIS_TRAINING1:
		{
			mission_cpnum[playerid] = MySetPlayerCheckpoint(playerid, CPMODE_MISSION, 2166.36, -1155.36, 24.86, 2.0);
			mission_step[playerid] = 1;
			if(!isRus(playerid))
			{
				format(string, sizeof(string), "{FFFFFF}Добегите до аппарата и вызовите такси для %sа", ActorInfo[A_NEWBIE][a_Name]);
				MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Задание", string, "Понятно", "", 0);
			}
			else
			{
				format(string, sizeof(string), "Добегите до аппарата и вызовите такси для ~y~%sа", ActorInfo[A_NEWBIE][a_Name]);
				SendMissionMessage(playerid, string, 5000, true);
			}
		}
		case DMIS_TRAINING2:
		{
			StoryMissionComplete(playerid, MIS_SOURCE_TRAINING, 200, 0);
		}
		//---
		case DWAREHOUSE_MAIN:
		{
		    if(!response)
		    {
			    DeletePVar(playerid, "WH:faction");
			    DeletePVar(playerid, "WH:takeitem");
			    gPickupTime[playerid] = 3;
			    return 1;
		    }
		    if(listitem == 0)
		    {// Положить на склад
				ShowDialog(playerid, DWAREHOUSE_INV);
		        return 1;
		    }
		    new const faction = GetPVarInt(playerid, "WH:faction");
		    if(listitem == 1 && PlayerInfo[playerid][pRank] < FactionRankMax[faction] - 1)
	        {// Деньги
			    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Доступ к деньгам требует ранг %s (%d).", FactionRank[faction][ FactionRankMax[faction] - 1-1 ], FactionRankMax[faction] - 1);
	            return ShowDialog(playerid, dialogid);
	        }
		    else if(PlayerInfo[playerid][pRank] < 3)
		    {
			    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Этот предмет требует ранг %s (3).", FactionRank[faction][3-1]);
	            return ShowDialog(playerid, dialogid);
		    }
	        SetPVarInt(playerid, "WH:takeitem", listitem);
	        ShowDialog(playerid, DWAREHOUSE_TAKE);
		}
		case DWAREHOUSE_TAKE:
		{
		    if(!response) return ShowDialog(playerid, DWAREHOUSE_MAIN);

			new const faction = GetPVarInt(playerid, "WH:faction");
			if(PlayerInfo[playerid][pFaction] != faction) return 1;

	        new const value = strval(inputtext);
	        if(!(0 < strlen(inputtext) < 10) || value <= 0)
	        {
	            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
	            return ShowDialog(playerid, dialogid);
	        }
	        new color = COLOR_LIGHTPURPLE, colorRGB[] = "D24A9C";
            if(IsGang(faction))
			{
				color = GetGangColor(faction);
				strput(colorRGB, GetGangColorRGB(faction));
			}
		    switch(GetPVarInt(playerid, "WH:takeitem"))
		    {
		        case 1:// Деньги
		        {
			        if(PlayerInfo[playerid][pRank] < FactionRankMax[faction] - 1)
			        {
					    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет доступа к складу.");
			            return ShowDialog(playerid, DWAREHOUSE_MAIN);
			        }
		            if(Warehouse[faction][WH_MONEY] < value)
		            {
		                SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На складе нет столько денег.");
		                return ShowDialog(playerid, dialogid);
		            }
		            MyGivePlayerMoney(playerid, value);
		            Warehouse[faction][WH_MONEY] -= value;
		            format(string, sizeof(string), "# | %s {FFFFFF}%s[%d]{%s} забирает со склада {FFFFFF}%d$", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, colorRGB, value);
		            SendFactionMessage(faction, color, string);
					format(string, sizeof(string), "%s from %s : %d$", ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), value);
					log("Warehouses", string);
		        }
		        case 2:// Наркотики
		        {
				    if(PlayerInfo[playerid][pRank] < 3)
				    {
					    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Этот предмет требует ранг %s (3).", FactionRank[faction][3-1]);
			            return ShowDialog(playerid, DWAREHOUSE_MAIN);
				    }
		            if(Warehouse[faction][WH_DRUGS] < value)
		            {
		                SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На складе нет столько наркотиков.");
		                return ShowDialog(playerid, dialogid);
		            }
			    	if(Inv.AddPlayerThing(playerid, THING_DRUGS, value) == 0)
					{
						return ShowDialog(playerid, dialogid);
					}
		            Warehouse[faction][WH_DRUGS] -= value;
		            format(string, sizeof(string), "# | %s {FFFFFF}%s[%d]{%s} забирает со склада {FFFFFF}%d г.{%s} наркотиков", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, colorRGB, value, colorRGB);
		            SendFactionMessage(faction, color, string);
					format(string, sizeof(string), "%s from %s : %d drugs", ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), value);
					log("Warehouses", string);
		        }
		        case 3:// Материалы
		        {
				    if(PlayerInfo[playerid][pRank] < 3)
				    {
					    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Этот предмет требует ранг %s (3).", FactionRank[faction][3-1]);
			            return ShowDialog(playerid, DWAREHOUSE_MAIN);
				    }
		            if(Warehouse[faction][WH_MATS] < value)
		            {
		                SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На складе нет столько материалов.");
		                return ShowDialog(playerid, dialogid);
		            }
			    	if(Inv.AddPlayerThing(playerid, THING_GUN_MATS, value) == 0)
					{
						return ShowDialog(playerid, dialogid);
					}
		            Warehouse[faction][WH_MATS] -= value;
		            format(string, sizeof(string), "# | %s {FFFFFF}%s[%d]{%s} забирает со склада {FFFFFF}%d шт.{%s} материалов", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, colorRGB, value, colorRGB);
		            SendFactionMessage(faction, color, string);
					format(string, sizeof(string), "%s from %s : %d mats", ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), value);
					log("Warehouses", string);
		        }
		        default:
				{
				    if(PlayerInfo[playerid][pRank] < 3)
				    {
					    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Этот предмет требует ранг %s (3).", FactionRank[faction][3-1]);
			            return ShowDialog(playerid, DWAREHOUSE_MAIN);
				    }
				    new bool:founded = false;
				    new const item = GetPVarInt(playerid, "WH:takeitem");
				    for(new idx, s = 0; s < WH_GUN_MAX; s++)
				    {
				        if(Warehouse[faction][WH_GUN][s] != 0 && idx++ == item - 4)
				        {
				            if(Warehouse[faction][WH_GUN][s] < value)
				            {
				                SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На складе нет столько патрон для этого оружия.");
				                return ShowDialog(playerid, dialogid);
				            }
				            new weaponid = GetWarehouseWeaponid(s);
				            Warehouse[faction][WH_GUN][s] -= value;
				            Inv.GivePlayerWeapon(playerid, weaponid, value);
				            //MyGivePlayerWeapon(playerid, weaponid, value);
				            format(string, sizeof(string), "# | %s {FFFFFF}%s[%d]{%s} забирает со склада {FFFFFF}%s (%d птр.)", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, colorRGB, ReturnWeaponName(weaponid), value);
				            SendFactionMessage(faction, color, string);
							format(string, sizeof(string), "%s from %s : %s (%d patr.)", ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), ReturnWeaponName(weaponid), value);
							log("Warehouses", string);

							founded = true; break;
				        }
				    }
				    if(founded == false) return ShowDialog(playerid, DWAREHOUSE_MAIN);
				}
		    }
		    SaveWarehouse(faction);
		    ShowDialog(playerid, DWAREHOUSE_MAIN);
		}
		case DWAREHOUSE_INV:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "WH:giveitem");
		        return ShowDialog(playerid, DWAREHOUSE_MAIN);
		    }
	        SetPVarInt(playerid, "WH:giveitem", listitem);
	        ShowDialog(playerid, DWAREHOUSE_GIVE);
		}
		case DWAREHOUSE_GIVE:
		{
		    if(!response) return ShowDialog(playerid, DWAREHOUSE_INV);

	        new const value = strval(inputtext);
	        if(!(0 < strlen(inputtext) < 10) || value <= 0)
	        {
	            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
	            return ShowDialog(playerid, dialogid);
	        }
	        new color = COLOR_LIGHTPURPLE, colorRGB[] = "D24A9C";
			new const faction = GetPVarInt(playerid, "WH:faction");
            if(IsGang(faction))
			{
				color = GetGangColor(faction);
				strput(colorRGB, GetGangColorRGB(faction));
			}
		    switch(GetPVarInt(playerid, "WH:giveitem"))
		    {
		        case 0:// Деньги
		        {
		            if(MyGetPlayerMoney(playerid) < value)
		            {
		                SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
		                return ShowDialog(playerid, dialogid);
		            }
			    	if(Warehouse[faction][WH_MONEY] + value > 500000)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На склад не поместится столько денег.");
		                return ShowDialog(playerid, DWAREHOUSE_MAIN);
					}
		            MyGivePlayerMoney(playerid, -value);
		            Warehouse[faction][WH_MONEY] += value;
		            format(string, sizeof(string), "# | %s {FFFFFF}%s[%d]{%s} кладет на склад {FFFFFF}%d$", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, colorRGB, value);
		            SendFactionMessage(faction, color, string);
					format(string, sizeof(string), "%s to %s : %d$", ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), value);
					log("Warehouses", string);
		        }
		        case 1:// Наркотики
		        {
		            if(Inv.GetThing(playerid, THING_DRUGS) < value)
		            {
		                SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько наркотиков.");
		                return ShowDialog(playerid, dialogid);
		            }
			    	if(Warehouse[faction][WH_DRUGS] + value > 10000)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На склад не поместится столько наркотиков.");
		                return ShowDialog(playerid, DWAREHOUSE_MAIN);
					}
					Inv.PlayerDeleteThing(playerid, THING_DRUGS, 0, value);
		            Warehouse[faction][WH_DRUGS] += value;
		            format(string, sizeof(string), "# | %s {FFFFFF}%s[%d]{%s} кладет на склад {FFFFFF}%d г.{%s} наркотиков", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, colorRGB, value, colorRGB);
		            SendFactionMessage(faction, color, string);
					format(string, sizeof(string), "%s to %s : %d drugs", ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), value);
					log("Warehouses", string);
		        }
		        case 2:// Материалы
		        {
		            if(Inv.GetThing(playerid, THING_GUN_MATS) < value)
		            {
		                SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько материалов.");
		                return ShowDialog(playerid, dialogid);
		            }
			    	if(Warehouse[faction][WH_MATS] + value > 10000)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На склад не поместится столько материалов.");
		                return ShowDialog(playerid, DWAREHOUSE_MAIN);
					}
					Inv.PlayerDeleteThing(playerid, THING_GUN_MATS, 0, value);
		            Warehouse[faction][WH_MATS] += value;
		            format(string, sizeof(string), "# | %s {FFFFFF}%s[%d]{%s} кладет на склад {FFFFFF}%d шт.{%s} материалов", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, colorRGB, value, colorRGB);
		            SendFactionMessage(faction, color, string);
					format(string, sizeof(string), "%s to %s : %d mats", ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), value);
					log("Warehouses", string);
		        }
		        default:
				{
					// Оружие
					new bool:founded = false;
				    new const item = GetPVarInt(playerid, "WH:giveitem");
					for(new idx, slot = 2, weaponid, ammo; slot < 8; slot++)
					{   // Поиск оружия в инвентаре игрока
						MyGetPlayerWeapon(playerid, slot, weaponid, ammo);
					    if(weaponid == 0 && ammo == 0)	continue;

				        new s = GetWarehouseWeaponSlot(weaponid);
				        if(s != -1 && idx++ == item - 3)
				        {   // Получение слота оружия на складе (-1 если не может лежать)
				            if(ammo < value)
				            {
				                SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько патрон для этого оружия.");
				                return ShowDialog(playerid, dialogid);
				            }
					    	if(Warehouse[faction][WH_GUN][s] + value > 10000)
							{
								SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На склад не поместится столько материалов.");
				                return ShowDialog(playerid, DWAREHOUSE_MAIN);
							}
				            Warehouse[faction][WH_GUN][s] += value;
							MySetPlayerWeapon(playerid, weaponid, (ammo - value));
				            format(string, sizeof(string), "# | %s {FFFFFF}%s[%d]{%s} кладет на склад {FFFFFF}%s (%d птр.)", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, colorRGB, ReturnWeaponName(weaponid), value);
				            SendFactionMessage(faction, color, string);
							format(string, sizeof(string), "%s to %s : %s (%d patr.)", ReturnPlayerName(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), ReturnWeaponName(weaponid), value);
							log("Warehouses", string);

							founded = true; break;
				        }
					}
				    if(founded == false) return ShowDialog(playerid, DWAREHOUSE_INV);
				}
		    }
		    SaveWarehouse(faction);
		    ShowDialog(playerid, DWAREHOUSE_MAIN);
		}
	    //	job
	    case DJOB_GUNDEAL_MATS:
	    {
	    	if(response)
			{
				if(IsMafia(PlayerInfo[playerid][pFaction]))//Job.GetPlayerJob(playerid) != JOB_GUNDEAL)
				{
					return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не торговец оружием.");
				}
				new count = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || count <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				new price = count * 50;
				if(MyGetPlayerMoney(playerid) < price)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
                	return ShowDialog(playerid, dialogid);
				}
				if(Inv.AddPlayerThing(playerid, THING_METALL, count))
				{
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы купили %d пакетов с металлом за $%d", count, price);
		    		MyGivePlayerMoney(playerid, -price);
		    	}
		    	else
		    	{
		            return ShowDialog(playerid, dialogid);
				}
			}
			gPickupTime[playerid] = 3;
	    }
	    case DJOB_GUNDEAL_GUN:
	    {
	    	if(response)
	    	{
	    		if(IsMafia(PlayerInfo[playerid][pFaction]))//Job.GetPlayerJob(playerid) != JOB_GUNDEAL)
	    		{
	    			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не торговец оружием.");
	    		}
	    		if(!(0 <= listitem < sizeof(GunDealWeapons)))
	    		{
	    			return false;
	    		}
	    		new weapon = GunDealWeapons[listitem];
	    		if(Inv.GetThing(playerid, THING_GUN_MATS) < GunParams[weapon][GUN_MATS])
	    		{
	    			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Недостаточно материалов.");
	    			return ShowDialog(playerid, dialogid);
	    		}
	  			SetPVarInt(playerid, "GunDealMats", GunParams[weapon][GUN_MATS]);
	  			SetPVarInt(playerid, "GunDealWeapon", weapon);
	  			SetPVarInt(playerid, "GunDealAmmo", GunParams[weapon][GUN_AMMO]);

				new bool:comb[5];
				_GenerateComb(sizeof(comb), comb);
				SetPlayerComb(playerid, COMB_CREATE_GUN, sizeof(comb), comb, true);
				MyApplyAnimation(playerid, "INT_SHOP", "shop_cashier", 4.1, 1, 0, 0, 1, 11000);
				HidePlayerInventory(playerid);
	    	}
	    }
	    case DJOB_DRUGDEAL_MATS:
	    {
	    	if(response)
			{
				if(IsMafia(PlayerInfo[playerid][pFaction]))//Job.GetPlayerJob(playerid) != JOB_DRUGDEAL)	{
				{
					return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не наркодиллер.");
				}
				new count = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || count <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				new price = count * 100;
				if(MyGetPlayerMoney(playerid) < price)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
                	return ShowDialog(playerid, dialogid);
				}
				if(Inv.AddPlayerThing(playerid, THING_DRUGS_MATS, count))
				{
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы купили %d пакетов травы за $%d", count, price);
		    		MyGivePlayerMoney(playerid, -price);
		    	}
		    	else
		    	{
		            return ShowDialog(playerid, dialogid);
				}
			}
			gPickupTime[playerid] = 3;
	    }
	    case DJOB_MECHANIC:
	    {
	    	if(response)
	    	{
	    		if(Job.GetPlayerJob(playerid) != JOB_MECHANIC)
				{
					return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не работаете механиком.");
				}
				if(Job.GetPlayerNowWork(playerid) == JOB_MECHANIC)
				{
					Job.ClearPlayerNowWork(playerid);
					ReloadPlayerSkin(playerid);
					format(string, sizeof(string), "Механик %s[%d] уходит с дежурства", ReturnPlayerName(playerid), playerid);
    				SendJobMessage(JOB_MECHANIC, COLOR_LIGHTBLUE, string);
				}
				else
				{
					if(Job.SetPlayerNowWork(playerid, JOB_MECHANIC))
					{
						MySetPlayerSkin(playerid, 50, false);
						format(string, sizeof(string), "[Сервис]: Механик {FFFFFF}%s[%d]{F5DEB3} вышел на дежурство {FFFFFF}(/call 600)", ReturnPlayerName(playerid), playerid);
						MySendClientMessageToAll(COLOR_YELLOW2, string);
					}
				}
	    	}
	    	gPickupTime[playerid] = 3;
	    }
		//---
		case DMENU_MAIN:
		{
			if(response)
			{
				openWithMenu[playerid] = true;
				new item = 0;
				//if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] < 4 && listitem == item++)
				//{
				//	ShowDialog(playerid, DMENU_TASKS);		// Задачи
				//}
				if(listitem == item++)	ShowStats(playerid, playerid);			// Статистика
				if(listitem == item++)	ShowDialog(playerid, DMENU_LEVELING);	// Прокачка
			#if defined _player_phone_included
				if(PlayerInfo[playerid][pPhoneNumber] && listitem == item++)
				{
					callcmd::phone(playerid, "");
				}
			#endif	
			    if(listitem == item++)	ShowDialog(playerid, DMENU_SETTING);	// Настройки
			    if(listitem == item++)	ShowDialog(playerid, DMENU_PROTECTION);	// Безопасность
			    //if(listitem == item++)  ShowDialog(playerid, dialogid);		// Имущество (не реализовано)
			    if(listitem == item++)	ShowDialog(playerid, DMENU_DONATE);		// Доп. услуги
				if(listitem == item++)  // Ввод бонус кода
				{
				    if(PlayerInfo[playerid][pLevel] < 4)
				    {
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Бонус код можно вводить только с 4го уровня.");
				        return ShowDialog(playerid, dialogid);
				    }
					ShowDialog(playerid, DMENU_BONUS);
				}
				if(listitem == item++)	ShowDialog(playerid, DMENU_CONTACT);    // Связь с администрацией
			}
			else openWithMenu[playerid] = false;
		}
		case DMENU_TASKS:
		{
			if(response)
			{
				for(new i = 1; i < sizeof(StartMissionData); i++)
				{
					if(listitem + 1 == i)
					{
						return MyShowPlayerDialog(playerid, DMENU_TASKS_INFO, DIALOG_STYLE_MSGBOX, StartMissionData[i][m_Title], StartMissionData[i][m_Desc], "Назад", "", 0);
					}
				}
			}
			else
			{
				return ShowDialog(playerid, DMENU_MAIN);
			}
		}
		case DMENU_TASKS_INFO:
		{
			return ShowDialog(playerid, DMENU_TASKS);
		}
		case DMENU_STATS:
		{
		    if(response == 0 && openWithMenu[playerid])
		    {
		    	return ShowDialog(playerid, DMENU_MAIN);
			}
		}
		case DMENU_LEVELING:
		{
			if(response)
			{
				if(listitem == 0)		// Скиллы
				{
					ShowDialog(playerid, DMENU_SKILL);
				}
				else if(listitem == 1)	// Владение оружием
				{
					ShowDialog(playerid, DMENU_WEAPON_SKILL);
				}
				else if(listitem == 2)	// Улучшения
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "В разработке.");
					ShowDialog(playerid, dialogid);
					//ShowDialog(playerid, DMENU_ADVANCE);
				}

			#if defined _player_achieve_included
				else if(listitem == 3)	// Достижения
				{
					Dialog_Show(playerid, Dialog:Achieve_Main);
				}
			#endif	
			}
		    else if(openWithMenu[playerid])
		    {
		    	ShowDialog(playerid, DMENU_MAIN);
			}
		}
		case DMENU_SKILL:
		{
			ShowDialog(playerid, DMENU_LEVELING);
		}
		case DMENU_WEAPON_SKILL:
		{
			ShowDialog(playerid, DMENU_LEVELING);
		}
		case DMENU_ADVANCE:
		{
			if(response)
			{
				ShowDialog(playerid, DMENU_LEVELING);
			}
			else
			{
				ShowDialog(playerid, DMENU_LEVELING);
			}
		}
		case DMENU_DONATE:
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0: ShowDialog(playerid, DMENU_HOWGETCOIN);     // Как получить монеты
				    case 1: ShowDialog(playerid, DMENU_COINTOVIP);		// Купить Премиум аккаунт
				    case 2:	//	Покупка номера
				    {
				    	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "В разработке.");
				    	return ShowDialog(playerid, DMENU_DONATE);
				    }
				    case 3:	//	Покупка exp
				    {
				    	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "В разработке.");
				    	return ShowDialog(playerid, DMENU_DONATE);
				    }
				    case 4: ShowDialog(playerid, DMENU_COINTOMONEY);	// Монеты в доллары
				    case 5: ShowDialog(playerid, DMENU_COINTOUPGRADE);	// Монеты в очки апгрейда
				    case 6: ShowDialog(playerid, DMENU_COINTOLAW);		// Монеты в законопослушность
				}
		    }
		    else if(openWithMenu[playerid])
		    {
		    	ShowDialog(playerid, DMENU_MAIN);
			}
		}
		case DMENU_COINTOVIP:
		{
			if(response)
	        {
		        new const week = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || week <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.a");
		            return ShowDialog(playerid, dialogid);
		        }
				new coins = week * CoinForVIP;
		        if(coins > GetPlayerCoins(playerid))
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам не хватает монет для покупки.");
		            return ShowDialog(playerid, dialogid);
		        }
		        PlayerInfo[playerid][pVip] = 1;
		        if(PlayerInfo[playerid][pVipUNIX] > unixtime())
		        {
		        	PlayerInfo[playerid][pVipUNIX] += 604800 * week;
		        	SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_DONATE "Вы успешно продлили Премиум на {33AA33}%d {FFFFFF}недели", week);
		        }
		        else
		        {
		        	PlayerInfo[playerid][pVipUNIX] = unixtime() + 604800 * week;
		        	SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_DONATE "Вы успешно оплатили Премиум на {33AA33}%d {FFFFFF}недели", week);
		        }
		        mysql_format(g_SQL, string, sizeof(string), "SELECT DATE_FORMAT(FROM_UNIXTIME('%d'), '%d.%m.%Y %H:%i')", PlayerInfo[playerid][pVipUNIX]);
				new Cache:result = mysql_query(g_SQL, string);
				cache_get_value_index(0, 0, string);
				cache_delete(result);

		        SendFormatMessage(playerid, COLOR_WHITE, string, "Дата окончания Премиум аккаунт: {9ACD32}%s", string);
		        GivePlayerCoins(playerid, -coins);
		        UpdatePlayerStatics(playerid);
		        PlayerPlaySound(playerid, 36205, 0.0, 0.0, 0.0);
		        SuccesAnim(playerid);
	        }
	        else ShowDialog(playerid, DMENU_DONATE);
		}
		case DMENU_HOWGETCOIN:
		{
		    ShowDialog(playerid, DMENU_DONATE);
		}
	    case DMENU_COINTOMONEY:
	    {
	        if(response)
	        {
		        new const coins = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || coins <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
		        if(coins > GetPlayerCoins(playerid))
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для такого перевода вам не хватает монет.");
		            return ShowDialog(playerid, dialogid);
		        }
		        new const money = coins * MoneyForCoin;
		        GivePlayerCoins(playerid, -coins);
		        MyGivePlayerMoney(playerid, money);
		        UpdatePlayerStatics(playerid);
		        SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_DONATE "Вы успешно обменяли {33AA33}%d{FFFFFF} монет на {33AA33}%d$", coins, money);
		        ShowDialog(playerid, dialogid);
	        }
	        else ShowDialog(playerid, DMENU_DONATE);
	    }
	    case DMENU_COINTOUPGRADE:
	    {
	        if(response)
	        {
		        new const upgrades = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || upgrades <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
		        new const coins = upgrades * CoinForUpgrade;
		        if(coins > GetPlayerCoins(playerid))
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для такого перевода вам не хватает монет.");
		            return ShowDialog(playerid, dialogid);
		        }
		        GivePlayerCoins(playerid, -coins);
				PlayerInfo[playerid][pUpgrade] += upgrades;
		        UpdatePlayerStatics(playerid);
		        SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_DONATE "Вы успешно обменяли {33AA33}%d{FFFFFF} монет на {33AA33}%d{FFFFFF} очков апгрейда", coins, upgrades);
		        ShowDialog(playerid, dialogid);
	        }
	        else ShowDialog(playerid, DMENU_DONATE);
	    }
	    case DMENU_COINTOLAW:
	    {
	    	if(response)
	        {
	        	new const law = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || law <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				if(PlayerInfo[playerid][pLaw] + law > 50)
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Это значение превысит лимит законопослушности.");
		            return ShowDialog(playerid, dialogid);
				}
		        new const coins = law * CoinForLaw;
		        if(coins > GetPlayerCoins(playerid))
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для такого перевода вам не хватает монет.");
		            return ShowDialog(playerid, dialogid);
		        }
		        GivePlayerCoins(playerid, -coins);
				PlayerInfo[playerid][pLaw] += law;
		        UpdatePlayerStatics(playerid);
		        SendFormatMessage(playerid, COLOR_GREEN, string, "[Перевод]: {FFFFFF}Вы успешно обменяли {33AA33}%d{FFFFFF} монет на {33AA33}%d{FFFFFF} очков законопослушности", coins, law);
		        ShowDialog(playerid, dialogid);
	        }
	        else ShowDialog(playerid, DMENU_DONATE);
	    }
		case DMENU_SETTING:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		        	case 0:
		        	{
		        		callcmd::binds(playerid, "");
		        	}
					case 1:
					{
						ShowDialog(playerid, DMENU_CHANGE_ANIM);
					}
					case 2:
					{
						ShowDialog(playerid, DMENU_FSTYLE);
					}
					case 3:
					{
					    PlayerInfo[playerid][pRusifik] = !PlayerInfo[playerid][pRusifik];
					    ShowDialog(playerid, dialogid);
					}
					case 4:
					{
					    PlayerInfo[playerid][pInterface] = !PlayerInfo[playerid][pInterface];
					    IFace.ToggleGroup(playerid, IFace.INTERFACE, PlayerInfo[playerid][pInterface]);
					    ShowDialog(playerid, dialogid);
					}
					case 5:
					{
					    callcmd::censore(playerid, "");
					    ShowDialog(playerid, dialogid);
					}
					case 6:
					{
					    ToggleNameTags(playerid, !pNameTags[playerid]);
						ShowDialog(playerid, dialogid);
					}
					case 7:
					{
						ShowDialog(playerid, DMENU_CHANGE_SPAWN);
					}
					case 8:
					{
						PlayerInfo[playerid][pHouseIcon] = !PlayerInfo[playerid][pHouseIcon];
						ToggleHouseIcons(playerid, PlayerInfo[playerid][pHouseIcon]);
						ShowDialog(playerid, dialogid);
					}
					case 9:
					{
						PlayerInfo[playerid][pToggleZone] = !PlayerInfo[playerid][pToggleZone];
						UpdateGangZone(-1, playerid);
						ShowDialog(playerid, dialogid);
					}
		        }
		    }
		    else ShowDialog(playerid, DMENU_MAIN);
		}
		case DMENU_FSTYLE:
		{
			if(response)
			{
				if(!listitem || (PlayerInfo[playerid][pLearnFStyle] >> (listitem - 1)) & 0x1)
				{
					SetPlayerFightingStyle(playerid, FightStyles[listitem]);
					PlayerInfo[playerid][pFightStyle] = listitem;
					SendFormatMessage(playerid, COLOR_WHITE, string, "[Стиль боя]: Теперь вы деретесь в стиле: %s", FightStyleNames[listitem]);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для изучения этого стиля боя отправляйтесь в спортзал.");
					ShowDialog(playerid, dialogid);
				}
			}
			else
			{
				ShowDialog(playerid, DMENU_SETTING);
			}
		}
		case DMENU_PROTECTION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
					    strput(string, GetPlayerEmail(playerid));
						if(strlen(string) > 0)
						{
						    SendFormatMessage(playerid, COLOR_WHITE, string, "[Настройки]: Адрес вашей почты уже указан: %s", string);
						    return ShowDialog(playerid, dialogid);
						}
						ShowDialog(playerid, DMODE_EMAIL);
					}
					case 1:
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Временно недоступно.");
						return ShowDialog(playerid, dialogid);
					}
					case 2:
					{
						ShowDialog(playerid, DMENU_CHANGE_PASS);
					}
				}
			}
			else ShowDialog(playerid, DMENU_MAIN);
		}
		case DMENU_CHANGE_ANIM:
		{
			if(response)
			{
				if(listitem == 0)
				{
					PlayerInfo[playerid][pAnim] = 0;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Вы отключили личную анимацию");
				}
				else
				{
					PlayerInfo[playerid][pAnim] = listitem;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Теперь ваша личная анимация: {FFFFFF}%s", PlayerAnims[listitem][PANIM_TITLE]);
					ShowPlayerHint(playerid, "Чтобы проиграть анимацию нажмите ~y~колесико мыши");
				}
			}
			ShowDialog(playerid, DMENU_SETTING);
		}
		case DMENU_CHANGE_SPAWN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PlayerInfo[playerid][pHousing] == 0 && PlayerInfo[playerid][pRent] == 0)	{
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы нигде не прописаны.");
							return ShowDialog(playerid, dialogid);
						}
						PlayerInfo[playerid][pSpawn] = SPAWN_HOUSE;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Spawn]: Теперь вы будете появлятся по месту своей прописки");
					}
					case 1:
					{
						if(PlayerInfo[playerid][pFaction] == 0)	{
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не состоите во фракции.");
							return ShowDialog(playerid, dialogid);
						}
						PlayerInfo[playerid][pSpawn] = SPAWN_FACTION;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Spawn]: Теперь вы будете появлятся на спавне фракции");
					}
					case 2:
					{
						PlayerInfo[playerid][pSpawn] = SPAWN_NEWBIE;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Spawn]: Теперь вы будете появлятся на общем спавне (Аэро ЛС)");
					}
				}
			}
			ShowDialog(playerid, DMENU_SETTING);
		}
		case DMENU_CHANGE_PASS:
		{
			new clear_pass[128];
			if(GetPVarInt(playerid, "change_pass") == 0)
			{
				if(response)
				{
					mysql_escape_string(inputtext, clear_pass);
				    format(string, sizeof(string), "SELECT COUNT(*) FROM `players` WHERE `id` = '%d' AND `password` = MD5(CONCAT(MD5('%s'), (SELECT `salt` FROM `players` WHERE id = '%d')))", PlayerInfo[playerid][pUserID], clear_pass, PlayerInfo[playerid][pUserID]);
					new Cache:result = mysql_query(g_SQL, string);
					new count;
					cache_get_value_index_int(0, 0, count);
					cache_delete(result);
					if(count == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Текущий пароль введен не верно.");
					}
					else
					{
						SetPVarInt(playerid, "change_pass", 1);
					}
					ShowDialog(playerid, dialogid);
				}
				else ShowDialog(playerid, DMENU_PROTECTION);
			}
			else
			{
				DeletePVar(playerid, "change_pass");
				if(response)
				{
					if(strlen(inputtext) == 0) 	return ShowDialog(playerid, dialogid);
					if((MIN_PASS_SYMB <= strlen(inputtext) < MAX_PASS_SYMB) == false)
					{
						SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Допускается пароль только от %d до %d символов.", MIN_PASS_SYMB, MAX_PASS_SYMB);
					    return ShowDialog(playerid, dialogid);
					}
					new salt[MAX_SALT_PASS];
					mysql_escape_string(inputtext, clear_pass);
				    strmid(salt, generateCode(MAX_SALT_PASS), 0, MAX_SALT_PASS);
					format(string, sizeof(string), "UPDATE `players` SET `password` = MD5(CONCAT(MD5('%s'), MD5('%s'))), `salt` = MD5('%s') WHERE `id` = '%d'", clear_pass, salt, salt, PlayerInfo[playerid][pUserID]);
					mysql_query_ex(string);

					format(string, sizeof(string), "Ваш новый пароль: %s\nЗапишите его!", inputtext);
					MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Информация", string, "Закрыть", "");
				}
				else ShowDialog(playerid, dialogid);
			}
		}
		case DMENU_BONUS:
		{
		    if(response)
			{
				new code[16];
				strput(code, inputtext);
			    if(strlen(inputtext) == 0)
			    {
			        ShowDialog(playerid, dialogid);
			        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введите код бонуса.");
			    }
			    new stmp[128], redirect[16];
			    //	redirect?
			    mysql_format(g_SQL, stmp, sizeof stmp, "SELECT `redirect` FROM `bonuses` WHERE `code` = '%s'", code);
			    new Cache:result = mysql_query(g_SQL, stmp);
			    if(cache_num_rows())	cache_get_value_index(0, 0, redirect);
			    cache_delete(result);
			    if(strlen(redirect) > 0)	strput(code, redirect);
			    //  check
			    mysql_format(g_SQL, stmp, sizeof stmp, "SELECT COUNT(*) FROM `bonuse_input` WHERE `playerid` = '%d' AND `code` = '%s'", PlayerInfo[playerid][pUserID], code);
			   	result = mysql_query(g_SQL, stmp);
			    new count;
			    cache_get_value_index_int(0, 0, count);
			    cache_delete(result);
			    if(count)
			    {
			        ShowDialog(playerid, dialogid);
			        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот код уже использован вами.");
			    }
			    mysql_format(g_SQL, stmp, sizeof stmp, "SELECT `using`, `type`, `value` FROM `bonuses` WHERE `code` = '%s' LIMIT 1", code);
			    result = mysql_query(g_SQL, stmp);
			    if(cache_num_rows() == 0)
			    {
			        cache_delete(result);
			        ShowDialog(playerid, dialogid);
			        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого кода не существует.");
			    }
                new use, type, value;
                cache_get_value_index_int(0, 0, use);
                cache_get_value_index_int(0, 1, type);
                cache_get_value_index_int(0, 2, value);
                cache_delete(result);
                if(use)
                {
	                mysql_format(g_SQL, stmp, sizeof stmp, "SELECT COUNT(*) FROM `bonuse_input` WHERE `code` = '%s'", code);
				    result = mysql_query(g_SQL, stmp);
				    cache_get_value_index_int(0, 0, count);
				    cache_delete(result);
				    if(count >= use)
				    {
				        ShowDialog(playerid, dialogid);
				        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот код уже использован другими игроками и больше не доступен.");
				    }
				}
                switch(type)
                {
                    case 0:
                    {	//	Деньги
						MyGivePlayerMoney(playerid, value);
						format(stmp, sizeof stmp, "Код '{33AA33}%s{FFFFFF}' успешно активирован! Вы получили {33AA33}%d${FFFFFF}!", inputtext, value);
                    }
                    case 1:
                    {	//	Монеты
                        GivePlayerCoins(playerid, value);
                        format(stmp, sizeof stmp, "Код '{33AA33}%s{FFFFFF}' успешно активирован! Вы получили {33AA33}%d{FFFFFF} монет!", inputtext, value);
                    }
                    case 2:
                    {	//	Опыт
                    	GivePlayerEXP(playerid, value);
                    	format(stmp, sizeof stmp, "Код '{33AA33}%s{FFFFFF}' успешно активирован! Вы получили {33AA33}%d{FFFFFF} опыта!", inputtext, value);
                    }
                    default:	format(stmp, sizeof stmp, "Код '{33AA33}%s{FFFFFF}' успешно активирован!", inputtext);
                }
                SendClientMessage(playerid, -1, stmp);
                PlayerPlaySound(playerid, 30801, 0.0, 0.0, 0.0);
                mysql_format(g_SQL, stmp, sizeof stmp, "INSERT INTO `bonuse_input` SET `playerid` = '%d', `code` = '%e'", PlayerInfo[playerid][pUserID], code);
			    mysql_query_ex(stmp);
			}
			else	ShowDialog(playerid, DMENU_MAIN);
		}
		case DMENU_CONTACT:
		{
		    if(response)
		    {
			    if(strlen(inputtext) == 0) return ShowDialog(playerid, dialogid);
			    callcmd::ask(playerid, inputtext);
		    }
		    else if(openWithMenu[playerid])
		    {
		    	ShowDialog(playerid, DMENU_MAIN);
		    }
		}
		//---
		case DBIZ_MAIN:
		{
			if(response)
			{
		    	new b = PickupedBiz[playerid];
		    	if(b != INVALID_DATA)
		    	{
		    		if(listitem == 0)
			    	{
			    		if(BizInfo[b][bLocation] == 0)
						{
							return ShowBizMenu(playerid, b);
						}
						else
						{
							PlayerEnterBiz(playerid, b);
						}
			    	}
					else if(listitem == 1)
					{
						if(BizInfo[b][bOwnerID] == 0)
						{
							if(BuyPlayerBiz(playerid, b))
							{
								SendFormatMessage(playerid, COLOR_WHITE, string, "Вы успешно купили бизнес '%s' за %d$", BizInfo[b][bName], BizInfo[b][bPrice]);
				            	UpdatePlayerStatics(playerid);
							}
							else
							{
								return ShowDialog(playerid, dialogid);
							}
						}
						else if(BizInfo[b][bOwnerID] == PlayerInfo[playerid][pUserID])
						{
							return ShowDialog(playerid, DBIZ_MANAGE);
						}
					}
		    	}
			}
			PickupedBiz[playerid] = INVALID_DATA;
			gPickupTime[playerid] = 5;
		}
		case DBIZ_MANAGE:
		{
			if(response)
			{
				new b = GetBizWhichPlayer(playerid, 0);
		    	if(b != INVALID_DATA)
		    	{
					new item = 0;
					if(listitem == item++) //	Изменить название
					{
						ShowDialog(playerid, DBIZ_CHANGE_NAME);
					}
	    			else if(listitem == item++)	//	Заказать товары
	    			{
	    				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Временно недоступно.");
	    				ShowDialog(playerid, dialogid);
	    			}
	    			else if(listitem == item++)	//	Улучшения
	    			{
	    				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Временно недоступно.");
	    				ShowDialog(playerid, dialogid);
	    			}
	    			else if(BizTypeData[ BizInfo[b][bType] ][btMaxEnterPrice] > 0 && listitem == item++)	//	Цена за вход
	    			{
	    				ShowDialog(playerid, DBIZ_ENTER_PRICE);
	    			}
					else if(listitem == item++)	//	Продать бизнес
					{
						ShowDialog(playerid, DBIZ_SELL);
					}
				}
			}
			else
			{
				PickupedBiz[playerid] = INVALID_DATA;
			}
		}
		case DBIZ_CHANGE_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext))
				{
					return ShowDialog(playerid, DBIZ_CHANGE_NAME);
				}
				new b = GetBizWhichPlayer(playerid, 0);
				if(b != INVALID_DATA)
				{
					if(strlen(inputtext) <= 3)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Название слишком короткое.");
						return ShowDialog(playerid, DBIZ_CHANGE_NAME);
					}
					if(strlen(inputtext) >= BIZ_NAME_SIZE)
					{
						SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Название слишком длинное.");
						return ShowDialog(playerid, DBIZ_CHANGE_NAME);
					}
					//if(!IsCorrectName(inputtext, true))
					//{
					//	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Название содержит недопустимые символы.");
					//	return ShowDialog(playerid, DBIZ_CHANGE_NAME);
					//}
					new clear_name[BIZ_NAME_SIZE];
					mysql_escape_string(inputtext, clear_name);
					strput(BizInfo[b][bName], clear_name);
					SendFormatMessage(playerid, COLOR_WHITE, string, "Название бизнеса успешно изменено: "MAIN_COLOR"%s", BizInfo[b][bName]);
					UpdateBusinessText(b);
					SaveBiz(b);
				}
			}
			ShowDialog(playerid, DBIZ_MANAGE);
		}
		case DBIZ_ENTER_PRICE:
		{
			if(response)
			{
				new b = GetBizWhichPlayer(playerid, 0);
				if(b != INVALID_DATA)
				{
					new const price = strval(inputtext);
					if(!(0 < strlen(inputtext) < 10) || price <= 0 || price > BizTypeData[ BizInfo[b][bType] ][btMaxEnterPrice])
			        {
			            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
			            return ShowDialog(playerid, dialogid);
			        }
					BizInfo[b][bEnterPrice] = price;
					SendFormatMessage(playerid, COLOR_WHITE, string, "Стоимость входа успешно изменена: "MAIN_COLOR"$%d", BizInfo[b][bEnterPrice]);
					UpdateBusinessText(b);
					SaveBiz(b);
				}
			}
			ShowDialog(playerid, DBIZ_MANAGE);
		}
		case DBIZ_SELL:
		{
			if(response)
			{
				new b = GetBizWhichPlayer(playerid, 0);
				if(b != INVALID_DATA)
				{
					if(SellBiz(b))
					{
						SendClientMessage(playerid, COLOR_WHITE, "Бизнес успешно продан!");
						PickupedBiz[playerid] = INVALID_DATA;
					}
				}
			}
			else
			{
				ShowDialog(playerid, DBIZ_MANAGE);
			}
		}
		//---
		case DHOME_MAIN:
		{
		    if(!response) return true;
	        new h = GetPlayerHouseID(playerid);
	        if(h < 0) return true;

	        switch(listitem)
			{
	            case 0:
				{	// Открыть/Закрыть дверь
	                if(HouseInfo[h][hLock])	GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
					else					GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
					HouseInfo[h][hLock] = !HouseInfo[h][hLock];
					mysql_format(g_SQL, string, sizeof(string), "UPDATE `houses` SET `lock` = '%d' WHERE `id` = '%d'", HouseInfo[h][hLock], h + 1);
					mysql_query_ex(string);
				  	ShowDialog(playerid, dialogid);
	            }
	            case 1:
	            {
	            	SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Оплата дома производится в банке.");
	            	return ShowDialog(playerid, dialogid);
	            }
	            case 2:	ShowDialog(playerid, DHOME_FURNITURE);		// Расставить мебель
	            case 3:	ShowDialog(playerid, DHOME_RENT);			// аренда
	            case 4:	ShowDialog(playerid, DHOME_ACC_REGISTER);	// Прописаться здесь
	            case 5:
				{	// Продать дом
			        PickupedHouse[playerid] = h;
			        ShowDialog(playerid, DMODE_HOUSE_SELL);
	            }
	        }
		}
		case DHOME_ACC_REGISTER:
		{
		    if(response)
		    {
			    new house = GetPlayerHouseID(playerid);
			    if(house == -1)
			    {
			    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в доме, чтобы использовать эту команду.");
			    }
			    if(HouseInfo[house][hOwnerID] != PlayerInfo[playerid][pUserID])
			    {
			    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не владелец этого дома.");
			    }
				if(PlayerInfo[playerid][pHousing] == HouseInfo[house][hID])
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Дом]: Вы успешно выписались из этого дома");
					PlayerInfo[playerid][pHousing] = 0;
				}
			    else
			    {
					SendFormatMessage(playerid, COLOR_GREEN, string, "[Дом]: Вы успешно прописаны в доме #%d", HouseInfo[house][hID]);
					PlayerInfo[playerid][pHousing] = HouseInfo[house][hID];
				#if defined _player_achieve_included	
					GivePlayerAchieve(playerid, ACHIEVE_URBAN);
				#endif	
			    }
		    	UpdatePlayerHouseMapIcon(playerid);
			}
		    ShowDialog(playerid, DHOME_MAIN);
		}
		case DHOME_FURNITURE:
		{
		    if(response)
		    {
				new house = GetPlayerHouseID(playerid);
			    if(house == -1){
			    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в доме, чтобы использовать эту команду.");
			    }
			    if(HouseInfo[house][hOwnerID] != PlayerInfo[playerid][pUserID]){
			    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не владелец этого дома.");
			    }

				if(listitem == 0){
					return BuyPlayerFurniture(playerid);	//  Покупка мебели
				}
				else if(listitem == 1)    //  Покупка доп слотов
				{
				    if(HouseInfo[house][hExtraSlots] >= MAX_DONATE_FUR)
				    {
				        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас куплены все дополнительные слоты.");
				     	return ShowDialog(playerid, dialogid);
				    }
					return ShowDialog(playerid, DHOME_BUY_FUR_SLOT);
				}
				else if(listitem == 2)
				{
				    return ShowDialog(playerid, dialogid);
				}
				else
				{
				    listitem -= 3;
		            if(GetPVarInt(playerid, "fur_editid") || GetPVarInt(playerid, "fur_creteid"))
		            {
		            	CancelEditHomeObject(playerid);
		            }
					new query[128];
					mysql_format(g_SQL, query, sizeof query, "SELECT `id`, `object_id`, `dynamic_id`, `fur_num`, `set` FROM `furniture` WHERE `house_id` = '%d' LIMIT %d, 1", HouseInfo[house][hID], listitem);
					new Cache:result = mysql_query(g_SQL, query);
					if(cache_num_rows() == 0)
					{
					    return SendClientMessage(playerid, COLOR_RED, "Произошла ошибка!");
					}
					new id, object_id, dynamic_id, fur_num, set;
					cache_get_value_name_int(0, "id", id);
					cache_get_value_name_int(0, "object_id", object_id);
					cache_get_value_name_int(0, "dynamic_id", dynamic_id);
					cache_get_value_name_int(0, "fur_num", fur_num);
					cache_get_value_name_int(0, "set", set);
					cache_delete(result);

					new stmp[128];
					ShowPlayerHint(playerid,
						"~y~ESC~w~ - отмена редактирования~n~\
						~y~~k~~PED_SPRINT~~w~ - вращение камеры____~n~\
						~y~/dfur~w~ - удаление предмета_____", 0);
					if(set)
					{
						SendFormatMessage(playerid, COLOR_LIGHTGREEN, stmp, "Вы начали редактировать предмет: %s", FurnitureList[fur_num][fName]);
			   			SetPVarInt(playerid, "fur_editid", dynamic_id);
					}
					else
					{
		                new Float:pos[3];
						GetPlayerPos(playerid, Arr3<pos>);
						dynamic_id = CreateDynamicObject(object_id, pos[0] + 2.0, pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
						SendFormatMessage(playerid, COLOR_LIGHTGREEN, stmp, "Вы начали установку предмета: %s", FurnitureList[fur_num][fName]);
					  	SetPVarInt(playerid, "fur_creteid", id);
					  	SetPVarInt(playerid, "fur_crete_obj_id", dynamic_id);
					}
					SetPVarInt(playerid, "Fur:HouseID", house);
					EditDynamicObject(playerid, dynamic_id);
					for(new i = 0; i < 8; i++)	SetDynamicObjectMaterial(dynamic_id, i, -1, "none", "none", 0xAAAA3333);
				}
			}
			else
			{
				ShowDialog(playerid, DHOME_MAIN);
			}
		}
		case DHOME_BUY_FUR_SLOT:
		{
		    if(response)
		    {
				new slots = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || slots <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
	            new house = GetPlayerHouseID(playerid);
			    if(house == -1){
			    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в доме, чтобы использовать эту команду.");
			    }
			    if(HouseInfo[house][hOwnerID] != PlayerInfo[playerid][pUserID]){
			    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не владелец этого дома.");
			    }

				if(HouseInfo[house][hExtraSlots] + slots > MAX_DONATE_FUR){
				    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете купить столько слотов.");
				    return ShowDialog(playerid, dialogid);
				}
				if(GetPlayerCoins(playerid) < (FUR_SLOT_PRICE * slots))
				{
				    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно монет.");
				    return ShowDialog(playerid, dialogid);
				}
	            HouseInfo[house][hExtraSlots] += slots;
	            GivePlayerCoins(playerid, -(FUR_SLOT_PRICE * slots));
	            SendFormatMessage(playerid, COLOR_WHITE, string, "Вы купили %d дополнительных слотов для мебели в ваш дом!", slots);
	            SaveHouse(house);
        	}
        	ShowDialog(playerid, DHOME_FURNITURE);
		}
		case DHOME_FUR_ACCEPT_DEL:
		{
			if(response)
			{
				if(GetPVarInt(playerid, "fur_editid"))
				{
					new dynamic_id = GetPVarInt(playerid, "fur_editid");
			        mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `furniture` WHERE `dynamic_id` = '%d'", dynamic_id);
			        mysql_query_ex(string);
					DestroyDynamicObject(dynamic_id);
					DeletePVar(playerid, "fur_editid");
				}
				else if(GetPVarInt(playerid, "fur_creteid"))
				{
			        mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `furniture` WHERE `id` = '%d'", GetPVarInt(playerid, "fur_creteid"));
			        mysql_query_ex(string);

					DestroyDynamicObject(GetPVarInt(playerid, "fur_crete_obj_id"));
					DeletePVar(playerid, "fur_creteid");
					DeletePVar(playerid, "fur_crete_obj_id");
				}
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Предмет успешно удален из вашего дома!");
	   			CancelSelectTextDraw(playerid);
	   		}
		}
		case DHOME_RENT:
		{
			if(response)
			{
				new h = GetPlayerHouseID(playerid);
		        if(h < 0) return true;
		        if(HouseInfo[h][hRentPrice] > 0)
		        {
	        		mysql_format(g_SQL, string, sizeof(string), "SELECT `id` FROM `players` WHERE `rent` = '%d'", HouseInfo[h][hID]);
				    new Cache:result = mysql_query(g_SQL, string);
				    new count = cache_num_rows();
				    if(count > 0)
				    {
				    	if(listitem == 0)
				    	{
				    		ShowDialog(playerid, dialogid);
				    	}
				    	else
				    	{
				    		new id;
				    		for(new i = 1; i <= count; i++)
				    		{
					    		if(listitem == i)
					    		{
					    			cache_get_value_name_int(i - 1, "id", id);
					    			SetPVarInt(playerid, "House:Rent:Playerid", id);
					    			return ShowDialog(playerid, DHOME_RENT_MOVEOUT);
					    		}
					    	}
				    	}
				    }
				    if((count == 0 && listitem == 0) || (count > 0 && (listitem - count - 1) == 0))
				    {
				    	return ShowDialog(playerid, DHOME_RENT_CHANGE);
				    }
				    else if((count == 0 && listitem == 1) || (count > 0 && (listitem - count - 1) == 1))
				    {
				    	if(count > 0)
				    	{
				    		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете закрыть аренду, пока у вас кто-то прописан.");
						    return ShowDialog(playerid, dialogid);

				    		/*foreach(LoginPlayer, i)
					    	{
					    		if(PlayerInfo[i][pRent] == HouseInfo[h][hID])
					    		{
					    			PlayerInfo[i][pRent] = 0;
					    			SendFormatMessage(i, COLOR_LIGHTRED, string, "[Аренда]: Владелец дома %s выселил вас из арендуемого дома", ReturnPlayerName(playerid));
					    			// проверить на нахождение в доме и выкинуть из него
					    		}
					    	}
					    	mysql_format(g_SQL, string, sizeof(string), "UPDATE `players` SET `rent` = '0' WHERE `rent` = '%d'", HouseInfo[h][hID]);
					    	mysql_query_ex(string);*/
				    	}
				    	else
				    	{
				    		SendClientMessage(playerid, COLOR_LIGHTRED, "[Дом]: Аренда успешно закрыта, все арендаторы выселены");
					    	HouseInfo[h][hRentPrice] = 0;
					    	SaveHouse(h);
		        			UpdateHouse(h);
				    	}
				    }
				    cache_delete(result);
		        }
		        else
		        {
		        	new const rent_price = strval(inputtext);
					if(!(0 < strlen(inputtext) < 10) || rent_price <= 0)
			        {
			            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
			            return ShowDialog(playerid, dialogid);
			        }
		        	HouseInfo[h][hRentPrice] = rent_price;
		        	SendFormatMessage(playerid, COLOR_GREEN, string, "[Дом]: Аренда успешно открыта, стоимость: $%d", HouseInfo[h][hRentPrice]);
		        	SaveHouse(h);
		        	UpdateHouse(h);
		        }
			}
			ShowDialog(playerid, DHOME_MAIN);
		}
		case DHOME_RENT_MOVEOUT:
		{
			if(response)
			{
				new h = GetPlayerHouseID(playerid);
		        if(h < 0) return true;
				new userid = GetPVarInt(playerid, "House:Rent:Playerid");
				SendFormatMessage(playerid, COLOR_LIGHTRED, string, "[Дом]: %s выселен из вашего дома", GetPlayerUsername(userid));
	    		foreach(LoginPlayer, i)
		    	{
		    		if(PlayerInfo[i][pUserID] == userid && PlayerInfo[i][pRent] == HouseInfo[h][hID])
		    		{
		    			SendFormatMessage(i, COLOR_LIGHTRED, string, "[Аренда]: %s выселил вас из своего дома", ReturnPlayerName(playerid));
		    			GivePlayerBank(i, PlayerInfo[i][pPaymentDays] * HouseInfo[h][hRentPrice]);
		    			PlayerInfo[i][pRent] = 0;
		    			UpdatePlayerData(i, "rent", 0);
		    			PlayerInfo[i][pPaymentDays] = 0;
		    			goto end;
		    		}
		    	}

		    	mysql_format(g_SQL, string, sizeof(string), "SELECT `rent`, `payment_days` FROM `players` WHERE `id` = '%d'", userid);
		    	new Cache:result = mysql_query(g_SQL, string);
			    new rent, payment_days;
			    cache_get_value_name_int(0, "rent", rent);
			    cache_get_value_name_int(0, "payment_days", payment_days);
			    cache_delete(result);

			    if(rent == HouseInfo[h][hID])
	    		{
	    			format(string, sizeof(string), "[Аренда]: %s выселил вас из своего дома, оплата возвращена в банк", ReturnPlayerName(playerid));
	    			SendOfflineMessage(userid, string);

	    			new bank = payment_days * HouseInfo[h][hRentPrice];
	    			mysql_format(g_SQL, string, sizeof(string), "UPDATE `players` SET `rent` = '0', `payment_days` = 0, `bank` = `bank` + '%d' WHERE `id` = '%d'", bank, userid);
		    		mysql_query_ex(string);
	    		}
			}
		end:
			ShowDialog(playerid, DHOME_RENT);
		}
		case DHOME_RENT_CHANGE:
		{
			if(response)
			{
				new h = GetPlayerHouseID(playerid);
		        if(h < 0) return true;
				new const rent_price = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || rent_price <= 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение");
		            return ShowDialog(playerid, dialogid);
		        }

		        mysql_format(g_SQL, string, sizeof(string), "SELECT COUNT(*) AS `count` FROM `players` WHERE `rent` = '%d'", HouseInfo[h][hID]);
		    	new Cache:result = mysql_query(g_SQL, string);
			    new count;
			    cache_get_value_name_int(0, "count", count);
			    cache_delete(result);

			    if(count > 0)
			    {
			    	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете изменить стоимость аренды, пока у вас кто-то прописан.");
			    }
			    else
			    {
			    	HouseInfo[h][hRentPrice] = rent_price;
		        	SendFormatMessage(playerid, COLOR_GREEN, string, "[Дом]: Стоимость аренды успешно изменена: $%d", HouseInfo[h][hRentPrice]);
		        	SaveHouse(h);
		        	UpdateHouse(h);
			    }
			}
			ShowDialog(playerid, DHOME_RENT);
		}
		case DHOME_TAKE_RENT:
		{
			if(response)
			{
				new h = PickupedHouse[playerid];
				if(h >= 0 && HouseInfo[h][hOwnerID] > 0)
	    		{
	    			if(HouseInfo[h][hRentPrice] > 0)
	    			{
	    				new days = strval(inputtext);
	    				if(!(0 < strlen(inputtext) < 10) || days <= 0)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
				            return ShowDialog(playerid, dialogid);
				        }
						new price = HouseInfo[h][hRentPrice] * days;
						if(MyGetPlayerMoney(playerid) < price)
						{
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько наличных.");
							return ShowDialog(playerid, dialogid);
						}
						if(days > 30)
						{
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Максимальное количество дней для аренды - 30.");
							return ShowDialog(playerid, dialogid);
						}
						MyGivePlayerMoney(playerid, -price);
	    				PlayerInfo[playerid][pRent] = HouseInfo[h][hID];
	    				PlayerInfo[playerid][pPaymentDays] = days;
	    				PlayerInfo[playerid][pSpawn] = SPAWN_HOUSE;
	    				UpdatePlayerData(playerid, "rent", PlayerInfo[playerid][pRent]);
	    				UpdatePlayerData(playerid, "payment_days", PlayerInfo[playerid][pPaymentDays]);

	    				SendFormatMessage(playerid, COLOR_GREEN, string, "[Аренда]: Вы успешно арендовали дом #%d на %d дней", HouseInfo[h][hID], days);
	    				SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Spawn]: Теперь вы будете появлятся в арендуемом доме");

	    				new ownerid = GetPlayeridToUserID(HouseInfo[h][hOwnerID]);
	    				format(string, sizeof(string), "[Аренда]: %s арендовал ваш дом на %d дней", ReturnPlayerName(playerid), days);
	    				if(ownerid == INVALID_PLAYER_ID)	SendOfflineMessage(HouseInfo[h][hOwnerID], string);
	    				else 								SendClientMessage(ownerid, COLOR_GREEN, string);
	    			#if defined _player_achieve_included
	    				GivePlayerAchieve(playerid, ACHIEVE_URBAN);
	    			#endif
						TextDrawHideForPlayer(playerid, tdHouseButton2);
						TextDrawShowForPlayer(playerid, tdHouseButton3);
	    			}
	    			else
	    			{
	    				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Аренда уже закрыта.");
	    			}
	    		}
			}
		}
		case DHOME_CANCEL_RENT:
		{
			if(response)
			{
				new h = PickupedHouse[playerid];
				if(h >= 0)
	    		{
	    			if(PlayerInfo[playerid][pRent] == HouseInfo[h][hID])
	    			{
	    				PlayerInfo[playerid][pRent] = 0;
	    				SendFormatMessage(playerid, COLOR_LIGHTRED, string, "[Аренда]: Вы прекратили аренду дома #%d", HouseInfo[h][hID]);
						TextDrawHideForPlayer(playerid, tdHouseButton3);
						TextDrawShowForPlayer(playerid, tdHouseButton2);
	    			}
	    		}
			}
		}
		// npc
		case DNPC_EMMET:
		{
		    if(response)
		    {
				new Float:pos[3];
				GetActorPos(ACTOR[A_EMMET], Arr3<pos>);
				if(!IsPlayerInRangeOfPoint(playerid, 30.0, Arr3<pos>)) return 1;

		        new const idx = listitem,
		        		  weaponid = EmmetStore[idx][0],
		        		  storeammo = EmmetStore[idx][1];
		        if(weaponid == 0 || storeammo == 0)
				{
				    ShowPlayerHint(playerid, "Этого нет в наличии.");
					return ShowDialog(playerid, dialogid);
				}
			    if(MyGetPlayerMoney(playerid) < EmmetStore[idx][2])
			    {
				    ShowPlayerHint(playerid, "Вам не хватает денег.");
					return ShowDialog(playerid, dialogid);
			    }
				if(listitem == 6)
				{// Бронежилет
				    if(MyGetPlayerArmour(playerid) > 95.0)
					{
					    ShowPlayerHint(playerid, "На вас целый бронежилет.");
						return ShowDialog(playerid, dialogid);
					}
					EmmetStore[idx][1] -= 1;
					MyGivePlayerMoney(playerid, -EmmetStore[idx][2]);
					MySetPlayerArmour(playerid, 100.0);
				}
				else
				{
					new curgun, curammo, ammo = GunParams[weaponid][GUN_AMMO];
				    GetPlayerWeaponData(playerid, GunParams[weaponid][GUN_SLOT], curgun, curammo);
					if(storeammo < ammo) ammo = storeammo;
					if(curgun > 0 && curgun != weaponid && curammo > 0)
					{
					    MyHidePlayerDialog(playerid);
					    weaponid_new[playerid] = weaponid;
					    SetPVarInt(playerid, "Player:WaponBuy:Price", EmmetStore[idx][2]);
					    return ShowDialog(playerid, DMODE_GUNDEL);
					}
					if(curammo + ammo >= 1000)
					{
					    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы купили максимальное количество патрон.");
						return ShowDialog(playerid, dialogid);
					}
					//
					EmmetStore[idx][1] -= ammo;
					MyGivePlayerMoney(playerid, -EmmetStore[idx][2]);
					//MyGivePlayerWeapon(playerid, weaponid, ammo);
					Inv.GivePlayerWeapon(playerid, weaponid, ammo);
					Inv.SavePlayerWeapon(playerid);
				}
				ShowDialog(playerid, dialogid);
		    }
		}
		//---
		case DRACE_JOIN:
		{
		    TogglePlayerControllable(playerid, true);
		    if(response)
		    {
		        if(RaceInfo[rStatus] != 1)
		        {
		        	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "К сожалению, набор на эту гонку закончился.");
		        }
			    for(new sp; sp < RaceInfo[sp_cache]; sp++)
			    {
			        if(RaceSpawn[sp][sp_Status] == 0)
			        {
		                RaceInfo[rPlayers] += 1;
		                RaceSpawn[sp][sp_Status] = playerid + 1;

						new vehicleid = MyCreateVehicle(RaceInfo[rVehicle], RaceSpawn[sp][sp_x], RaceSpawn[sp][sp_y], RaceSpawn[sp][sp_z], RaceSpawn[sp][sp_a], -1, -1);
						CarInfo[vehicleid][cOwnerID] = playerid;
		                SetPVarInt(playerid, "Race:Player:VehicleID", vehicleid);

			            SetVehicleVirtualWorld(vehicleid, VW_RACE);

		                pRaceCP[playerid] = 0;
		                Iter_Add(Racer, playerid);	// Добавляем
			            SetPlayerVirtualWorld(playerid, VW_RACE);
			            MyPutPlayerInVehicle(playerid, vehicleid, 0);
						SetCameraBehindPlayer(playerid);
						switch(VehInfo[vehicleid][vModelType])
						{
						    case MTYPE_RC, MTYPE_BIKE, MTYPE_MOTO, MTYPE_BOAT, MTYPE_HELIC: ShowPlayerHint(playerid, "~y~F~w~ - Для выхода из гонки", 0);
						    default: ShowPlayerHint(playerid, "____~y~F~w~ - Для выхода из гонки~n~~y~/nitro~w~ - Купить нитро [5 coins]", 0);
						}

						// Проверка заполненности слотов
						/*if(RaceInfo[rPlayers] == RaceInfo[sp_cache])
						{
						    KillTimer(RaceInfo[rtimer]);
						    RaceInfo[rtimer] = 0;
						    RaceTimer();
						}*/
			            return true;
			        }
			    }
			    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "В гонке уже не осталось свободных мест.");
		    }
		}
		case DRACE_MAIN:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: ShowDialog(playerid, DRACE_LIST); // Список всех гонок
		            case 1: // Запустить случайную
		            {
					    if(RaceStart(playerid))
					    {
							format(string, 128, "[AdmCmd]: %s %s[%d] запустил случайную гонку", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
							SendAdminMessage(COLOR_ADMIN, string);
					    }
					    else ShowDialog(playerid, dialogid);
		            }
		            case 2: // Создать новую гонку
		            {
						mysql_format(g_SQL, string, sizeof(string), "INSERT INTO `races` SET `name` = 'New Unknown Race', `creater` = '%s'", ReturnPlayerName(playerid));
						new Cache:result = mysql_query(g_SQL, string);
					    redit_id[playerid] = cache_insert_id();
					    cache_delete(result);
					    ShowDialog(playerid, DRACE_EDIT);
		            }
		            case 3: // Остановить гонку
		            {
		                if(RaceInfo[rStatus] == 0)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Ни одна гонка еще не запущена.");
					        return ShowDialog(playerid, dialogid);
					    }
				        foreach(LoginPlayer, i)
						{
						    if(InRace[i]) GameTextForPlayer(i, RusText("~r~Гонка завершена", isRus(i)), 3000, 4);
						}
						RaceStop();
						MySendClientMessageToAll(COLOR_EVENT, "[Ивент]: Гонка завершена по техническим причинам!");
				        ShowDialog(playerid, dialogid);
		            }
		            case 4: // Дать старт гонке
		            {
					    if(RaceInfo[rStatus] != 1)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Гонка не находится в режиме ожидания.");
					        return ShowDialog(playerid, dialogid);
					    }
					    RaceInfo[rcount] = 0;
						KillTimer(RaceInfo[rtimer]);
					    RaceTimer();
		            }
		        }
		    }
		}
		case DRACE_LIST:
		{
		    if(response)
		    {
			    mysql_format(g_SQL, string, sizeof(string), "SELECT `id` FROM `races` LIMIT %d,1", listitem);
				new Cache:result = mysql_query(g_SQL, string);
				if(!cache_num_rows())
				{
				    cache_delete(result);
				    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой гонки не существует.");
				    ShowDialog(playerid, dialogid);
				    return 1;
				}
				cache_get_value_name_int(0, "id", redit_id[playerid]);
				cache_delete(result);
				ShowDialog(playerid, DRACE_EDIT);
			}
			else ShowDialog(playerid, DRACE_MAIN);
		}
		case DRACE_EDIT:
		{
		    if(!response)
		    {
		        ShowDialog(playerid, DRACE_MAIN);
		        redit_id[playerid] = 0;
		        return 1;
		    }
	        switch(listitem)
	        {
	            case 0: // Запустить гонку / Прервать гонку
	            {
			        if(RaceInfo[rStatus] != 0)
			        {
			            if(redit_id[playerid] != RaceInfo[rID])
			            {
			                SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Уже запущена другая гонка.");
			                return ShowDialog(playerid, dialogid);
			            }
	        			foreach(LoginPlayer, i)
						{
						    if(InRace[i]) GameTextForPlayer(i, RusText("~r~Гонка завершена", isRus(i)), 3000, 4);
						}
				        RaceStop();
						MySendClientMessageToAll(COLOR_EVENT, "[Ивент]: Гонка завершена по техническим причинам!");
				        ShowDialog(playerid, dialogid);
			        }
			        else
			        {
			            if(RaceStart(playerid, redit_id[playerid])) redit_id[playerid] = 0;
			        }
	            }
	            case 1: ShowDialog(playerid, DRACE_EDIT_PARAMS); // Параметры гонки
	            case 2: // Завершить редактирование / Возобновить редактирование
	            {
				    mysql_format(g_SQL, string, sizeof(string), "SELECT `created` FROM `races` WHERE `id` = '%d'", redit_id[playerid]);
					new Cache:result = mysql_query(g_SQL, string);
					if(!cache_num_rows())
					{
					    cache_delete(result);
					    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой гонки не существует.");
					    ShowDialog(playerid, DRACE_MAIN);
					    return 1;
					}
			        new created;
			        cache_get_value_name_int(0, "created", created);
			        cache_delete(result);
					//---
					if(created != 0)
					{	// Возобновить редактирование
						mysql_format(g_SQL, string, 128, "UPDATE `races` SET `created` = '0' WHERE `id` = '%d'", redit_id[playerid]);
						mysql_query_ex(string);
						ShowDialog(playerid, dialogid);
					}
				    else
				    {	// Завершить редактирование
						mysql_format(g_SQL, string, sizeof(string), "SELECT COUNT(*) AS count FROM `race_cp` WHERE `raceid` = '%d'", redit_id[playerid]);
						result = mysql_query(g_SQL, string);
						new cache_count;
						cache_get_value_name_int(0, "count", cache_count);
						cache_delete(result);
						if(!cache_count)
						{
						    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Не создано ни одного чекпоинта.");
						    return ShowDialog(playerid, dialogid);
						}
						//
						mysql_format(g_SQL, string, sizeof(string), "SELECT COUNT(*) AS count FROM `race_spawn` WHERE `raceid` = '%d'", redit_id[playerid]);
						result = mysql_query(g_SQL, string);
						cache_get_value_name_int(0, "count", cache_count);
						cache_delete(result);
						if(cache_count < 4)
						{
						    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "В гонке должно быть не менее 4 спавн точек.");
						    ShowDialog(playerid, dialogid);
						    return 1;
						}
						//
						mysql_format(g_SQL, string, 128, "UPDATE `races` SET `created` = '1' WHERE `id` = '%d'", redit_id[playerid]);
						mysql_query_ex(string);
						format(string, 128, "Гонка #%d: Редактирование завершено. Гонка готова к запуску!", redit_id[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        ShowDialog(playerid, dialogid);
				    }
	            }
	            case 3: ShowDialog(playerid, dialogid); // Line
	            case 4: // Редактировать спавн точки
	            {
					redit_act[playerid] = 2;
					redit_num[playerid] = 1;
					redit_curid[playerid] = 0;
					format(string, 128, "Подсказка: Вы начали редактировать спавн точки. {FFFFFF}Максимум: %d", sizeof(RaceSpawn));
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_YELLOW, "Подсказка: Для создания ПКМ (пешком) или ЛКМ (в машине). Для завершения - /race");
					SendClientMessage(playerid, COLOR_YELLOW, "Подсказка: Для телепорта на спавн точку - {FFFFFF}/racenum [spnum]");
	            }
	            case 5: // Редактировать чекпоинты
	            {
					redit_act[playerid] = 3;
					redit_num[playerid] = 1;
					redit_size[playerid] = 6.0;
					redit_previd[playerid] = 0;
			        redit_curid[playerid] = ShowPlayerEditCP(playerid, redit_num[playerid]);
					format(string, 128, "Подсказка: Вы начали редактировать чекпоинты. {FFFFFF}Максимум: %d", sizeof(RaceCP));
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_YELLOW, "Подсказка: Для создания ПКМ (пешком) или ЛКМ (в машине). {FFFFFF}Для завершения - /race");
					SendClientMessage(playerid, COLOR_YELLOW, "Подсказка: Менять размер - Num4 и Num6. Переключиться на определенный ЧП - {FFFFFF}/racenum [cpnum]");
	            }
	            case 6: // Очистить рекорд гонки
	            {
					mysql_format(g_SQL, string, sizeof(string), "UPDATE `races` SET `record` = '0', `recordby` = 'na' WHERE `id` = '%d'", redit_id[playerid]);
					mysql_query_ex(string);
					format(string, 128, "Гонка #%d: Рекорд этой гонки успешно очищен", redit_id[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					ShowDialog(playerid, dialogid);
	            }
	            case 7: ShowDialog(playerid, DRACE_DELETE); // Полностью удалить гонку
	        }
      	}
      	case DRACE_EDIT_PARAMS:
      	{
      	    if(response)
      	    {
      	        switch(listitem)
      	        {
      	            case 1: // Название гонки
					{
					    redit_item[playerid] = listitem;
						format(string, 128, "Гонка #%d: Редактирование", redit_id[playerid]);
						MyShowPlayerDialog(playerid, DRACE_EDIT_WRITE, DIALOG_STYLE_INPUT, string, "Введите новое название гонки:", "Ввести", "Назад");
					}
					case 3:
					{
						redit_item[playerid] = listitem;
						format(string, 128, "Гонка #%d: Редактирование", redit_id[playerid]);
						MyShowPlayerDialog(playerid, DRACE_EDIT_WRITE, DIALOG_STYLE_INPUT, string, "Введите новый id автомобиля (400-611):", "Ввести", "Назад");
					}
					default: ShowDialog(playerid, dialogid);
      	        }
      	    }
      	    else ShowDialog(playerid, DRACE_EDIT);
      	}
      	case DRACE_EDIT_WRITE:
      	{
      	    if(response)
      	    {
      	        switch(redit_item[playerid])
      	        {
      	            case 1: // Название гонки
      	            {
      	                if(!strlen(inputtext))
      	                {
      	                    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
      	                    ShowDialog(playerid, dialogid);
      	                    return 1;
      	                }
   	                    SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Гонка #%d: Название изменено на '%s'", redit_id[playerid], inputtext);
						mysql_format(g_SQL, string, sizeof(string), "UPDATE `races` SET `name` = '%e' WHERE `id` = '%d'", inputtext, redit_id[playerid]);
						mysql_query_ex(string);
      	            }
      	            case 3:	//	Автомобиль
      	            {
      	            	new model = strval(inputtext);
      	            	if(model < 400 || model > 611)
      	                {
      	                    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
      	                    return ShowDialog(playerid, dialogid);
      	                }
      	                SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Гонка #%d: Автомобиль изменен на %s[%d]", redit_id[playerid], VehParams[model - 400][VEH_NAME], model);
						mysql_format(g_SQL, string, sizeof(string), "UPDATE `races` SET `vehicle` = '%d' WHERE `id` = '%d'", model, redit_id[playerid]);
						mysql_query_ex(string);
      	            }
      	        }
   	            ShowDialog(playerid, DRACE_EDIT_PARAMS);
      	    }
      	    else ShowDialog(playerid, DRACE_EDIT_PARAMS);
      	}
      	case DRACE_DELCP:
      	{
		    if(response)
		    {
				if(!strlen(inputtext) || (strcmp(inputtext, "delcp", true) && strcmp(inputtext, "чекпоинт", true)))
				{
				    ShowDialog(playerid, dialogid);
				    return 1;
				}
				if(RaceInfo[rStatus] != 0 && RaceInfo[rID] == redit_id[playerid])
				{
				    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Невозможно удалять чекпоинты запущенной гонки.");
				    return callcmd::race(playerid, "");
				}
				// Удаление
				mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `race_cp` WHERE `raceid` = '%d' AND `id` >= '%d'", redit_id[playerid], redit_curid[playerid]);
				new Cache:result = mysql_query(g_SQL, string);
				new deleted = cache_affected_rows();
				cache_delete(result);
                format(string, 128, "Гонка #%d: Удалено %d чекпоинтов, начиная с #%d", redit_id[playerid], deleted, redit_num[playerid]);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                //---
				if(redit_num[playerid] > 1)
				{
				    redit_num[playerid] -= 1;
					redit_previd[playerid] = ShowPlayerEditCP(playerid, redit_num[playerid]-1);
					redit_curid[playerid] = ShowPlayerEditCP(playerid, redit_num[playerid]);
				}
				else
				{
				    redit_num[playerid] = 1;
   				    redit_curid[playerid] = 0;
   				    redit_previd[playerid] = 0;
					DisablePlayerRaceCheckpoint(playerid);
				}
            }
      	}
      	case DRACE_DELETE:
      	{
		    if(response)
		    {
		        if(redit_id[playerid] == 0)
		        {
		            ShowDialog(playerid, DRACE_LIST);
		            return 1;
		        }
				if(!strlen(inputtext) || (strcmp(inputtext, "delete", true) && strcmp(inputtext, "удалить", true)))
				{
				    ShowDialog(playerid, dialogid);
				    return 1;
				}
				if(RaceInfo[rStatus] != 0 && RaceInfo[rID] == redit_id[playerid])
				{
				    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Невозможно удалить запущенную гонку.");
				    return ShowDialog(playerid, DRACE_EDIT);
				}
				// Удаление
				mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `races` WHERE `id` = '%d'", redit_id[playerid]);
				mysql_query_ex(string);
				mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `race_spawn` WHERE `raceid` = '%d'", redit_id[playerid]);
				mysql_query_ex(string);
				mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `race_cp` WHERE `raceid` = '%d'", redit_id[playerid]);
				mysql_query_ex(string);
				mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `race_object` WHERE `raceid` = '%d'", redit_id[playerid]);
				mysql_query_ex(string);

				// Уведомление
				foreach(LoginPlayer, i)
				{
					if(redit_id[i] == redit_id[playerid])
					{
						if(i == playerid)
						{
							format(string, 128, "Гонка #%d: Успешно удалена", redit_id[i]);
							SendClientMessage(i, COLOR_LIGHTRED, string);
						}
						else
						{
							format(string, 128, "Гонка #%d: %s[%d] только что удалил редактируемую гонку", redit_id[i], ReturnPlayerName(playerid), playerid);
							SendClientMessage(i, COLOR_LIGHTRED, string);
						}
						MyHidePlayerDialog(i);
						callcmd::race(i, "");
						redit_id[i] = 0;
					}
				}
            }
            else ShowDialog(playerid, DRACE_EDIT);
      	}
		//---
      	case DPOKER_GAMESETUP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // Buy-In Max
					{
						ShowDialog(playerid, DPOKER_GAMESETUP2);
					}
					case 1: // Buy-In Min
					{
						ShowDialog(playerid, DPOKER_GAMESETUP3);
					}
					case 2: // Blind
					{
						ShowDialog(playerid, DPOKER_GAMESETUP4);
					}
					case 3: // Limit
					{
						ShowDialog(playerid, DPOKER_GAMESETUP5);
					}
					case 4: // Password
					{
						ShowDialog(playerid, DPOKER_GAMESETUP6);
					}
					case 5: // Round Delay
					{
						ShowDialog(playerid, DPOKER_GAMESETUP7);
					}
					case 6: // Start Game
					{
						ShowDialog(playerid, DPOKER_GAMESBUY);
					}
				}
			}
			else LeavePokerTable(playerid);
		}
		case DPOKER_GAMESETUP2:
		{
			if(response)
			{
				new money = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || money <= 0 || money > 1000000000)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				if(money <= PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMin])
				{
					return ShowDialog(playerid, dialogid);
				}
				PokerTable[GetPVarInt(playerid, "pkrTableID") - 1][pkrBuyInMax] = money;
			}
			ShowDialog(playerid, DPOKER_GAMESETUP);
		}
		case DPOKER_GAMESETUP3:
		{
			if(response)
			{
				new money = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || money <= 0 || money > 1000000000)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				if(money >= PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMax])
				{
					ShowDialog(playerid, DPOKER_GAMESETUP3);
					return false;
				}
				PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMin] = money;
			}
			ShowDialog(playerid, DPOKER_GAMESETUP);
		}
		case DPOKER_GAMESETUP4:
		{
			if(response)
			{
				new money = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || money <= 0 || money > 1000000000)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBlind] = money;
			}
			ShowDialog(playerid, DPOKER_GAMESETUP);
		}
		case DPOKER_GAMESETUP5:
		{
			if(response)
			{
				if(strval(inputtext) < 2 || strval(inputtext) > 6)
				{
					return ShowDialog(playerid, DPOKER_GAMESETUP5);
				}
				PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrLimit] = strval(inputtext);
			}
			ShowDialog(playerid, DPOKER_GAMESETUP);
		}
		case DPOKER_GAMESETUP6:
		{
			if(response)
			{
				new tableid = GetPVarInt(playerid, "pkrTableID") - 1;
				strmid(PokerTable[tableid][pkrPass], inputtext, 0, strlen(inputtext), 32);
			}
			ShowDialog(playerid, DPOKER_GAMESETUP);
		}
		case DPOKER_GAMESETUP7:
		{
			if(response)
			{
				new delay = strval(inputtext);
				if(delay < 15 || delay > 120)
				{
					return ShowDialog(playerid, dialogid);
				}
				PokerTable[GetPVarInt(playerid, "pkrTableID") - 1][pkrSetDelay] = delay;
			}
			ShowDialog(playerid, DPOKER_GAMESETUP);
		}
		case DPOKER_GAMESBUY:
		{
			if(response)
			{
				new tableid = GetPVarInt(playerid, "pkrTableID") - 1,
					count = strval(inputtext),
					chips = Inv.GetThing(playerid, THING_CHIPS);
				if(count < PokerTable[tableid][pkrBuyInMin]
				|| count > PokerTable[tableid][pkrBuyInMax]
				|| count > chips)
				{
					return ShowDialog(playerid, dialogid);
				}
				PokerTable[tableid][pkrActivePlayers]++;
				SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips") + count);
				Inv.PlayerDeleteThing(playerid, THING_CHIPS, 0, count);

				if(PokerTable[tableid][pkrActive] == 3 && PokerTable[tableid][pkrRound] == 0 && PokerTable[tableid][pkrDelay] >= 6)
				{
					SetPVarInt(playerid, "pkrStatus", 1);
				}
				else if(PokerTable[tableid][pkrActive] < 3)
				{
					SetPVarInt(playerid, "pkrStatus", 1);
				}

				if(PokerTable[tableid][pkrActive] == 1 && GetPVarInt(playerid, "pkrRoomLeader"))
				{
					PokerTable[tableid][pkrActive] = 2;
					SelectTextDraw(playerid, COLOR_GOLD);
				}
			}
			else LeavePokerTable(playerid);
		}
		case DPOKER_GAMESCALL:
		{
			if(response)
			{
				new tableid = GetPVarInt(playerid, "pkrTableID") - 1;
				new actualBet = PokerTable[tableid][pkrActiveBet]-GetPVarInt(playerid, "pkrCurrentBet");

				if(actualBet > GetPVarInt(playerid, "pkrChips"))
				{
					PokerTable[tableid][pkrPot] += GetPVarInt(playerid, "pkrChips");
					SetPVarInt(playerid, "pkrChips", 0);
					SetPVarInt(playerid, "pkrCurrentBet", PokerTable[tableid][pkrActiveBet]);
				}
				else
				{
					PokerTable[tableid][pkrPot] += actualBet;
					SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")-actualBet);
					SetPVarInt(playerid, "pkrCurrentBet", PokerTable[tableid][pkrActiveBet]);
				}
				SetPVarString(playerid, "pkrStatusString", "Call");
				PokerRotateActivePlayer(tableid);
				ApplyAnimation(playerid, "CASINO", "cards_raise", 4.1, 0, 1, 1, 1, 1, 1);
			}
			DeletePVar(playerid, "pkrActionChoice");
		}
		case DPOKER_GAMESRAISE:
		{
			if(response)
			{
				new tableid = GetPVarInt(playerid, "pkrTableID")-1;
				new actualRaise = strval(inputtext)-GetPVarInt(playerid, "pkrCurrentBet");
				if(strval(inputtext) >= PokerTable[tableid][pkrActiveBet]+PokerTable[tableid][pkrBlind]/2 && strval(inputtext) <= GetPVarInt(playerid, "pkrCurrentBet")+GetPVarInt(playerid, "pkrChips"))
				{
					PokerTable[tableid][pkrPot] += actualRaise;
					PokerTable[tableid][pkrActiveBet] = strval(inputtext);
					SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")-actualRaise);
					SetPVarInt(playerid, "pkrCurrentBet", PokerTable[tableid][pkrActiveBet]);

					SetPVarString(playerid, "pkrStatusString", "Raise");

					PokerTable[tableid][pkrRotations] = 0;
					PokerRotateActivePlayer(tableid);

					ApplyAnimation(playerid, "CASINO", "cards_raise", 4.1, 0, 1, 1, 1, 1, 1);
				}
				else ShowDialog(playerid, DPOKER_GAMESRAISE);
			}
			DeletePVar(playerid, "pkrActionChoice");
		}
		//	chips
		case DCHIPS_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // Buy
					{
						ShowDialog(playerid, DCHIPS_BUY);
					}
					case 1: // Sell
					{
						ShowDialog(playerid, DCHIPS_SELL);
					}
				}
			}
		}
		case DCHIPS_BUY:
		{
			if(response)
			{
				new count = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || count <= 0 || count > 10000000)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
				BuyChips(playerid, count);
				ShowDialog(playerid, dialogid);
			}
			else
			{
				ShowDialog(playerid, DCHIPS_MENU);
			}
		}
		case DCHIPS_SELL:
		{
			if(response)
			{
				new count = strval(inputtext);
				if(!(0 < strlen(inputtext) < 10) || count <= 0 || count > 10000000)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введено некорректное значение.");
		            return ShowDialog(playerid, dialogid);
		        }
		        SellChips(playerid, count);
				ShowDialog(playerid, dialogid);
			}
			else
			{
				ShowDialog(playerid, DCHIPS_MENU);
			}
		}
		//-- case
	}
	return true;
	// end of stock ShowDialog
}

public OnFadeComplete(playerid, fadeid)
{
	new string[256];
	switch(fadeid)
	{
		/*case FADE_ENTER:
		{
			//	system
			new e = fade_EnterID[playerid], side = fade_Side[playerid];
			SetCameraBehindPlayer(playerid);
			if(side == 1)
			{
				MySetPlayerPos(playerid, EnterInfo[e][exX], EnterInfo[e][exY], EnterInfo[e][exZ], EnterInfo[e][exA] + 180, EnterInfo[e][exInt], EnterInfo[e][exVW]);
				if(EnterInfo[e][exFreeze] == false)	TogglePlayerControllable(playerid, true);
				else 								SetTimerEx("MyUnfreezePlayer", 2000, false, "i", playerid);
			}
			else
			{
				MySetPlayerPos(playerid, EnterInfo[e][enX], EnterInfo[e][enY], EnterInfo[e][enZ], EnterInfo[e][enA] + 180, 0, 0);
				if(EnterInfo[e][enFreeze] == false)	TogglePlayerControllable(playerid, true);
				else 								SetTimerEx("MyUnfreezePlayer", 2000, false, "i", playerid);
			}
			FadeColorForPlayer(playerid, 0, 0, 0, 255, 0, 0, 0, 0, 10);
			OnPlayerEnterExitFinish(playerid, e, side);
		}*/
		case FADE_TELEPORT:
		{
			SetCameraBehindPlayer(playerid);
	        MySetPlayerPos(playerid, Arr4<fade_TPToPos[playerid]>, fade_Interior[playerid], fade_VirtualWorld[playerid]);
			FadeColorForPlayer(playerid, 0, 0, 0, 255, 0, 0, 0, 0, 10);
			fade_Teleporting[playerid] = 0;
			if(fade_Freeze[playerid] == false)	TogglePlayerControllable(playerid, true);
			else 								SetTimerEx("MyUnfreezePlayer", 2000, false, "i", playerid);

			switch(Fade_TeleportID[playerid])
			{
				case FT_NONE:
				{
					//	---	//
				}
				case FT_BIZ:
				{
					new biz = GetBizWhichPlayer(playerid);
					if(biz != INVALID_DATA)
					{
						if(BizInfo[biz][bRobbery] != INVALID_PLAYER_ID)
						{
							PlayerPlaySound(playerid, 3401, 0.0, 0.0, 0.0);
						}
						if(BizInfo[biz][bType] == BUS_SHOP)
						{	// Магазин 24/7
							SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Чтобы начать покупку - взаимодействуйте с продавцом ("SCOLOR_HINT"ПКМ + h"SCOLOR_WHITE").");
						}
					}
				}
				case FT_HOUSE:
				{
					new house = GetPlayerHouseID(playerid);
					if(house >= 0)
					{
						if(HouseInfo[house][hOwnerID] == PlayerInfo[playerid][pUserID] && FoundHouse(PlayerInfo[playerid][pHousing]) != house)
						{
							ShowPlayerHint(playerid, "Используйте ~y~H ~w~или ~y~/home~n~~w~чтобы прописаться в доме");
						}
					}
				}
				case FT_HROOM_EXIT:
				{
				#if defined _player_achieve_included	
					if(gMissionProgress[playerid][MIS_SOURCE_TRAINING] == 1)
					{
						GivePlayerAchieve(playerid, ACHIEVE_URBAN);
					}
				#endif
				}
				case FT_AUTOSCHOOL:
				{
					AS_ClearVars(playerid);
				}
				case FT_TIR:
				{
			    	MyChangePlayerWeapon(playerid, true);
			    	MyGivePlayerWeapon(playerid, 22, TirMissionInfo[ PlayerInfo[playerid][pShooting] - 1 ][TIR_AMMO]);
			    	format(string, sizeof(string), "~n~~n~~n~~w~Wave: %d~n~~y~GET READY!", PlayerInfo[playerid][pShooting]);
			    	GameTextForPlayer(playerid, string, 4900, 6);
			    	TogglePlayerControllable(playerid, false);
					SetTimerEx("MyUnfreezePlayer", 4000, false, "i", playerid);
			    	p_isShooting{playerid} = true;
			    	p_ShootingCountdown{playerid} = 5;
				}
				case FT_TIR_COMPLETE:
				{
			    	SuccesAnim(playerid);
					PlayerPlaySound(playerid, 36205, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GREEN, "Поздравляем, теперь отправляйтесь в полицейский участок для оплаты и получения лицензии на оружие!");
				}
			}

			//---	Mission
			if(GetPVarInt(playerid, "Mission:CompleteMission") == MIS_HOTEL)
			{
				DeletePVar(playerid, "Mission:CompleteMission");
				StoryMissionComplete(playerid, MIS_SOURCE_TRAINING, 0, 0);
			}
		}
	#if defined	_job_job_theft_included	
		case FADE_THEFT:
		{
			if(TheftStatus[playerid] == 2)
			{
				Job.ClearPlayerNowWork(playerid);
			}
		}
	#endif	
		default:
		{
			new cutstate = GetPVarInt(playerid, "RegCutSceneState");
			if(cutstate)
			{
				if(cutstate == 1)		RegisterCutScene(playerid, 2, 1, 1);
				else if(cutstate == 2)	RegisterCutScene(playerid, 13, 1, 1);
				else if(cutstate == 3)	RegisterCutScene(playerid, 21, 1, 1);
				SetPVarInt(playerid, "RegCutSceneState", 999);
			}
			else if(GetPVarInt(playerid, "PrisonCycle") == 2)
			{
				DeletePVar(playerid, "PrisonCycle");
				SetPlayerPrisonPos(playerid, LastPrisonStatus);
		    	MySpawnPlayer(playerid); // Спаун
			}
		}
	}
	return true;
}

Public: OnVisualTimerComplete(playerid)
{
	if(p_isShooting{playerid} && p_ShootingHits{playerid} < 7)
	{
		return FinishPlayerShooting(playerid, true);
	}
	return true;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	printf("OnPlayerSelectDynamicObject: %d, %d, %f, %f, %f", objectid, modelid, x, y, z);
	EditDynamicObject(playerid, objectid);
	return true;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	#if defined _inventory_acsr_included
		Callback: Acsr.OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	#endif

	if(response)
	{
	    printf("%d %d %f %f %f %f %f %f %f %f %f", modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	}
    return true;
}

// new _graffiti;
// CMD:graffiti(playerid, params[])
// {
// 	new Float:pos[3];
// 	MyGetPlayerPos(playerid, Arr3<pos>);
// 	_graffiti = CreateDynamicObject(18659, Arr3<pos>, 0.0, 0.0, 0.0);
// 	SelectObject(playerid);
// 	return true;
// }

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(IsValidDynamicObject(objectid) == 0)	return true;

	new string[256];
	if(response == EDIT_RESPONSE_FINAL)
	{ 	//  Save
		if(GetPVarType(playerid, "Fur:HouseID") != PLAYER_VARTYPE_NONE)
		{
			new h = GetPVarInt(playerid, "Fur:HouseID");
			new Class = HouseInfo[h][hClass] - 1,
	        	Int = HouseInfo[h][hInt] - 1;
			if(GetPVarInt(playerid, "fur_editid"))
			{
				for(new i = 0; i < 8; i++)	SetDynamicObjectMaterial(objectid, i, -1, "none", "none", 0);
				if(GetDistanceFromPointToPoint(Arr3<InterCoords[Class][Int]>, x, y, z) > 50)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Объект не может быть расположен здесь");
					CancelEditHomeObject(playerid);
				}
				else
				{
					mysql_format(g_SQL, string, sizeof(string), "UPDATE `furniture` SET `x` = '%f', `y` = '%f', `z` = '%f', `rx` = '%f', `ry` = '%f', `rz` = '%f' WHERE `dynamic_id` = '%d'", x, y, z, rx, ry, rz, objectid);
					mysql_query_ex(string);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Объект успешно отредактирован!");
					DeletePVar(playerid, "fur_editid");
				}
			}
			else if(GetPVarInt(playerid, "fur_creteid"))
			{
				if(GetDistanceFromPointToPoint(Arr3<InterCoords[Class][Int]>, x, y, z) > 50)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Объект не может быть расположен здесь");
					CancelEditHomeObject(playerid);
				}
				else
				{
				    new model = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);
				    for(new i = 0; i < 8; i++)	SetDynamicObjectMaterial(objectid, i, -1, "none", "none", 0);
				    for(new i = 0; i < sizeof(FurnitureList); i++)
					{
						if(model == FurnitureList[i][fID])
						{
							mysql_format(g_SQL, string, sizeof(string), "UPDATE `furniture` SET `x` = '%f', `y` = '%f', `z` = '%f', `rx` = '%f', `ry` = '%f', `rz` = '%f', `set` = 1, `dynamic_id` = '%d', `fur_num` = '%d' WHERE `id` = '%d'", x, y, z, rx, ry, rz, objectid, i, GetPVarInt(playerid, "fur_creteid"));
							mysql_query_ex(string);
							break;
						}
					}
				    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Объект успешно установлен в ваш дом!");
				    DeletePVar(playerid, "fur_creteid");
					DeletePVar(playerid, "fur_crete_obj_id");
				}
			}
			DeletePVar(playerid, "Fur:HouseID");
		}
		else
		{
			/*if(_graffiti)
			{

				for(new j = 0; j < sizeof(GangZones); j++)
				{
					if(IsCoordInSquare(x, y, Arr4<GangZones[j]>))
					{
						new query[256];
						mysql_format(g_SQL, query, sizeof query, "UPDATE `gang_zones` SET `graffiti_x` = '%f', `graffiti_y` = '%f', `graffiti_z` = '%f', `graffiti_a` = '%f' WHERE `id` = '%d'", x, y, z, rz, GangZoneID[j]);
						mysql_query_ex(query);
						break;
					}
				}
				DestroyDynamicObject(_graffiti);
				_graffiti = 0;
			}*/
			printf("%f %f %f %f %f %f", x, y, z, rx, ry, rz);
		}
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
		CancelEditHomeObject(playerid);	//  Cancel
	}
	//else if(response == EDIT_RESPONSE_UPDATE)
	//{
		//SetDynamicObjectPos(objectid, x, y, z);
		//SetDynamicObjectRot(objectid, rx, ry, rz);
	//}
	return true;
}

stock CancelEditHomeObject(playerid)
{
	if(GetPVarType(playerid, "Fur:HouseID") != PLAYER_VARTYPE_NONE)
	{
	    if(GetPVarInt(playerid, "fur_editid"))
		{
		    new string[256];
			new objectid = GetPVarInt(playerid, "fur_editid");
			mysql_format(g_SQL, string, sizeof(string), "SELECT `x`, `y`, `z`, `rx`, `ry`, `rz` FROM `furniture` WHERE `dynamic_id` = '%d'", objectid);
			new Cache:result = mysql_query(g_SQL, string);
			if(!cache_num_rows())
			    return SendClientMessage(playerid, COLOR_RED, "Произошла критическая ошибка при редактировании!");

			new Float:pos[6];
			cache_get_value_name_float(0, "x", pos[0]);
			cache_get_value_name_float(0, "y", pos[1]);
			cache_get_value_name_float(0, "z", pos[2]);
			cache_get_value_name_float(0, "rx", pos[3]);
			cache_get_value_name_float(0, "ry", pos[4]);
			cache_get_value_name_float(0, "rz", pos[5]);    

			SetDynamicObjectPos(objectid, Arr3<pos>);
			SetDynamicObjectRot(objectid, pos[3], pos[4], pos[5]);
			for(new i = 0; i < 8; i++)	SetDynamicObjectMaterial(objectid, i, -1, "none", "none", 0);
			cache_delete(result);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Редактирование предмета отменено");
			DeletePVar(playerid, "fur_editid");
		}
		else if(GetPVarInt(playerid, "fur_creteid"))
		{
		    DestroyDynamicObject(GetPVarInt(playerid, "fur_crete_obj_id"));
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Установка предмета отменена");
			DeletePVar(playerid, "fur_creteid");
			DeletePVar(playerid, "fur_crete_obj_id");
		}
		CancelEdit(playerid);
		//CancelSelectTextDraw(playerid);
		DeletePVar(playerid, "Fur:HouseID");
	}
	return true;
}

stock BuyPlayerFurniture(playerid)
{
	BuyFurFurCategory[playerid] = 0;
	BuyFurSelectItem[playerid] = -1;
    if(IFace.GetGroupToggleAndVisible(playerid, IFace.HOUSE_FUR))
	{
		IFace.ToggleGroup(playerid, IFace.HOUSE_FUR, false);
	    CancelSelectTextDraw(playerid);
	}
	else
	{
		new house = GetPlayerHouseID(playerid);
		if(house == -1)
		{
	    	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в доме, чтобы использовать эту команду.");
	    	return false;
		}
	    if(HouseInfo[house][hOwnerID] != PlayerInfo[playerid][pUserID])
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не владелец этого дома.");
	    	return false;
	    }
	    IFace.ToggleGroup(playerid, IFace.HOUSE_FUR, true);
	    IFace.House_FurSetTitle(playerid, FurCategories[ BuyFurFurCategory[playerid] ]);
        IFace.House_FurSetInfo(playerid, "_");
        IFace.House_FurSetPage(playerid, BuyFurFurCategory[playerid] + 1, sizeof(FurCategories));
		CreateFurnituresModels(playerid, BuyFurFurCategory[playerid]);

	    SelectTextDraw(playerid, 0xACCBF1FF);
	}
	return true;
}

stock CreateFurnituresModels(playerid, category)
{
	for(new i = 0, x = 0; x < SELECTION_ITEMS; i++)
	{
	    if(i < sizeof(FurnitureList) && FurnitureList[i][fType] == category)
	    {
			IFace.House_FurAddItem(playerid, x++, FurnitureList[i][fID]);
	    }
	    else
	    {
	    	IFace.House_FurHideItem(playerid, i);
	    }
	}
	return true;
}

stock GetOccupiedFurSlots(houseid)
{
    new string[128], count;
	mysql_format(g_SQL, string, sizeof(string), "SELECT COUNT(*) AS count FROM `furniture` WHERE `house_id` = '%d'", HouseInfo[houseid][hID]);
	new Cache:result = mysql_query(g_SQL, string);
	cache_get_value_name_int(0, "count", count);
	cache_delete(result);
	return count;
}

stock GetHouseFurSlot(houseid)
{
	return MAX_FURNITURE - 8 * (HouseInfo[houseid][hClass] - 1) + HouseInfo[houseid][hExtraSlots];
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(GetPlayerAdmin(playerid) >= ADMIN_IVENTER)
	{
		new Float:z;
		CreateGotoSmoke(playerid);
		MapAndreas_FindZ_For2DCoord(fX, fY, z);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	    if(GetPlayerState(playerid) == 2)
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
			MySetVehiclePos(vehicleid, fX, fY, z + 2.0);
			LinkVehicleToInterior(vehicleid, 0);
			SetVehicleVirtualWorld(vehicleid, 0);
		}
		else MySetPlayerPos(playerid, fX, fY, z + 2.0);
	}
	else
	{
		ShowPlayerGPSPoint(playerid, fX, fY, fZ);
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Выбранная точка отмечена на радаре "SCOLOR_GPS"желтым маркером");
	}
    return true;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if(IsPlayerLogged(playerid) == 0)
	{
	    return false;
	}
	if((gBlockAction[playerid] & 1))
	{
		return false;
	}
	//--- Антифлуд
	new tick = GetTickCount();
	if(tick - StartupAntiflood[playerid] < 800)
	{
	    StartupAntiflood[playerid] = tick;
	    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Не так быстро.");
	    return false;
	}
	StartupAntiflood[playerid] = tick;
	//---	check flags
	if( (flags & CMD_RCON) && GetPlayerAdmin(playerid) < ADMIN_RCON
	||  (flags & CMD_DEVELOPER) && GetPlayerAdmin(playerid) < ADMIN_DEVELOPER
	||	(flags & CMD_GADMIN) && GetPlayerAdmin(playerid) < ADMIN_GADMIN
	||	(flags & CMD_ADMIN) && GetPlayerAdmin(playerid) < ADMIN_ADMIN
	||	(flags & CMD_MODER) && GetPlayerAdmin(playerid) < ADMIN_MODER
	||	(flags & CMD_IVENTER) && GetPlayerAdmin(playerid) < ADMIN_IVENTER
	||	(flags & CMD_HELPER) && GetPlayerAdmin(playerid) < ADMIN_HELPER)
	{
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
        return false;
	}
	return true;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == (-1))
	{
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Неизвестная команда, используйте /help.");
	}
	return true;
}

//	[BT] Commands
CMD:preview(playerid) 
{ 
	CallRemoteFunction("ShowPreviewEditor", "d", playerid); 
	SelectTextDraw(playerid, 0x2D3036FF); 
	return 1; 
}

flags:repairdoor(CMD_DEVELOPER);
CMD:repairdoor(playerid, params[])
{
	NearAirportDoorPlayers = 0;
    MyMoveDynamicObject(AirportDoor[0], 1684.27, -2335.98, 12.56, 1.5, -1000.0, -1000.0, -1000.0);
	MyMoveDynamicObject(AirportDoor[1], 1687.27, -2335.94, 12.56, 1.5, -1000.0, -1000.0, -1000.0);
	SendClientMessage(playerid, -1, "Двери восстановлены!");
	return true;
}

flags:vtimer(CMD_DEVELOPER);
CMD:vtimer(playerid, params[])
{// [BT]
    new string[128];
    if(sscanf(params, "s[32] ", string))
        return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /vtimer [set/update/hide]");
	if(strcheck(string, "set"))
	{
		new time, bool:update;
		if(sscanf(params, "{s[32]}ib", time, update))
		    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /vtimer set [time] [autoupdate]");
		SetPlayerVisualTimer(playerid, time, update);
	}
	else if(strcheck(string, "update"))
	{
		new time;
		if(sscanf(params, "{s[32]}i", time))
		    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /vtimer update [time]");
		SetPlayerVisualTimer(playerid, time, false);
	}
	else if(strcheck(string, "hide"))
		HidePlayerVisualTimer(playerid);
	else
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого действия в этой команде не существует.");
	return true;
}

flags:reptest(CMD_DEVELOPER);
CMD:reptest(playerid, params[])
{// [BT]
	new title[32], oldval, newval, maxval;
	if(sscanf(params, "s[32]ddd", title, oldval, newval, maxval))
	    return SendClientMessage(playerid, -1, "Используйте: /reptest [текст] [старое знач.] [новое знач.] [макс. знач.]");
    return RepBarShow(playerid, title, oldval, newval, maxval);
}

flags:progress(CMD_DEVELOPER);
CMD:progress(playerid, params[])
{// [BT]
    new string[128];
    if(sscanf(params, "s[32] ", string))
        return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /progress [update/hide]");
	if(strcheck(string, "hide"))
		ProgressBarHide(playerid);
	else if(strcheck(string, "update"))
	{
		new title[32], rus, value, maxvalue;
		if(sscanf(params, "{s[32]}is[32]ii", rus, title, value, maxvalue))
		    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /progress update [rusik] [title] [value] [maxvalue]");
		ProgressBarUpdate(playerid, value, maxvalue, RusText(title, rus));
	}
	else
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого действия в этой команде не существует.");
	return true;
}

flags:jailperiod(CMD_DEVELOPER);
CMD:jailperiod(playerid, params[])
{// [BT]
    new string[128];
    if(sscanf(params, "s[32] ", string))
        return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /jailperiod [update/hide]");
	if(strcheck(string, "hide"))
		PlayerTextDrawHide(playerid, p_JailPeriod);
	else if(strcheck(string, "update"))
	{
		new title[32];
		if(sscanf(params, "{s[32]}s[32]", title))
		    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /jailperiod update [title]");
		PlayerTextDrawSetString(playerid, p_JailPeriod, RusText(title, isRus(playerid)));
		PlayerTextDrawShow(playerid, p_JailPeriod);
	}
	else
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого действия в этой команде не существует.");
	return true;
}

/*
flags:setcam(CMD_DEVELOPER);
CMD:setcam(playerid, params[])
{// [BT]
	TogglePlayerSpectating(playerid, true);
	IFace.ToggleGroup(playerid, IFace.TV_EFFECT, true);
	RegisterCutScene(playerid, strval(params), 0, 0);
	return true;
}*/

flags:cutscene(CMD_DEVELOPER);
CMD:cutscene(playerid, params[])
{// [BT]
	KillTimer(LoginCameraTimer[playerid]);
	if(strval(params) == 0){
		TogglePlayerSpectating(playerid, false);
	}
	else{
		TogglePlayerSpectating(playerid, true);
		RegisterCutScene(playerid, strval(params), 1, 1);
	}
	return true;
}

flags:testjail(CMD_DEVELOPER);
CMD:testjail(playerid, params[])
{// [BT]
	new val = strval(params);
	if(val == 1){
		SetPlayerPos(playerid, 691.6, -2917.4, 1700.4);
		SetPlayerFacingAngle(playerid, 270.0);
		SetPlayerCameraPos(playerid, 693.5, -2917.4, 1700.8);
		SetPlayerCameraLookAt(playerid, 690.0, -2917.4, 1700.8);
	}
	else if(val == 2){
		SetPlayerFacingAngle(playerid, 180.0);
	}
	else{
		SetCameraBehindPlayer(playerid);
	}
	return true;
}

flags:testcycle(CMD_DEVELOPER);
CMD:testcycle(playerid, params[])
{// [BT]
	PlayerInfo[playerid][pJailTime] = gettime() + 600;
	SetPVarInt(playerid, "PrisonCycle", 1);
    TogglePlayerSpectating(playerid, 1);
	IFace.ToggleGroup(playerid, IFace.TV_EFFECT, true);
	PrisonCycle(playerid, 4);
	return true;
}

flags:vrecord(CMD_DEVELOPER);
CMD:vrecord(playerid, params[])
{// [BT]
	if(sscanf(params, "s[256]", params))
	    return SendClientMessage(playerid,0xFF0000FF,"Usage: /vrecord {name}");
	if(!IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid,0xFF0000FF,"Recording: Get in a vehicle.");

	StartRecordingPlayerData(playerid,PLAYER_RECORDING_TYPE_DRIVER,params);
	SendClientMessage(playerid,0xFF0000FF,"Recording: started. (Use: /stoprecord to stop)");
	return 1;
}

flags:ofrecord(CMD_DEVELOPER);
CMD:ofrecord(playerid, params[])
{// [BT]
	if(sscanf(params, "s[256]", params))
	    return SendClientMessage(playerid,0xFF0000FF,"Usage: /ofrecord {name}");
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid,0xFF0000FF,"Recording: Leave the vehicle and reuse the command.");

	StartRecordingPlayerData(playerid,PLAYER_RECORDING_TYPE_ONFOOT,params);
	SendClientMessage(playerid,0xFF0000FF,"Recording: started. (Use: /stoprecord to stop)");
	return 1;
}

flags:stoprecord(CMD_DEVELOPER);
CMD:stoprecord(playerid, params[])
{// [BT]
	StopRecordingPlayerData(playerid);
	SendClientMessage(playerid,0xFF0000FF,"Recording: stopped.");
	return 1;
}

flags:test1(CMD_DEVELOPER);
CMD:test1(playerid, params[])
{// [BT]
	SendAdminMessage(COLOR_ADMIN, "Админ сообщение отправлено для: Разработчиков", PC_HasFlag("test1", CMD_DEVELOPER));
	return 1;
}

//flags:test2(CMD_DEVELOPER);
CMD:test2(playerid, params[])
{// [BT]
	SendClientMessage(playerid, -1, params);
	return 1;
}

flags:test3(CMD_DEVELOPER);
CMD:test3(playerid, params[])
{// [BT]
	PursuitLastUNIX[playerid] = 0;
	PlayerInfo[playerid][pNextFriskTime] = 0;
	return true;
}

flags:test4(CMD_DEVELOPER);
CMD:test4(playerid, params[])
{// [BT]
	OnPlayerPickUpDynamicPickup(playerid, PoliceDutyPickup);
	return true;
}

flags:test5(CMD_DEVELOPER);
CMD:test5(playerid, params[])
{// [BT]
	new string[128];
	format(string, sizeof(string), "Порядковый номер дня: %d", gettime() / 86400);
	SendClientMessage(playerid, COLOR_SERVER, string);
	return true;
}

//----

flags:walter(CMD_DEVELOPER);
CMD:walter(playerid, params[])
{
	CreateVanWalter();
	return true;
}

flags:gotowalter(CMD_DEVELOPER);
CMD:gotowalter(playerid, params[])
{// [BT]
	if(BB_Car == 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Уолтер сейчас не варит мет.");
	new Float:pos[3];
	GetVehiclePos(BB_Car, Arr3<pos>);
	MySetPlayerPos(playerid, pos[0] + 1.0, pos[1] + 1.0, pos[2]);
	SendClientMessage(playerid, COLOR_WHITE, "Вы телепортированы к фургону Уолтера");
	return true;
}

COMMAND:updates(playerid, params[])
{
	new lstring[1524] = "{FFFFFF}";
	strcat(lstring, "[*] Исправление различных ошибок\n\
	[*] Исправлены ложные срабатывания античита на здоровье");
	return MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Обновления [30.10.2016 00:00]", lstring, "Класс!", "");
}

COMMAND:rules(playerid, params[])
{
	new lstring[2500] = ""MAIN_COLOR"[Игровой процесс]\n\
	{FFFFFF}- Запрещено использовать ники, содержащие нецензурные или оскорбительные слова.\n\
	- Запрещено использовать любые скрипты, читы и дополнения, которые могут давать какие-либо преимущества.\n\
	- Запрещено намеренно использовать баги, которые могут давать какие-либо преимущества.\n";
	strcat(lstring, "- Запрещено рекламировать все, что не связано с игровым процессом.\n\
	- Запрещено наезжать на игрока с ожиданием летального исхода.\n\
	- Запрещено убивать игроков без видимой на то причины (беспорядочное убийство, отсутствие диалога до убийства).\n\
	  Причиной может являться нахождение игрока в противоположной по смыслу фракции (бандит - полицейский, бандит - бандит).\n\
	  Так же причиной может являться сопротивление или ответная реакция на негативные действия со стороны игрока.\n");
	strcat(lstring, "- Запрещено вымогать, передавать и публиковать пароли от аккаунта.\n\
	- Запрещено выдавать себя за администратора или лидера, при этом не являясь таковым.\n\
	- Запрещено провоцировать игроков, злоупотребляя игровыми возможностями для создания неудобств игрокам.\n\n");
	strcat(lstring, ""MAIN_COLOR"[Чат сервера]\n\
	{FFFFFF}- Запрещено оскорблять игроков, за исключением оскорблений в локальный чат при отсутствии претензий у оскорбляемого игрока.\n\
	- Запрещено угрожать игрокам, если это не относится к игровому процессу.\n\
	- Запрещено оскорблять администрацию, за исключением случаев, когда администратор находится в игровом процессе.\n\
	- Запрещено обсуждать и критиковать действия администрации, за исключением специально отведенных тем на форуме.\n\n");
	strcat(lstring, ""MAIN_COLOR"[Торговля и аккаунты]\n\
	{FFFFFF}- Запрещено разводить игроков на неизвестные для игрока последствия (например: 'введи /quit и получишь денег')\n\
	- Запрещено подстрекать игроков на нарушение правил сервера.\n\
	- Запрещено обманывать игроков с целью завладеть имуществом или деньгами (продажа предметов и имущество реализовано системно).\n\
	- Запрещено продавать/покупать игровые предметы (аккаунты, имущество, вещи) взамен на неигровые предметы и(или) деньги между игроками.\n");
	strcat(lstring, "- Запрещено передавать/отдавать свой аккаунт.\n\
	- Запрещено создавать твинки (аккаунты помимо основного) с целью накрутки и передачи ресурсов.\n\
	- Запрещено использовать твинки в случае, если основной аккаунт стоит на должности лидера или администратора.\n\n\
	"MAIN_COLOR"[Администраторам]\n\
	{FFFFFF}- Запрещено использовать админ возможности в личных целях");
	return MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Правила сервера", lstring, "Закрыть", "");
}

CMD:radio(playerid, params[])
{
	if(Acsr.GetSlotToType(playerid, ACSR_EARFLAPS) == INVALID_DATA)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в наушниках.");
	}
 	if(PlayerInfo[playerid][pPhoneNumber] == 0)
    {
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас должен быть телефон.");
    }
 	if(PlayerInfo[playerid][pPhoneEnable] == false)
    {
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Телефон должен быть включен.");
    }
	ShowDialog(playerid, DMODE_RADIO_PLEER);
	return 1;
}

flags:neon(CMD_DEVELOPER);
COMMAND:neon(playerid, params[])
{// [BT]
	new num = strval(params);
	if(0 <= num <= 5)
	{
		if(AttachNeons(GetPlayerVehicleID(playerid), num))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Установлено");
		}
	}
	else
		SendClientMessage(playerid, COLOR_GREY, "Ид неона должен быть от 0 до 6");
	return true;
}

COMMAND:flash(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(CarInfo[vehicleid][cFlash] == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас не установлены стробоскопы.");
		return true;
	}
	new flash;
	if(sscanf(params, "d", flash))
	{
		SendClientMessage(playerid, COLOR_GREY, "Используйте: /flash [0-5]");
		return true;
	}
	if(SetVehicleFlasher(vehicleid, flash))
	{
		if(flash)	GameTextForPlayer(playerid, "~w~Strobe Lights ~g~ON", 3000, 4);
		else 		GameTextForPlayer(playerid, "~w~Strobe Lights ~r~OFF", 3000, 4);
	}
    return true;
}

COMMAND:debug(playerid, params[])
{// [BT]
	if(showDebug[playerid])
	{
	    PlayerTextDrawHide(playerid, debugTD);
	    SendClientMessage(playerid, COLOR_GREY, "Отладка выключена!");
	    showDebug[playerid] = false;
	}
	else
	{
		PlayerTextDrawShow(playerid, debugTD);
        SendClientMessage(playerid, COLOR_GREY, "Отладка включена!");
        showDebug[playerid] = true;
	}
	return true;
}

COMMAND:dfur(playerid, params[])
{
    //  удаление предмета
	if(GetPVarInt(playerid, "fur_editid") || GetPVarInt(playerid, "fur_creteid"))
	{
		MyShowPlayerDialog(playerid, DHOME_FUR_ACCEPT_DEL,	DIALOG_STYLE_MSGBOX, "Редактирование мебели", "{FFFFFF}Действительно хотите удалить этот объект?", "Да", "Отмена");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Вы не редактируете мебель!" );
	}
	return true;
}

/*COMMAND:allowdealer(playerid, params[])
{
    if(!IsMafia(PlayerInfo[playerid][pFaction])){
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не лидер одной из мафий.");
    }
    extract params -> new player:giveplayerid; else{
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /allowdealer [playerid/playername]");
    }
    new string[128];
    if(PlayerInfo[playerid][pFaction] == F_RUSMAF){

		SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s %s выдал вам разрешение на торговлю оружием", GetPlayerRank(playerid), ReturnPlayerName(playerid));
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы выдали %s разрешение на торговлю оружием", ReturnPlayerName(giveplayerid));
	    PlayerInfo[giveplayerid][pGunDealLic] = 1;
    }
    else if(PlayerInfo[playerid][pFaction] == F_LCN)
    {
		SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s %s выдал вам разрешение на угон автотранспорта", GetPlayerRank(playerid), ReturnPlayerName(playerid));
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы выдали %s разрешение на угон автотранспорта", ReturnPlayerName(giveplayerid));
	    PlayerInfo[giveplayerid][pTheftLic] = 1;
    }
	else if(PlayerInfo[playerid][pFaction] == F_YAKUZA){
		SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s %s выдал вам разрешение на торговлю наркотиками", GetPlayerRank(playerid), ReturnPlayerName(playerid));
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы выдали %s разрешение на торговлю наркотиками", ReturnPlayerName(giveplayerid));
	    PlayerInfo[giveplayerid][pDrugDealLic] = 1;
	}
	else{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "К сожалению, для вас недоступна эта команда.");
	}
	return true;
}

COMMAND:deletedealer(playerid, params[])
{
	if(!IsMafia(PlayerInfo[playerid][pFaction])){
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не лидер одной из мафий.");
    }
    extract params -> new player:giveplayerid; else{
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /deletedealer [playerid/playername]");
    }
	new string[128];
	if(PlayerInfo[playerid][pFaction] == F_RUSMAF)
	{
		SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s %s забрал у вас разрешение на торговлю оружием", GetPlayerRank(playerid), ReturnPlayerName(playerid));
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы забрали у %s разрешение на торговлю оружием", ReturnPlayerName(giveplayerid));
	    PlayerInfo[giveplayerid][pGunDealLic] = 0;
		if(Job.GetPlayerJob(giveplayerid) == JOB_GUNDEAL)
		{
			Job.SetPlayerJob(giveplayerid, JOB_NONE);
			SendClientMessage(playerid, COLOR_GREY, "Вы больше не можете производить и продавать оружие");
			Job.UpdatePlayerMapIcon(playerid);
		}
	}
	else if(PlayerInfo[playerid][pFaction] == F_LCN)
	{
		SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s %s забрал у вас разрешение на угон автотранспорта", GetPlayerRank(playerid), ReturnPlayerName(playerid));
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы забрали у %s разрешение на угон автотранспорта", ReturnPlayerName(giveplayerid));
	    PlayerInfo[giveplayerid][pTheftLic] = 0;
		if(Job.GetPlayerJob(giveplayerid) == JOB_THEFT)
		{
			Job.SetPlayerJob(giveplayerid, JOB_NONE);
			SendClientMessage(playerid, COLOR_GREY, "Вы больше не можете взламывать и угонять автотранспорт");
			Job.UpdatePlayerMapIcon(playerid);
		}
	}
	else if(PlayerInfo[playerid][pFaction] == F_YAKUZA)
	{
		SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s %s забрал у вас разрешение на торговлю наркотиками", GetPlayerRank(playerid), ReturnPlayerName(playerid));
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, string, "Вы забрали у %s разрешение на торговлю наркотиками", ReturnPlayerName(giveplayerid));
	    PlayerInfo[giveplayerid][pDrugDealLic] = 0;
		if(Job.GetPlayerJob(giveplayerid) == JOB_DRUGDEAL)
		{
			Job.SetPlayerJob(giveplayerid, JOB_NONE);
			SendClientMessage(playerid, COLOR_GREY, "Вы больше не можете производить и продавать наркотики");
			Job.UpdatePlayerMapIcon(playerid);
		}
	}
	else{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "К сожалению, для вас недоступна эта команда.");
	}
	return true;
}*/

//  admin
flags:setwalk(CMD_DEVELOPER);
COMMAND:setwalk(playerid, params[])
{
	new giveplayerid, walk;
	if(sscanf(params, "rd", giveplayerid, walk))
	{
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setwalk [playerid/playername][walk]");
	}
	new string[128];
    if(!IsPlayerLogged(giveplayerid))
    {
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    }
    if(!(0 <= walk <= 13))
    {
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Стиль ходьбы должен быть от 0 до 13.");
    }
  	SetPlayerWalkingStyle(giveplayerid, walk);
	format(string, 128, "[AdmCmd]: %s %s[%d] выдал %d стиль ходьбы игроку %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, walk, ReturnPlayerName(giveplayerid), giveplayerid);
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s %s[%d] выдал вам %d стиль ходьбы", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, walk);
    return true;
}

flags:jailopen(CMD_DEVELOPER);
COMMAND:jailopen(playerid, params[])
{// [BT]
	JailDoorsMove(true);
	return SendClientMessage(playerid, COLOR_WHITE, "Двери камер открыты!");
}

flags:jailclose(CMD_DEVELOPER);
COMMAND:jailclose(playerid, params[])
{// [BT]
	JailDoorsMove(false);
	return SendClientMessage(playerid, COLOR_WHITE, "Двери камер закрыты!");
}

flags:jailpos(CMD_DEVELOPER);
COMMAND:jailpos(playerid, params[])
{// [BT]
    SetPlayerPos(playerid, Arr3<JailPos[ strval(params) ]>);
    SetPlayerFacingAngle(playerid, JailPos[ strval(params) ][3]);
    return true;
}

flags:jailstatus(CMD_DEVELOPER);
COMMAND:jailstatus(playerid, params[])
{// [BT]
	new status = strval(params);
	if(1 <= status <= 4)	OnPrisonStatusChange(strval(params));
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Используйте: /jailstatus [1-4]");
		SendClientMessage(playerid, COLOR_WHITE, "1 - работа, 2 - обед, 3 - прогулка, 4 - отбой");
	}
    return true;
}

flags:setanim(CMD_DEVELOPER);
COMMAND:setanim(playerid, params[])
{// [BT]
	new lib[32], name[32], Float:fDelta, loop, lockx, locky, freeze, time, forcesync;
    if(sscanf(params, "s[32]s[32]fdddddd", lib, name, fDelta, loop, lockx, locky, freeze, time, forcesync))
 		return SendClientMessage( playerid, COLOR_WHITE, "Используйте: /setanim [библиотека] [анимация] [fDelta] [loop] [lockx] [locky] [freeze] [time] [forcesync]" );
    LoopingAnim(playerid, lib, name, fDelta, loop, lockx, locky, freeze, time, forcesync);
	return true;
}

flags:setelement(CMD_DEVELOPER);
COMMAND:setelement(playerid, params[])
{// [BT]
    new targetid, value;
	if(sscanf(params, "rd", targetid, value))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setelement [playerid/playername] [значение]");
    if(!IsPlayerLogged(targetid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    new string[128];
	if(value < 0 || value > sizeof(AS_Mission) + 1)
		return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вводите значение элемента от 0 до %d.", sizeof(AS_Mission));
	PlayerInfo[targetid][pASElement] = value;
	UpdatePlayerBitData(playerid, "as_element", PlayerInfo[playerid][pASElement]);
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] изменил количество элементов АШ %s[%d]: %d шт.",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, value);
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] изменил вам кол-во пройденных элементов АШ: %d шт.", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, value);
	return true;
}

flags:getelement(CMD_DEVELOPER);
COMMAND:getelement(playerid, params[])
{// [BT]
    new targetid;
	if(sscanf(params, "r", targetid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /getelement [playerid/playername]");
    if(!IsPlayerLogged(targetid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new string[128];
	format(string, sizeof(string), "Игрок %s[%d] имеет элемент [%d] в автошколе", ReturnPlayerName(targetid), targetid, PlayerInfo[targetid][pASElement]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return true;
}

flags:setlaw(CMD_DEVELOPER);
COMMAND:setlaw(playerid, params[])
{// [BT]
    new targetid, lawnum;
	if(sscanf(params, "rd", targetid, lawnum))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setlaw [playerid/playername] [значение]");
    if(!IsPlayerLogged(targetid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(!(-50 <= lawnum <= 50))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите значение от -50 до 50.");
	new string[128];
	PlayerInfo[targetid][pLaw] = lawnum;
	UpdatePlayerStatics(targetid);
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] изменил законопослушность %s[%d]: %d ед.",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, lawnum);
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] изменил вашу законопослушность: %d ед.", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, lawnum);
	return true;
}

flags:setbank(CMD_DEVELOPER);
COMMAND:setbank(playerid, params[])
{
    new targetid, Float:bank;
	if(sscanf(params, "rf", targetid, bank))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setbank [playerid/playername] [значение]");
    if(!IsPlayerLogged(targetid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new string[128];
	PlayerInfo[targetid][pBank] = bank;
	UpdatePlayerStatics(targetid);
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] изменил банковский счет %s[%d]: $%.1f",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, bank);
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] изменил ваш банковский счет: $%.1f", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, bank);
	return true;
}

COMMAND:licenses(playerid, params[])
{
	ShowLicenses(playerid, playerid);
	PlayerAction(playerid, "просматривает свои лицензии.");
	return 1;
}

flags:checklic(CMD_HELPER);
COMMAND:checklic(playerid, params[])
{
    new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /checklic [playerid/playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	ShowLicenses(playerid, giveplayerid);
	return 1;
}

flags:givelic(CMD_DEVELOPER);
COMMAND:givelic(playerid, params[])
{
    new targetid, lic, value;
	if(sscanf(params, "rdd", targetid, lic, value))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Используйте: /givelic [playerid/playername] [лицензия] [0 - забрать, 1 - выдать]");
		SendClientMessage(playerid, COLOR_WHITE, "Лицензии: (1 - категория A, 2 - категория B, 3 - категория C, 4 - категория D, 5 - оружие)");
		return true;
	}
    if(!IsPlayerLogged(targetid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	new string[128];
	switch(lic)
	{
	    case 1:
	    {	// категория A
	        if(value == 0)
	        {
	            if(PlayerInfo[targetid][pCarLicA] == 0)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У этого игрока нет прав категории A.");
				PlayerInfo[targetid][pCarLicA] = 0;
				format(string, sizeof(string), "[AdmCmd]: %s %s[%d] забрал права категории A у игрока %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] забрал у вас права категории A", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	        else
	        {
	            if(PlayerInfo[targetid][pCarLicA] == 1)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок уже имеет права категории A.");
				PlayerInfo[targetid][pCarLicA] = 1;
			//#if defined _player_achieve_included	
			//	GivePlayerAchieve(playerid, ACHIEVE_DRIVER);
			//#endif	
				//if(mission_id[playerid] == MIS_GET_LICENSE)
				//{
				//	StoryMissionComplete(playerid, MIS_SOURCE_TRAINING, 0, 0);
				//}
				format(string, sizeof(string), "[AdmCmd]: %s %s[%d] выдал права категории A игроку %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] выдал вам права категории A", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	    }
	    case 2:
	    {	// категория B
	        if(value == 0)
	        {
	            if(PlayerInfo[targetid][pCarLicB] == 0)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У этого игрока нет прав категории B.");
				PlayerInfo[targetid][pCarLicB] = 0;
				format(string, sizeof(string), "[AdmCmd]: %s %s[%d] забрал права категории B у игрока %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] забрал у вас права категории B", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	        else
	        {
	            if(PlayerInfo[targetid][pCarLicB] == 1)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок уже имеет права категории B.");
				PlayerInfo[targetid][pCarLicB] = 1;
			//#if defined _player_achieve_included	
			//	GivePlayerAchieve(playerid, ACHIEVE_DRIVER);
			//#endif	
				//if(mission_id[playerid] == MIS_GET_LICENSE)
				//{
				//	StoryMissionComplete(playerid, MIS_SOURCE_TRAINING, 0, 0);
				//}
				format(string, sizeof(string), "[AdmCmd]: %s %s[%d] выдал права категории B игроку %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] выдал вам права категории B", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	    }
	    case 3:
	    {	// категория C
	        if(value == 0)
	        {
	            if(PlayerInfo[targetid][pCarLicC] == 0)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У этого игрока нет прав категории C.");
				PlayerInfo[targetid][pCarLicC] = 0;
				format(string, sizeof(string), "[AdmCmd]: %s %s[%d] забрал права категории C у игрока %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] забрал у вас права категории C", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	        else
	        {
	            if(PlayerInfo[targetid][pCarLicC] == 1)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок уже имеет права категории C.");
				PlayerInfo[targetid][pCarLicC] = 1;
			//#if defined _player_achieve_included	
			//	GivePlayerAchieve(playerid, ACHIEVE_DRIVER);
			//#endif	
				//if(mission_id[playerid] == MIS_GET_LICENSE)
				//{
				//	StoryMissionComplete(playerid, MIS_SOURCE_TRAINING, 0, 0);
				//}
				format(string, sizeof(string), "[AdmCmd]: %s %s[%d] выдал права категории C игроку %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] выдал вам права категории C", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	    }
	    case 4:
	    {	// категория B
	        if(value == 0)
	        {
	            if(PlayerInfo[targetid][pCarLicD] == 0)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У этого игрока нет прав категории D.");
				PlayerInfo[targetid][pCarLicD] = 0;
				format(string, sizeof(string), "[AdmCmd]: %s %s[%d] забрал права категории D у игрока %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] забрал у вас права категории D", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	        else
	        {
	            if(PlayerInfo[targetid][pCarLicD] == 1)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок уже имеет права категории D.");
				PlayerInfo[targetid][pCarLicD] = 1;
			//#if defined _player_achieve_included	
			//	GivePlayerAchieve(playerid, ACHIEVE_DRIVER);
			//#endif	
				//if(mission_id[playerid] == MIS_GET_LICENSE)
				//{
				//	StoryMissionComplete(playerid, MIS_SOURCE_TRAINING, 0, 0);
				//}
				format(string, sizeof(string), "[AdmCmd]: %s %s[%d] выдал права категории D игроку %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] выдал вам права категории D", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	    }
	    case 5:
	    {// Оружие
	        if(value == 0)
	        {
	            if(PlayerInfo[targetid][pGunLic] == 0)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У этого игрока и так нет лицензии на оружие.");
				PlayerInfo[targetid][pGunLic] = 0;
				PlayerInfo[targetid][pShooting] = 0;
	        	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] забрал лицензию на оружие игроку %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] забрал у вас лицензию на оружие", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	        else
	        {
	            if(PlayerInfo[targetid][pGunLic] == 1)
	                return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок уже имеет лицензию на оружие.");
				PlayerInfo[targetid][pGunLic] = 1;
				format(string, sizeof(string), "[AdmCmd]: %s %s[%d] выдал лицензию на оружие игроку %s[%d]",
					GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
				SendAdminMessage(COLOR_ADMIN, string);
				SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] выдал вам лицензию на оружие", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	        }
	    }
	    default: SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой лицензии не существует.");
	}
	UpdatePlayerStatics(targetid);
	return true;
}

flags:setskill(CMD_ADMIN);
COMMAND:setskill(playerid, params[])
{
	new targetid, skill, level, progress;
	if(sscanf(params, "rddd", targetid, skill, level, progress))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setskill [playerid/playername] [навык] [уровень] [прогресс]");
		SendClientMessage(playerid, COLOR_WHITE, "(1 - таксист, 2 - водитель автобуса, 3 - дальнобойщик)");
		return true;
	}
    if(!IsPlayerLogged(targetid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	new string[128];
	switch(skill)
	{
	    case 1:
	    {// таксист
	        PlayerInfo[targetid][pTaxiLevel] = level;
	        PlayerInfo[targetid][pTaxiSkill] = progress;
			format(string, sizeof(string), "[AdmCmd]: %s %s[%d] установил %s[%d] навык таксиста: %d ур. [%d]",
				GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, level, progress);
			SendAdminMessage(COLOR_ADMIN, string);
			SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] установил вам навык таксиста: %d ур. [%d]", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, level, progress);
	    }
	    case 2:
	    {// водитель автобуса
	        PlayerInfo[targetid][pBusLevel] = level;
	        PlayerInfo[targetid][pBusSkill] = progress;
			format(string, sizeof(string), "[AdmCmd]: %s %s[%d] установил %s[%d] навык водителя автобуса: %d ур. [%d]",
				GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, level, progress);
			SendAdminMessage(COLOR_ADMIN, string);
			SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] установил вам навык водителя автобуса: %d ур. [%d]", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, level, progress);
	    }
	    case 3:
	    {// дальнобойщик
	        PlayerInfo[targetid][pTruckLevel] = level;
	        PlayerInfo[targetid][pTruckSkill] = progress;
			format(string, sizeof(string), "[AdmCmd]: %s %s[%d] установил %s[%d] навык дальнобойщика: %d ур. [%d]",
				GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, level, progress);
			SendAdminMessage(COLOR_ADMIN, string);
			SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] установил вам навык дальнобойщика: %d ур. [%d]", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, level, progress);
	    }
	    default: SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой лицензии не существует.");
	}
	UpdatePlayerStatics(targetid);
	return true;
}

flags:setrank(CMD_DEVELOPER);
COMMAND:setrank(playerid, params[])
{
    new targetid, rank;
	if(sscanf(params, "rd", targetid, rank))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setrank [ид игрока] [rank]");
    if(!IsPlayerLogged(targetid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new faction = PlayerInfo[targetid][pFaction];
	if(faction == 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Игрок не состоит во фракции.");
	if(1 <= rank <= FactionRankMax[faction])
	{
		new string[128];
		SetPlayerFaction(targetid, PlayerInfo[targetid][pFaction], rank);
		format(string, sizeof(string), "[AdmCmd]: %s %s[%d] выдал новый ранг %s[%d]: %s (%d)",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, GetPlayerRank(targetid), rank);
		SendAdminMessage(COLOR_ADMIN, string);
		SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] выдал вам новый ранг: %s (%d)", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, GetPlayerRank(targetid), rank);
	}
	else{
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого ранга нет во фракции игрока.");
	}
	return true;
}

flags:unjail(CMD_ADMIN);
COMMAND:unjail(playerid, params[])
{
	new targetid;
	if(sscanf(params, "r", targetid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /unjail [ид игрока]");
    if(!IsPlayerLogged(targetid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(PlayerInfo[targetid][pJailTime] == 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Игрок не в тюрьме.");
	new string[128];
	format(string, 128, "[AdmCmd]: %s %s[%d] выпустил из тюрьмы игрока %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid);
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "Администратор %s выпустил вас из тюрьмы", ReturnPlayerName(playerid));
	KillTimer(GetPVarInt(playerid, "Prison:FlyCamera:Timer"));
    return JailDelivery(targetid);
}

flags:jaillist(CMD_DEVELOPER);
COMMAND:jaillist(playerid, params[])
{
	new lstring[1792];
	if(Iter_Count(Prisoners))
	{
	    new curtime;
		new const nowtime = gettime();
		foreach(Prisoners, i)
		{
		    if(PlayerInfo[i][pJailTime] > 0)
		    {
		        curtime = PlayerInfo[i][pJailTime]-nowtime;
			    format(lstring, sizeof(lstring), "%s{AFAFAF}• {FFFFFF}%s[%d] (%02d мин %02d сек)\n", lstring, ReturnPlayerName(i), i, curtime/60, curtime%60);
			}
		}
	}
	else lstring = "{AFAFAF}< В тюрьме нет заключенных. >";
	MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_LIST, "Список заключенных:", lstring, "Закрыть");
	return 1;
}

flags:gpe(CMD_DEVELOPER);
COMMAND:gpe(playerid, params[])
{// [BT]
    new giveplayerid, amount;
	if(sscanf(params, "ri", giveplayerid, amount))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /gpe [playerid/playername] [amount]");
    if(!IsPlayerLogged(giveplayerid))
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	return GivePlayerEXP(giveplayerid, amount);
}

flags:botinfo(CMD_DEVELOPER);
COMMAND:botinfo(playerid, params[])
{
	new giveplayerid, level;
	if(sscanf(params, "ri", giveplayerid, level))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /botinfo [playerid/playername] [level]");
    if(!IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    if(IsPlayerLogged(giveplayerid))
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок уже авторизован.");

	new string[128];
	SetPlayerScore(giveplayerid, level);
	SetPlayerColor(giveplayerid, 0xFFFFFF00);
	SendFormatMessage(playerid, COLOR_SERVER, string, "[BT] Вы изменили цвет и уровень боту %s[%d]", ReturnPlayerName(giveplayerid), giveplayerid);
	return 1;
}

flags:setupgrade(CMD_DEVELOPER);
COMMAND:setupgrade(playerid, params[])
{
    new targetid, amount;
	if(sscanf(params, "ri", targetid, amount)){
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setupgrade [playerid/playername] [amount]");
	}
    if(!IsPlayerLogged(targetid)){
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    }
    new string[256];
	PlayerInfo[targetid][pUpgrade] = amount;
	//UpdatePlayerUpgrade(targetid);
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] изменил кол-во апгрейдов %s[%d]: %d шт.",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, amount);
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] изменил ваш уровень: %d шт.", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, amount);
	return true;
}

flags:tds(CMD_DEVELOPER);
COMMAND:tds(playerid, params[])
{// [BT]
	new bool:effect;
	if(sscanf(params, "b", effect))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /tds [value]");
	IFace.ToggleGroup(playerid, IFace.TV_EFFECT, effect);
	return true;
}

flags:cp(CMD_DEVELOPER);
COMMAND:cp(playerid, params[])
{// [BT]
	new Float:X, Float:Y, Float:Z, Float:size;
	if(sscanf(params, "p<,>ffff", X, Y, Z, size))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /cp [X,Y,Z,size]");
	return MySetPlayerCheckpoint(playerid, CPMODE_NONE, X, Y, Z, size);
}

flags:cpdel(CMD_DEVELOPER);
COMMAND:cpdel( playerid, params[] )
{// [BT]
	return MyDisablePlayerCheckpoint(playerid);
}

flags:sound(CMD_DEVELOPER);
COMMAND:sound(playerid, params[])
{// [BT]
    new soundid;
	if(sscanf(params, "i", soundid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /sound [soundid]");
	new string[32];
	format(string, 32, "~g~Sound ID: ~w~%d", soundid);
	GameTextForPlayer(playerid, string, 1500, 4);
	return PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
}

flags:gametext(CMD_DEVELOPER);
COMMAND:gametext(playerid, params[])
{// [BT]
	new string[128], style;
	if(sscanf(params, "is[128]", style, string))
		return SendClientMessage( playerid, COLOR_WHITE, "Используйте: /gametext [style] [string]" );
	//format(string, 128, "%s", string);
	return GameTextForPlayer(playerid, string, 3000, style);
}

flags:gt(CMD_DEVELOPER);
COMMAND:gt(playerid, params[])
{// [BT]
	new string[128], style, type;
	if(sscanf(params, "iis[128]", type, style, string) || type < 0 || type > 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /gt [rusik] [style] [string]");
	return GameTextForAll(RusText(string, type), 3000, style);
}

flags:mmessage(CMD_DEVELOPER);
COMMAND:mmessage(playerid, params[])
{// [BT]
	new string[128];
	if(sscanf(params, "s[128]", string))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /mmessage [string]");
	return SendMissionMessage(playerid, string);
}

flags:minfo(CMD_DEVELOPER);
COMMAND:minfo(playerid, params[])
{// [BT]
	new string[128];
	if(sscanf(params, "s[128]", string))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /minfo [string (0 = hide)]");
	if(strcheck(string, "0")) return HideMissionInfo(playerid);
	return ShowMissionInfo(playerid, string);
}

flags:hint(CMD_DEVELOPER);
COMMAND:hint(playerid, params[])
{// [BT]
	new string[128], time;
	if(sscanf(params, "s[128]d", string, time))
		return SendClientMessage( playerid, COLOR_WHITE, "Используйте: /hint [string] [time]" );
	return ShowPlayerHint(playerid, string, time);
}

flags:getnitro(CMD_DEVELOPER);
COMMAND:getnitro(playerid, params[])
{// [BT]
	if(GetPlayerState(playerid) != 2)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны сесть на место водителя.");
	return AddVehicleComponent(GetPlayerVehicleID(playerid), 1008+random(3));
}

flags:cbonus(CMD_DEVELOPER);
COMMAND:cbonus(playerid, params[])
{
	extract params -> new type, ammo, use; else
	{
		SendClientMessage(playerid, -1, "Используйте: /cbonus  [тип] [кол-во] [кол-во использований (0 - для всех)] [код (макс. 32 символа)] ");
		SendClientMessage(playerid, -1, "Типы: 0 - Деньги, 1 - Монеты, 2 - Опыт");
		return SendClientMessage(playerid, COLOR_YELLOW, "Код можно оставить пустым, тогда он будет сгенерирован автоматически!");
	}
	if(type < 0 || type > 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Тип может быть от 0 до 2.");
	    return SendClientMessage(playerid, COLOR_WHITE, "Типы: 0 - Деньги, 1 - Монеты, 2 - Опыт");
	}
	if(ammo <= 0)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Значение бонуса не может быть отрицательным.");

	new code[MAX_CODE_SIZE];
	sscanf(params, "{iii}s[" #MAX_CODE_SIZE "]", code);
	if(!strlen(code))	strmid(code, generateCode(8), 0, 8);

	new stmp[256];
	mysql_format(g_SQL, stmp, sizeof stmp, "SELECT COUNT(*) AS count FROM `bonuses` WHERE `code` = '%e'", code);
	new Cache:result = mysql_query(g_SQL, stmp);
	new res;
	cache_get_value_name_int(0, "count", res);
	cache_delete(result);
	if(res)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой код уже создан.");
	mysql_format(g_SQL, stmp, sizeof stmp, "INSERT INTO `bonuses` SET `using` = '%d', `code` = '%e', `type` = '%d', `value` = '%d', `creator` = '%d'", use, code, type, ammo, PlayerInfo[playerid][pUserID]);
	result = mysql_query(g_SQL, stmp);
	new date[3], time[3], stype[16];
	getdate(Arr3<date>);	gettime(Arr3<time>);
	if(type == 0) 		stype = "Деньги";
	else if(type == 1) 	stype = "Монеты";
	else if(type == 2) 	stype = "Опыт";
	SendFormatMessage(playerid, -1, stmp, "Бонус код '{33AA33}%s{FFFFFF}' создан, тип бонуса: '{33AA33}%s{FFFFFF}', значение: '{33AA33}%d{FFFFFF}' (%02d/%02d/%04d %02d:%02d)", code, stype, ammo, date[2], date[1], date[0], time[0], time[1]);
	return true;
}

flags:bonuslist(CMD_DEVELOPER);
COMMAND:bonuslist(playerid, params[])
{
    return ShowDialog(playerid, DMODE_BONUS_LIST);
}

flags:delbonus(CMD_DEVELOPER);
COMMAND:delbonus(playerid, params[])
{
	new code[MAX_CODE_SIZE];
	if(sscanf(params, "s[" #MAX_CODE_SIZE "]", code))
		return SendClientMessage(playerid, -1, "Используйте: /delbonus [код]");
	new stmp[64], res;
	mysql_format(g_SQL, stmp, sizeof stmp, "SELECT COUNT(*) AS count FROM `bonuses` WHERE `code` = '%e'", code);
	new Cache:result = mysql_query(g_SQL, stmp);
	cache_get_value_name_int(0, "count", res);
	cache_delete(result);
	if(res == 0)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой бонус код не создан.");
	mysql_format(g_SQL, stmp, sizeof stmp, "DELETE FROM `bonuses` WHERE `code` = '%e'", code);
	mysql_query_ex(stmp);
	SendFormatMessage(playerid, -1, stmp, "Бонус код '{33AA33}%s{FFFFFF}' успешно удален!", code);
	return true;
}

flags:headshot(CMD_DEVELOPER);
COMMAND:headshot(playerid, params[])
{// [BT]
	if(sscanf(params, "i", HEADSHOT))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /headshot [status]");
	new string[128];
    format(string, 128, "[AdmCmd]: %s[%d] set headshot mode to %d", ReturnPlayerName(playerid), playerid, HEADSHOT);
	return SendAdminMessage(COLOR_LIGHTRED, string, 3);
}

flags:anticheat(CMD_DEVELOPER);
COMMAND:anticheat(playerid, params[])
{// [BT]
	new bool:anticheat;
	if(sscanf(params, "b", anticheat)){
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /anticheat [status]");
	}
	new string[128];
	Anticheat.Toggle(anticheat);
	foreach(LoginPlayer, i)
	{
		SetPVarInt(i, "AC:ChangePos:GTC", GetTickCount());
		MyGetPlayerPos(playerid, Arr3<OldPlayerPos[i]>);
	}
    format(string, sizeof(string), "[AdmCmd]: %s[%d] set anticheat to %d", ReturnPlayerName(playerid), playerid, Anticheat.GetToggle());
	return SendAdminMessage(COLOR_LIGHTRED, string, 3);
}

flags:delcars(CMD_ADMIN);
COMMAND:delcars(playerid, params[])
{
	new count = 0;
	foreach(Vehicle, v)
	{
	    if(CarInfo[v][cType] == C_TYPE_EVENT)
		{
		    count++;
			MyDestroyVehicle(v);
			v = VehInfo[v][vIterNext];
		}
	}
	new string[128];
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] удалил ивент машины: %d шт.", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, count);
	SendAdminMessage(COLOR_ADMIN, string);
    return 1;
}

flags:delcar(CMD_ADMIN);
COMMAND:delcar(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в транспорте.");
	new string[128];
    new vehicleid = GetPlayerVehicleID(playerid);
    MyDestroyVehicle(vehicleid);
    format(string, sizeof(string), "Машина #%d успешно удалена", vehicleid);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);
    return 1;
}

flags:entercar(CMD_ADMIN);
COMMAND:entercar(playerid, params[])
{// [BT]
    new vehicleid;
	if(sscanf(params, "i", vehicleid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /entercar [vehicleid] [seatid]");
    if(vehicleid <= 0 || !VehInfo[vehicleid][vCreated])
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта машина еще не создана.");
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Выйдите из транспорта для телепорта.");
	new seatid = 0;
	sscanf(params, "{i}i", seatid);
	return MyPutPlayerInVehicle(playerid, vehicleid, seatid);
}

flags:gmcheck(CMD_MODER);
COMMAND:gmcheck(playerid, params[])
{// [BT]
    new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /gmcheck [playerid/playername]");
	}
    if(!IsPlayerLogged(giveplayerid))
    {
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	}
    new Float:Health;
    GetPlayerHealth(giveplayerid, Health);
    MySetPlayerHealth(giveplayerid, Health-1.0);
	SetTimerEx("GM_TIMER2", 1000, false, "iif", playerid, giveplayerid, Health);
	return 1;
}

Public: GM_TIMER2(playerid, giveplayerid, Float:Health2)
{
	new string[128], Float:Health;
    GetPlayerHealth(giveplayerid, Health);
    format(string, 128, "Игрок %s проверен на годмод: ", ReturnPlayerName(giveplayerid));
	if(IsPlayerAFK(giveplayerid)) strcat(string, "{F5DEB3}Неизвестно (AFK)");
    else if(Health == Health2) strcat(string, "{FF6347}Читер");
    else
	{
		strcat(string, "{33AA33}Не читер");
		MySetPlayerHealth(giveplayerid, Health+1.0);
	}
	SendClientMessage(playerid, COLOR_WHITE, string);

}

flags:mycmd(CMD_DEVELOPER);
COMMAND:mycmd(playerid, params[])
{// [BT]
	new acmd[32], string[256], giveplayerid;
	if(sscanf(params, "rs[32]s[256]", giveplayerid, acmd, string))
	    return SendClientMessage(playerid, -1, "Используйте: /mycmd [playerid/playername] [cmd] [params]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new funcname[32] = "pc_cmd_";
	strmid(funcname[7], acmd, 1, strlen(acmd), 28);
	CallLocalFunction(funcname, "is", giveplayerid, string);
	return 1;
}

flags:clock(CMD_DEVELOPER);
COMMAND:clock(playerid, params[])
{// [BT]
	ClockStatus = !ClockStatus;
	TogglePlayerClock(playerid, ClockStatus);
	return 1;
}

flags:payday(CMD_DEVELOPER);
COMMAND:payday(playerid, params[])
{// [BT]
	EveryHourTimer();
	return 1;
}

flags:myweapon(CMD_DEVELOPER);
COMMAND:myweapon(playerid, params[])
{// [BT]
	Inv.GivePlayerWeapon(playerid, 1, 1);  // Slot 0
	Inv.GivePlayerWeapon(playerid, 2, 1);  // Slot 1
	Inv.GivePlayerWeapon(playerid, 22, 10);// Slot 2
	Inv.GivePlayerWeapon(playerid, 25, 11);// Slot 3
	Inv.GivePlayerWeapon(playerid, 28, 12);// Slot 4
	Inv.GivePlayerWeapon(playerid, 30, 13);// Slot 5
	Inv.GivePlayerWeapon(playerid, 33, 14);// Slot 6
	Inv.GivePlayerWeapon(playerid, 35, 15);// Slot 7
	Inv.GivePlayerWeapon(playerid, 16, 16);// Slot 8
	Inv.GivePlayerWeapon(playerid, 43, 17);// Slot 9
	Inv.GivePlayerWeapon(playerid, 14, 1);// Slot 10
	Inv.GivePlayerWeapon(playerid, 46, 1);// Slot 11
	return 1;
}

flags:reset(CMD_DEVELOPER);
COMMAND:reset(playerid, params[])
{
    new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /reset [playerid/playername]");
	}
    if(IsPlayerLogged(giveplayerid) == 0)
    {
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	}
	MyResetPlayerWeapons(giveplayerid);
	new string[128];
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] очистил все оружие игрока %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	SendAdminMessage(COLOR_ADMIN, string);
	if(GetPlayerAdmin(giveplayerid) == 0)
	{
		SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s {FFFFFF}%s{33CCFF} очистил все ваше оружие", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid));
	}
	return true;
}

flags:specoff(CMD_HELPER);
COMMAND:specoff(playerid, params[])
{
    TogglePlayerSpectating(playerid, 0);
    Iter_Remove(Spectators, playerid);
    SpectateID[playerid] = INVALID_PLAYER_ID;
    Interface_SpecPanel_Toggle(playerid, false);
    CancelSelectTextDraw(playerid);
    return 1;
}

flags:speclist(CMD_DEVELOPER);
COMMAND:speclist(playerid, params[])
{// [BT]
	new lstring[1792];
	if(Iter_Count(Spectators))
	{
		foreach(Spectators, i)
		{
		    format(lstring, sizeof(lstring), "%s{AFAFAF}• {FFFFFF}%s %s[%d] > %s[%d]\n", lstring, GetPlayerAdminStatus(i), ReturnPlayerName(i), i, ReturnPlayerName(SpectateID[i]), SpectateID[i]);
		}
	}
	else lstring = "{AFAFAF}< Наблюдателей нет. >";
	MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_LIST, "Список наблюдающих:", lstring, "Закрыть");
	return 1;
}

stock UpdatePlayerSpectate(playerid, giveplayerid)
{
	SetTimerEx("Timer_UpdatePlayerSpectate", 1000, false, "ii", playerid, giveplayerid);
}

Public: Timer_UpdatePlayerSpectate(playerid, giveplayerid)
{
    if(IsPlayerInAnyVehicle(giveplayerid))
	{
	    new carid = GetPlayerVehicleID(giveplayerid);
	    PlayerSpectateVehicle(playerid, carid);
	}
	else PlayerSpectatePlayer(playerid, giveplayerid);
	SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
}

flags:spec(CMD_MODER);
COMMAND:spec(playerid, params[])
{
    new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /spec [playerid/playername]");
    if(playerid == giveplayerid)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете наблюдать за самим собой.");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(SpectateID[playerid] == INVALID_PLAYER_ID)
	{
		new Float:pos[3];
		GetPlayerPos(playerid, Arr3<pos>);
		MySetPlayerSpawnPos(playerid, Arr3<pos>, 180.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		MyChangePlayerWeapon(playerid, true);
	}
	PoliceMissionCancel(playerid, "quit");

	Iter_Add(Spectators, playerid);
	SpectateID[playerid] = giveplayerid;
    TogglePlayerSpectating(playerid, true);
	UpdatePlayerSpectate(playerid, giveplayerid);
	Timer_UpdatePlayerSpectate(playerid, giveplayerid);

	new string[128];
	format(string, 128, "[AdmCmd]: %s %s[%d] начал следить за %s[%d]", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	SendAdminMessage(COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_WHITE, PREFIX_HINT "Для отключения спектора используйте "SCOLOR_HINT"/specoff"SCOLOR_WHITE".");
	Interface_SpecPanel_Toggle(playerid, true);
	SelectTextDraw(playerid, 0xFCEC3AFF);
	return 1;
}

flags:setfuel(CMD_DEVELOPER);
COMMAND:setfuel(playerid, params[])
{
    new targetid, Float:fuel;
	if(sscanf(params, "rf", targetid, fuel))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setfuel [playerid/playername] [fuel 0-100]");
	}
    if(!IsPlayerLogged(targetid))
    {
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	}
	new string[256];
	new vehicleid = GetPlayerVehicleID(targetid);
	if(vehicleid)
	{
		if(!(0.0 <= fuel <= GetVehicleMaxFuel(vehicleid)))
		{
			SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вводите бензин от 0 до %d.", GetVehicleMaxFuel(vehicleid));
			return 1;
		}
		VehInfo[vehicleid][vFuel] = fuel;
		IFace.Veh_Update(targetid, 0);
		format(string, sizeof(string), "[AdmCmd]: %s %s[%d] установил топливо для %s[%d] на %.1fл",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, fuel);
		SendAdminMessage(COLOR_ADMIN, string);
		SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] установил уровень бензина в вашем транспорте на %.1fл", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, fuel);
	}
	else SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок не в машине.");
	return 1;
}

flags:setdrunk(CMD_DEVELOPER);
COMMAND:setdrunk(playerid, params[])
{// [BT]
    new targetid, drunklevel;
	if(sscanf(params, "ri", targetid, drunklevel)){
	   	return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setdrunk [playerid/playername] [drunklevel]");
	}
    if(!IsPlayerLogged(targetid)){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	}
	if(!(0 <= drunklevel <= 50000)){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите степень опьянения от 0 до 50000.");
	}
	new string[256];
	SetPlayerDrunkLevel(targetid, drunklevel);
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] изменил опьянение %s[%d]: %d",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(targetid), targetid, drunklevel);
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(targetid, COLOR_LIGHTBLUE, string, "%s %s[%d] изменил вам уровень опьянения: %d", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, drunklevel);
	return 1;
}

flags:pickup(CMD_DEVELOPER);
COMMAND:pickup(playerid, params[])
{// [BT]
    new objectid, type;
	if(sscanf(params, "dd", type, objectid))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Используйте: /pickup [type] [pickupid]");
		return 1;
	}
	new string[128];
	new Float:x, Float:y, Float:z, Float:a;
	MyGetPlayerPos(playerid, x, y, z, a);
	x += (2 * floatsin(-a, degrees));
	y += (2 * floatcos(-a, degrees));
	DestroyDynamicPickup(TestPickup[playerid]), TestPickup[playerid] = INVALID_STREAMER_ID;
	TestPickup[playerid] = CreateDynamicPickup(objectid, type, x, y, z, 0, 0, 0);
	format(string, 128, "[object]: Создан пикап ID %d", objectid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

flags:object(CMD_DEVELOPER);
COMMAND:object(playerid, params[])
{// [BT]
    new objectid;
	if(sscanf(params, "d", objectid))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Используйте: /object [objectid]");
		return 1;
	}
	new string[128];
	new Float:x, Float:y, Float:z, Float:a;
	MyGetPlayerPos(playerid, x, y, z, a);
	x += (2 * floatsin(-a, degrees));
	y += (2 * floatcos(-a, degrees));
	DestroyDynamicObject(TestObject[playerid]);
	TestObject[playerid] = CreateDynamicObject(objectid, x, y, z, 0, 0, 0);
	EditDynamicObject(playerid, TestObject[playerid]);
	format(string, 128, "[object]: Создан объект ID %d", objectid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

flags:selectobject(CMD_DEVELOPER);
CMD:selectobject(playerid, params[])
{
	SelectObject(playerid);
	return true;
}

flags:objectmat(CMD_DEVELOPER);
COMMAND:objectmat(playerid, params[])
{// [BT]
    new objectid, materialindex, modelid, txdname[32], texturename[32], colour;
	if(sscanf(params, "ddds[32]s[32]h", objectid, materialindex, modelid, txdname, texturename, colour))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Используйте: /objectmat [objectid] [materialindex] [modelid] [txdname] [texturename] [colour]");
		return 1;
	}
	new string[128];
	new Float:x, Float:y, Float:z, Float:a;
	MyGetPlayerPos(playerid, x, y, z, a);
	x += (2 * floatsin(-a, degrees));
	y += (2 * floatcos(-a, degrees));
	DestroyDynamicObject(TestObject[playerid]);
	TestObject[playerid] = CreateDynamicObject(objectid, x, y, z, 0, 0, 0);
	SetDynamicObjectMaterial(TestObject[playerid], materialindex, modelid, txdname, texturename, colour);
	EditDynamicObject(playerid, TestObject[playerid]);
	format(string, 128, "[object]: Создан объект ID %d", objectid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

flags:carcheck(CMD_MODER);
COMMAND:carcheck(playerid, params[])
{// [BT]
	new v = GetNearVehicles(playerid);
	if(!v)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости нет ни одной машины.");

	new string[164];
	for(new i; i < BREAK_CAR_CODE_LEN; i++)
	{
		if((VehInfo[v][vBitHack] >> i ^ 0) & 1) strcat(string, "L");
		else strcat(string, "R");
	}
    format(string, 164, "[BT]: Vehicle #%d, BitHack[%s]", v, string);
	if(CarInfo[v][cID] > 0 && CarInfo[v][cType] == C_TYPE_PLAYER)
	{
	    format(string, 164, "%s Owner[%s]", string, GetPlayerUsername(CarInfo[v][cOwnerID]));
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

flags:check(CMD_MODER);
COMMAND:check(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /check [playerid/playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	ShowStats(playerid, giveplayerid);
	return 1;
}

flags:getwage(CMD_MODER);
COMMAND:getwage(playerid,params[])
{
	new giveplayerid;
    if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /getwage [playerid/playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new string[128];
	format(string, sizeof(string), "%s[%d] в ближайший PayDay получит: {FFFFFF}$%.1f [vip: %d]", ReturnPlayerName(giveplayerid), giveplayerid, Job.GetPlayerWage(giveplayerid), PlayerInfo[giveplayerid][pVip]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    return 1 ;
}

flags:reloadmaps(CMD_DEVELOPER);
COMMAND:reloadmaps(playerid, params[])
{
	SendRconCommand("reloadfs objects");
	SendClientMessage(playerid, COLOR_GREY, "Маппинг сервера перезагружен.");
	return true;
}

COMMAND:aduty(playerid, params[])
{
	if(!IsPlayerAdmin(playerid) && PlayerInfo[playerid][pAdmin] == 0)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
	new string[128];
	if(AdminDuty[playerid])
	{
	    format(string, sizeof(string), "[AdmCmd]: %s %s[%d] выходит с дежурства", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	    SendAdminMessage(COLOR_ADMIN, string, 1);
	    AdminDuty[playerid] = false;
	    Interface_AdmPanel_Toggle(playerid, false);
	}
	else
	{
	    new adminpass[32];
		if(sscanf(params, "s[32]", adminpass))
		    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /aduty [password]");
		if(strcheck(adminpass, ADMIN_PASS))
		{
		    AdminDuty[playerid] = true;
		    format(string, sizeof(string), "[AdmCmd]: %s %s[%d] заходит на дежурство", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
		    SendAdminMessage(COLOR_ADMIN, string, 1);
		    if(GetPlayerAdmin(playerid) >= ADMIN_MODER)	Interface_AdmPanel_Toggle(playerid, true);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Неверный админ-пароль.");
		    format(string, sizeof(string), "[AdmWrn]: %s[%d] пытается зайти на админ-дежурство с неверным паролем", ReturnPlayerName(playerid), playerid);
		    SendAdminMessage(COLOR_RED, string); 
		}
	}
	return true;
}

flags:sethunger(CMD_ADMIN);
CMD:sethunger(playerid, params[])
{
	new giveplayerid, hunger;
	if(sscanf(params, "rd", giveplayerid, hunger))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /sethunger [playerid/playername] [hunger]");

    if(!IsPlayerLogged(giveplayerid))
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	SetPlayerHunger(giveplayerid, hunger);
	//
	new string[128];
	format(string, 128, "[AdmCmd]: %s %s[%d] установил сытость игрока %s[%d] %d%s",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, hunger, "%%");
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s %s[%d] установил вашу сытость на: {FFFFFF}%d%s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, hunger, "%%");
	return true;
}

flags:sethp(CMD_ADMIN);
COMMAND:sethp(playerid, params[])
{
	new giveplayerid, Float:health;
	if(sscanf(params, "rf", giveplayerid, health))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /sethp [playerid/playername] [health]");

    if(!IsPlayerLogged(giveplayerid))
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	new Float:oldheal;
	GetPlayerHealth(giveplayerid, oldheal);
	MySetPlayerHealth(giveplayerid, health);
	//
	new string[128];
	format(string, 128, "[AdmCmd]: %s %s[%d] изменил здоровье игрока %s[%d] до %.1f хп",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, health);
	SendAdminMessage(COLOR_ADMIN, string);
	if(health < 100 && health < oldheal)
		GameTextForPlayer(giveplayerid, "~r~infected     ~n~~w~     by admin", 3000, 4);
	else
		GameTextForPlayer(giveplayerid, "~g~healed     ~n~~w~     by admin", 3000, 4);
	return 1;
}

flags:setarmour(CMD_ADMIN);
COMMAND:setarmour(playerid, params[])
{
	new giveplayerid, Float:armour;
	if(sscanf(params, "rf", giveplayerid, armour))
	{
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setarmour [playerid/playername] [health]");
	}
    if(IsPlayerLogged(giveplayerid) == 0)
    {
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    }
	new Float:oldarmour;
	GetPlayerArmour(giveplayerid, oldarmour);
	MySetPlayerArmour(giveplayerid, armour);
	//
	new string[128];
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] изменил броню игрока %s[%d] до %.1f хп",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, armour);
	SendAdminMessage(COLOR_ADMIN, string);
	if(armour < 100 && armour < oldarmour)
		GameTextForPlayer(giveplayerid, "~r~disarmed     ~n~~w~     by admin", 3000, 4);
	else
		GameTextForPlayer(giveplayerid, "~g~armed     ~n~~w~     by admin", 3000, 4);
	return 1;
}

flags:explode(CMD_DEVELOPER);
COMMAND:explode(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /explode [playerid/playername]");

    if(!IsPlayerLogged(giveplayerid))
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	if(playerid != giveplayerid && GetPlayerAdmin(giveplayerid) >= ADMIN_MODER)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете подорвать админа.");

	new string[128];
	format(string, 128, "[AdmCmd]: %s %s[%d] подорвал игрока %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	SendAdminMessage(COLOR_ADMIN, string);

	new Float:x, Float:y, Float:z;
    GetPlayerPos(giveplayerid, x, y, z);
    foreach(Player, i)
    {
        if(IsPlayerInRangeOfPoint(i, 50.0, x, y, z))
        {
            PlayAudioStreamForPlayer(i, AUDIOFILE_PATH "/takbir.mp3", x, y, z, 50.0, 1);
        }
    }
    SetTimerEx("takbir_explode", 1000, false, "d", giveplayerid);
	return 1;
}

Public: takbir_explode(playerid)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    CreateExplosion(x, y, z, 7, 20.0);
    SetTimerEx("takbir_nasheed", 1200, false, "fff", x, y, z);
    return 1;
}

Public: takbir_nasheed(Float:x, Float:y, Float:z)
{
    foreach(Player, i)
    {
        if (IsPlayerInRangeOfPoint(i, 50.0, x, y, z))
        {
            PlayAudioStreamForPlayer(i, AUDIOFILE_PATH "/nasheed.mp3", x, y, z, 50.0, 1);
        }
    }
}

flags:slap(CMD_MODER);
COMMAND:slap(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /slap [playerid/playername]");

    if(!IsPlayerLogged(giveplayerid))
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	if(playerid != giveplayerid && GetPlayerAdmin(giveplayerid) >= ADMIN_MODER)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете подбросить админа.");

	new Float:height = 7.0;
	new Float:X, Float:Y, Float:Z;
	sscanf(params, "{r}f", height);
	GetPlayerPos(giveplayerid, X, Y, Z);
	MySetPlayerPos(giveplayerid, X, Y, Z+height);
	PlayerPlaySound(giveplayerid, 1130, 0.0, 0.0, 0.0);
	//
	new string[128];
	format(string, 128, "[AdmCmd]: %s %s[%d] подбросил игрока %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	SendAdminMessage(COLOR_ADMIN, string);
	return 1;
}

stock AJailPlayer(playerid, time)
{
	PlayerBusy{playerid} = true;
	PlayerInfo[playerid][pAJailTime] = gettime() + (time * 60);
	SetPlayerSpawn(playerid);
	MySpawnPlayer(playerid);
}

flags:ajail(CMD_MODER);
COMMAND:ajail(playerid, params[])
{
	new giveplayerid, time, reason[64];
	if(sscanf(params, "rds[64]", giveplayerid, time, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /ajail [playerid/playername][минуты][причина]");

    if(!IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	//if(playerid == giveplayerid)
	//	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете посадить в тюрьму самого себя.");

	new string[128];
	format(string, 128, "[AdmCmd]: %s %s[%d] посадил %s[%d] в тюрьму на %d минут: %s",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, time, reason);
	MySendClientMessageToAll(COLOR_LIGHTRED, string), Admin_Log(string);
	PlayerPlaySound(giveplayerid, 1085, 0.0, 0.0, 0.0);

	AJailPlayer(giveplayerid, time);
	return true;
}

flags:kick(CMD_MODER);
COMMAND:kick(playerid, params[])
{
	new giveplayerid, reason[64];
	if(sscanf(params, "rs[64]", giveplayerid, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /kick [playerid/playername] [причина]");

    if(!IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	if(playerid == giveplayerid)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете кикнуть самого себя.");

	new string[128];
	if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
	{
	    format(string, 128, "[AdmWrn]: %s %s[%d] пытается кикнуть старшего админа %s[%d]",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	    return SendAdminMessage(COLOR_LIGHTRED, string);
	}
	format(string, 128, "[AdmCmd]: %s %s[%d] кикнул игрока %s[%d]: %s",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, reason);
	MySendClientMessageToAll(COLOR_LIGHTRED, string), Admin_Log(string);
	PlayerPlaySound(giveplayerid, 1085, 0.0, 0.0, 0.0);
	KickEx(giveplayerid);
	return true;
}

flags:askunmute(CMD_MODER);
COMMAND:askunmute(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /askunmute [playerid/playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    if(PlayerInfo[giveplayerid][pAskMute] < gettime())
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок и так не забанен в чате.");

	new string[128];
	PlayerInfo[giveplayerid][pAskMute] = 0;
    format(string, 128, "[AdmCmd]: %s %s[%d] разблокировал админ-связь игроку %s[%d]", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	SendAdminMessage(COLOR_ADMIN, string);
	if(GetPlayerAdmin(giveplayerid) == 0)
	{
		format(string, 128, "%s %s[%d] разблокировал вам админ-связь", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
		SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
	}
	PlayerPlaySound(giveplayerid, 1085, 0.0, 0.0, 0.0);
	return 1;
}

flags:askmute(CMD_MODER);
COMMAND:askmute(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /askmute [playerid/playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    if(playerid == giveplayerid)
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете заблокировать админ-связь самому себе.");

	new string[128];
	PlayerInfo[giveplayerid][pAskMute] = gettime() + 5 * 60;
    format(string, 128, "[AdmCmd]: %s %s[%d] забанил админ-связь игроку %s[%d] на 5 минут", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	SendAdminMessage(COLOR_ADMIN, string);
	if(GetPlayerAdmin(giveplayerid) == 0)
	{
		format(string, 128, "%s %s[%d] заблокировал вам админ-связь на 5 минут", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
		SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
	}
	PlayerPlaySound(giveplayerid, 1085, 0.0, 0.0, 0.0);
	return 1;
}

flags:mute(CMD_MODER);
COMMAND:mute(playerid, params[])
{
	new string[128], giveplayerid, mutetime;
	if(sscanf(params, "ris[128]", giveplayerid, mutetime, string))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /mute [playerid] [время(мин)] [причина]");

    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(mutetime > 60)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Время бана чата не может превышать 60 минут.");
	if(mutetime < 0)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Время бана чата должно быть положительной величиной.");
	else if(mutetime == 0)
	{
	    if(PlayerInfo[giveplayerid][pMuteTime] == 0)
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок и так не забанен в чате.");

		PlayerInfo[giveplayerid][pMuteTime] = 0;
	    format(string, 128, "[AdmCmd]: %s %s[%d] снял лампочку с игрока %s[%d]",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	    MySendClientMessageToAll(COLOR_LIGHTRED, string);
	    return 1;
	}
    if(playerid == giveplayerid)
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете дать лампочку самому себе.");

	PlayerInfo[giveplayerid][pMuteTime] = mutetime*60;
    format(string, 128, "[AdmCmd]: %s %s[%d] забанил чат игроку %s[%d] на %d мин: %s",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, mutetime, string);
    MySendClientMessageToAll(COLOR_LIGHTRED, string), Admin_Log(string);
	PlayerPlaySound(giveplayerid, 1085, 0.0, 0.0, 0.0);
	return 1;
}

flags:mutelist(CMD_MODER);
COMMAND:mutelist(playerid, params[])
{
	new lstring[1792];
	new bool:founded = false;
	foreach(LoginPlayer, i)
	{
	    if(PlayerInfo[i][pMuteTime] > 0)
	    {
	        founded = true;
		    format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s[%d] (%02d сек)\n", lstring, ReturnPlayerName(i), i, PlayerInfo[i][pMuteTime]);
		}
	}
	if(!founded) lstring = "{AFAFAF}< На сервере нет игроков с молчанкой. >";
	MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_LIST, "Игроки с молчанкой:", lstring, "Закрыть");
	return 1;
}

stock GivePlayerWarn(playerid, giveplayerid, reason[])
{
	new string[128];
    if(playerid == -1) format(string, sizeof(string), "[AdmWrn]: Сервер");
    else format(string, sizeof(string), "[AdmWrn]: %s %s[%d]", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
    format(string, sizeof(string), "%s предупредил игрока %s[%d]: %s", string, ReturnPlayerName(giveplayerid), giveplayerid, reason);
	MySendClientMessageToAll(COLOR_LIGHTRED, string);
	PlayerPlaySound(giveplayerid, 1085, 0.0, 0.0, 0.0);

	PlayerInfo[giveplayerid][pWarnUNIX] = gettime();
	if(++PlayerInfo[giveplayerid][pWarns] >= 3)
	{
        new days = 3;
		format(string, sizeof(string), "[AdmWrn]: Сервер забанил игрока %s[%d] на %d дня за получение 3/3 предупреждений", ReturnPlayerName(giveplayerid), giveplayerid, days);
		MySendClientMessageToAll(COLOR_LIGHTRED, string);
		PlayerInfo[giveplayerid][pBanUNIX] = gettime() + days * 24 * 60 * 60;
		PlayerInfo[giveplayerid][pWarns] = 0;
		KickEx(giveplayerid);
	}
	UpdatePlayerStatics(giveplayerid);
}

flags:warn(CMD_MODER);
COMMAND:warn(playerid, params[])
{
	new giveplayerid, reason[64];
	if(sscanf(params, "rs[64]", giveplayerid, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /warn [playerid/playername] [причина]");

    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	if(playerid == giveplayerid)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете дать варн самому себе.");

	new string[128];
	if(GetPlayerAdmin(playerid) <= GetPlayerAdmin(giveplayerid))
	{
	    format(string, 128, "[AdmWrn]: %s %s[%d] пытается дать варн старшему админу %s[%d]",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	    SendAdminMessage(COLOR_LIGHTRED, string, GetPlayerAdmin(giveplayerid));
	    return 1;
	}
	GivePlayerWarn(playerid, giveplayerid, reason);
	return true;
}

flags:unwarn(CMD_ADMIN);
COMMAND:unwarn(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /unwarn [playerid/playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    if(PlayerInfo[giveplayerid][pWarns] == 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У этого игрока нет предупреждений.");
	new string[128];
	PlayerInfo[giveplayerid][pWarns]--;
    format(string, 128, "[AdmCmd]: %s %s[%d] снял варн игроку %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
    MySendClientMessageToAll(COLOR_LIGHTRED, string), Admin_Log(string);
    PlayerPlaySound(giveplayerid, 1085, 0.0, 0.0, 0.0);
	return 1;
}

flags:freeze(CMD_MODER);
COMMAND:freeze(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	{
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /freeze [playerid/playername]");
	}
    if(!IsPlayerLogged(giveplayerid))
    {
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	}
	if(playerid != giveplayerid && GetPlayerAdmin(giveplayerid) >= ADMIN_MODER)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете заморозить админа.");
	}
	new string[128];
	TogglePlayerControllable(giveplayerid, false);
    format(string, 128, "[AdmCmd]: %s %s[%d] заморозил игрока %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
    SendAdminMessage(COLOR_ADMIN, string);
    if(playerid != giveplayerid)
    {
		format(string, 128, "%s {FFFFFF}%s{33CCFF} заморозил вас", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid));
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
		PlayerPlaySound(giveplayerid, 1085, 0.0, 0.0, 0.0);
	}
	return 1;
}

flags:unfreezeall(CMD_MODER);
COMMAND:unfreezeall(playerid, params[])
{
	new Float:Radius;
	if(sscanf(params, "f", Radius))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /unfreezeall [radius]");
		
	new string[128], Float:pos[3];
	GetPlayerPos(playerid, Arr3<pos>);
	foreach(LoginPlayer, i)
	{
	    if(IsPlayerInRangeOfPoint(i, Radius, Arr3<pos>))
	    {
			TogglePlayerControllable(i, true);
			GameTextForPlayer(i, "~g~Unfreeze", 5000, 5);
			PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
	    }
	}
    format(string, 128, "[AdmCmd]: %s %s[%d] разморозил всех в радиусе %.1f от себя", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, Radius);
    SendAdminMessage(COLOR_ADMIN, string);
	return 1;
}

flags:unfreeze(CMD_MODER);
COMMAND:unfreeze(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /unfreeze [playerid/playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
		
	new string[128];
	TogglePlayerControllable(giveplayerid, true);
    format(string, 128, "[AdmCmd]: %s %s[%d] разморозил игрока %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
    SendAdminMessage(COLOR_ADMIN, string);
	if(!GetPlayerAdmin(giveplayerid))
    {
		format(string, 128, "%s {FFFFFF}%s{33CCFF} разморозил вас", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid));
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
		PlayerPlaySound(giveplayerid, 1085, 0.0, 0.0, 0.0);
	}
	return 1;
}

flags:clearchat(CMD_MODER);
COMMAND:clearchat(playerid, params[])
{
	for(new i; i < 100; i++)
	{
	    SendClientMessageToAll(COLOR_BLACK, "");
	}
	new string[128];
	format(string, 128, "[AdmCmd]: %s %s[%d] очистил чат для всех", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	SendAdminMessage(COLOR_ADMIN, string);
	return 1;
}

flags:settime(CMD_DEVELOPER);
COMMAND:settime(playerid, params[])
{
	new hour = 0, minute = 0;
	gettime(hour, minute, _);
	sscanf(params, "ii", hour, minute);
	SetPlayerTime(playerid, hour, minute);
	return 1;
}

COMMAND:weather(playerid, params[])
{
    if(GetPlayerAdmin(playerid) < ADMIN_ADMIN || GetPlayerAdmin(playerid) < ADMIN_IVENTER)
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");

    new string[128], weatherid = 0;

	sscanf(params, "i", weatherid);
	if(weatherid < 0 || weatherid > 68)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите номер погоды от 0 до 68.");

    UpdateWeather(weatherid);

	if(weatherid == 0)
		format(string, 128, "[AdmCmd]: %s %s[%d] выбрал случайную погоду для штата",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
	else
		format(string, 128, "[AdmCmd]: %s %s[%d] выбрал погоду (#%d) для штата",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, weatherid);
	SendAdminMessage(COLOR_ADMIN, string);
	return 1;
}

flags:setjob(CMD_DEVELOPER);
COMMAND:setjob(playerid, params[])
{// [BT]
    new giveplayerid, jobid;
	if(sscanf(params, "rd", giveplayerid, jobid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setjob [playerid/playername] [jobid]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(jobid < 0 || jobid >= sizeof(Jobs))
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой работы не существует.");
	if(jobid > 0 && !IsAvailableJob(giveplayerid, jobid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок состоит во фракции.");

	Job.SetPlayerJob(giveplayerid, jobid);
	UpdatePlayerStatics(giveplayerid);

	new string[128];
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] изменяет место работы игроку %s[%d]: %s",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, GetJobName(jobid));
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "%s %s[%d] изменяет место вашей работы: {FFFFFF}%s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, GetJobName(jobid));
	return 1;
}

COMMAND:afind(playerid, params[])
{
	if(GetPlayerAdmin(playerid) < ADMIN_DEVELOPER)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
    new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /afind [playerid/playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new Float:pos[3];
	GetPlayerPos(giveplayerid, Arr3<pos>);
    ShowPlayerGPSPoint(playerid, Arr3<pos>);
    SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Местоположение этого игрока отмечено на радаре "SCOLOR_GPS"желтым маркером");
	return 1;
}

COMMAND:setskin(playerid, params[])
{
	if(GetPlayerAdmin(playerid) < ADMIN_ADMIN && GetPlayerAdmin(playerid) != ADMIN_IVENTER)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");

    new giveplayerid, skinid;
	if(sscanf(params, "ri", giveplayerid, skinid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setskin [playerid/playername] [ид скина] [1 - постоянный]");

    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	if(skinid > 311 || skinid < 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите скин от 0 до 311.");

	new string[128], forever = 0;
	sscanf(params, "{ri}i", forever);
	KillTimer(unfreeze_timer[giveplayerid]);
	unfreeze_timer[giveplayerid] = SetTimerEx("MyUnfreezePlayer", 3000, false, "i", giveplayerid);
	new skinname[32] = "скин";
	if(forever == 1)
	{
	    if(GetPlayerAdmin(playerid) < ADMIN_ADMIN)
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете выдавать постоянный скин.");
		skinname = "постоянный скин";
		PlayerInfo[giveplayerid][pSkin] = skinid;
		UpdatePlayerSkin(giveplayerid);
		UpdatePlayerData(playerid, "skin", skinid);
	}
	else
	{
		MySetPlayerSkin(giveplayerid, skinid, false);
		//SetTimerEx("FixVehicleAnim", 1000, false, "i", giveplayerid);
	}
	format(string, 128, "[AdmCmd]: %s %s[%d] выдал игроку %s[%d] %s #%d",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, skinname, skinid);
	SendAdminMessage(COLOR_ADMIN, string);
	if(GetPlayerAdmin(giveplayerid) == 0)
	{
		format(string, 128, "%s {FFFFFF}%s{33CCFF} выдал вам %s #%d", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), skinname, skinid);
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	}
	return true;
}

COMMAND:givegun(playerid, params[])
{
	if(GetPlayerAdmin(playerid) < ADMIN_ADMIN && GetPlayerAdmin(playerid) != ADMIN_IVENTER)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
    new giveplayerid, weaponid, ammo;
	if(sscanf(params, "ri", giveplayerid, weaponid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /givegun [playerid/playername] [ид оружия] [патроны]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(weaponid < 0 || weaponid >= sizeof(GunParams) || !GunParams[weaponid][GUN_EXIST])
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Введен некорректный ид оружия.");
	if(sscanf(params, "{ri}i", ammo))
		ammo = GunParams[weaponid][GUN_AMMO];
	else if(ammo < 1 || ammo > 10000)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите патроны от 1 до 10000.");
	new string[128], gunname[64];
	GetWeaponName(weaponid, gunname, 64);
	//MyGivePlayerWeapon(giveplayerid, weaponid, ammo);
	Inv.GivePlayerWeapon(giveplayerid, weaponid, ammo);
	Inv.SavePlayerWeapon(playerid);
	format(string, 128, "[AdmCmd]: %s %s[%d] выдал игроку %s[%d] %s (%d патрон)",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, gunname, ammo);
	SendAdminMessage(COLOR_ADMIN, string);
	if(!GetPlayerAdmin(giveplayerid))
	{
		format(string, 128, "%s {FFFFFF}%s[%d]{33CCFF} выдал вам %s (%d патрон)", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, gunname, ammo);
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:changepass(playerid, params[])
{
	ShowDialog(playerid, DMENU_CHANGE_PASS);
	return 1;
}

flags:setpass(CMD_DEVELOPER);
CMD:setpass(playerid, params[])
{
    new userid, clear_pass[32];
	if(sscanf(params, "is[32]", userid, clear_pass))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setpass [USER_ID] [new_password]");
	new string[164];
	if((MIN_PASS_SYMB <= strlen(clear_pass) < MAX_PASS_SYMB) == false)
		return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Допускается пароль только от %d до %d символов.", MIN_PASS_SYMB, MAX_PASS_SYMB);

	if(GetPVarInt(playerid, "SETPASS:ID") != userid)
	{
		format(string, 128, "Вы собрались изменить пароль игроку: %s (введите команду повторно)", GetPlayerUsername(userid));
		SendClientMessage(playerid, COLOR_SERVER, string);
		SetPVarInt(playerid, "SETPASS:ID", userid);
		return 1;
	}

	new salt[MAX_SALT_PASS];
    strmid(salt, generateCode(MAX_SALT_PASS), 0, MAX_SALT_PASS);
	mysql_format(g_SQL, string, sizeof(string), "UPDATE `players` SET `password` = MD5(CONCAT(MD5('%s'), MD5('%s'))), salt = MD5('%s') WHERE `id` = '%d'", clear_pass, salt, salt, userid);
	mysql_query(g_SQL, string);
	if(cache_affected_rows())
	{
		format(string, 128, "[AdmCmd]: %s %s[%d] изменил пароль игроку %s (userid: %d)", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, GetPlayerUsername(userid), userid);
		SendAdminMessage(COLOR_ADMIN, string);

		new giveplayerid = GetPlayeridToUserID(userid);
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			format(string, sizeof(string), "[Аккаунт]: %s %s изменил ваш пароль: {FFFFFF}%s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), clear_pass);
			SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
		}
		DeletePVar(playerid, "SETPASS:ID");
	}
	else return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "При изменении пароля произошла непредвиденная ошибка.");
	return 1;
}

flags:changename(CMD_DEVELOPER);
COMMAND:changename(playerid, params[])
{
    new giveplayerid, playername[32];
	if(sscanf(params, "rs[32]", giveplayerid, playername))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /changename [playerid/playername] [new_playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(strcheck(playername, ReturnPlayerName(giveplayerid), false))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете сменить игроку ник на тот же самый.");
	if(!IsCorrectName(playername))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "В новом нике используются некорректные символы.");

    new string[128], count;
	format(string, sizeof(string), "SELECT COUNT(*) AS count FROM `players` WHERE `username` = '%s'", playername);
	new Cache:result = mysql_query(g_SQL, string);
	cache_get_value_name_int(0, "count", count);
	cache_delete(result);
	if(count > 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот ник принадлежит другому игроку.");

	mysql_format(g_SQL, string, sizeof(string), "UPDATE `players` SET `username` = '%s' WHERE `id` = '%d'", playername, PlayerInfo[giveplayerid][pUserID]);
	mysql_query(g_SQL, string);
	if(cache_affected_rows())
	{
		format(string, 128, "[AdmCmd]: %s %s[%d] изменил ник игроку %s[%d] на %s[%d]",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, playername, giveplayerid);
		SendAdminMessage(COLOR_ADMIN, string);
		SendFormatMessageToAll(COLOR_ORANGE, string, "[NEWS]: {FFFFFF}%s{FF8300} теперь известен как {FFFFFF}%s{FF8300}", ReturnPlayerName(giveplayerid), playername);
        SetPlayerName(giveplayerid, playername);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "При изменении ника произошла непредвиденная ошибка.");
	return 1;
}

flags:givemoney(CMD_DEVELOPER);
COMMAND:givemoney(playerid, params[])
{
    new giveplayerid, money;
	if(sscanf(params, "ri", giveplayerid, money))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /givemoney [playerid/playername] [кол-во($)]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new string[128];
	MyGivePlayerMoney(giveplayerid, money);
	format(string, 128, "[AdmCmd]: %s %s[%d] выдал игроку %s[%d] %d$",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, money);
	SendAdminMessage(COLOR_ADMIN, string);
	if(!GetPlayerAdmin(giveplayerid))
	{
		format(string, 128, "%s {FFFFFF}%s{33CCFF} выдал вам %d$", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), money);
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

flags:givecoins(CMD_DEVELOPER);
COMMAND:givecoins(playerid, params[])
{
    new giveplayerid, coins;
	if(sscanf(params, "ri", giveplayerid, coins))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /givecoins [playerid/playername] [кол-во монет]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new string[128];
	GivePlayerCoins(giveplayerid, coins);
	format(string, 128, "[AdmCmd]: %s %s[%d] выдал игроку %s[%d] %d монет",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, coins);
	SendAdminMessage(COLOR_ADMIN, string);
	if(!GetPlayerAdmin(giveplayerid))
	{
		format(string, 128, "%s {FFFFFF}%s{33CCFF} выдал вам %d монет", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), coins);
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

flags:ban(CMD_MODER);
COMMAND:ban(playerid, params[])
{
	new giveplayerid, days, reason[64];
	if(sscanf(params, "ris[64]", giveplayerid, days, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /ban [playerid/playername] [время(дни)] [причина]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(playerid == giveplayerid)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете забанить самого себя.");
	if(!(1 <= days <= 30))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите время от 1 до 30 дней.");

	new string[128];
	if(GetPlayerAdmin(playerid) <= GetPlayerAdmin(giveplayerid) && !IsPlayerAdmin(playerid))
	{
	    format(string, 128, "[AdmWrn]: %s %s[%d] пытается забанить старшего админа %s[%d]",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	    return SendAdminMessage(COLOR_LIGHTRED, string);
	}
	SendFormatMessageToAll(COLOR_LIGHTRED, string, "[AdmWrn]: %s %s забанил игрока %s на %d дней: %s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), ReturnPlayerName(giveplayerid), days, reason);
	Admin_Log(string);
	//
	ClearChatbox(giveplayerid, 100);
	PlayerInfo[giveplayerid][pBanUNIX] = gettime() + days * 24 * 60 * 60;
	SendClientMessage(giveplayerid, COLOR_SERVER, "You are banned from this server.");
	SendFormatMessage(giveplayerid, COLOR_LIGHTRED, string, "Забанил: %s {FFFFFF}%s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid));
	SendFormatMessage(giveplayerid, COLOR_LIGHTRED, string, "Время бана: {FFFFFF}%d дней", days);
	SendFormatMessage(giveplayerid, COLOR_LIGHTRED, string, "Причина: {FFFFFF}%s", reason);
	SendFormatMessage(giveplayerid, COLOR_LIGHTRED, string, "Дата, время: {FFFFFF}%s %s", ReturnDate(), ReturnTime());
	SendClientMessage(giveplayerid, COLOR_LIGHTRED, " ");
	SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Вы можете обжаловать бан на форуме");
	SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Адрес форума: {FFFFFF}forum." SITE_ADRESS);
	SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Для этого сделайте скрин этого лога на F8");
	KickEx(giveplayerid);
	return true;
}

flags:checkban(CMD_MODER);
COMMAND:checkban(playerid, params[])
{
	new name[24];
	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /checkban [playername]");

	new string[256];
	mysql_format(g_SQL, string, sizeof(string), "SELECT `banunix` FROM `players` WHERE `username` = '%s'", name);
	new Cache:result = mysql_query(g_SQL, string);
	if(!cache_num_rows())
	{
		cache_delete(result);
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого игрока не существует.");
	}
	new banunix;
	cache_get_value_name_int(0, "banunix", banunix);
	cache_delete(result);
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] проверил статус бана аккаунта '%s': ", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, name);
	if(banunix)
	{
		strcat(string, "забанен");
		SendAdminMessage(COLOR_ADMIN, string);
		SendRemainingBanTime(playerid, banunix);
	}
	else
	{
		strcat(string, "не забанен");
		SendAdminMessage(COLOR_ADMIN, string);
	}
	return true;
}

flags:unban(CMD_ADMIN);
COMMAND:unban(playerid, params[])
{
	new name[24];
	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /unban [playername]");
	new string[256];
	mysql_format(g_SQL, string, sizeof(string), "SELECT `banunix` FROM `players` WHERE `username` = '%s'", name);
	new Cache:result = mysql_query(g_SQL, string);
	if(!cache_num_rows())
	{
		cache_delete(result);
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого игрока не существует.");
	}
	new banunix;
	cache_get_value_index_int(0, 0, banunix);
	cache_delete(result);
	if(banunix == 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок не забанен по аккаунту.");
	mysql_format(g_SQL, string, sizeof(string), "UPDATE `players` SET `banunix` = '0' WHERE `username` = '%s'", name);
	mysql_query_ex(string);
	format(string, sizeof(string), "[AdmCmd]: %s %s[%d] разбанил аккаунт '%s'", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, name);
	SendAdminMessage(COLOR_ADMIN, string);
	return true;
}

flags:banip(CMD_MODER);
COMMAND:banip(playerid, params[])
{
	new ip[16], days;
	if(sscanf(params, "s[16]i", ip, days) || IsIpAdress(ip) == 0)
	{
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /banip [ip][время(дни)]");
	}
	if((1 <= days <= 30) == false)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите время от 1 до 30 дней.");
	}
	new string[128];
	mysql_format(g_SQL, string, sizeof(string), "SELECT `id` FROM `banips` WHERE `ip` = '%s'", ip);
	new Cache:result = mysql_query(g_SQL, string);
	new banid;
	cache_get_value_name_int(0, "id", banid);
	cache_delete(result);
	if(banid)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот ip адрес уже был забанен.");
	}

	mysql_format(g_SQL, string, sizeof(string), "INSERT INTO `banips` SET `ip` = '%s', `time` = '%d'", ip, gettime() + days * 24 * 60 * 60);
	mysql_query_ex(string);

	//format(string, 128, "banip %s", ip);
	//SendRconCommand(string);
	BlockIpAddress(ip, days * 24 * 60 * 60 * 1000);

	format(string, 128, "[AdmCmd]: %s %s[%d] забанил ip адрес '%s' на %d дней", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ip, days);
	SendAdminMessage(COLOR_ADMIN, string);
	return true;
}

flags:unbanip(CMD_ADMIN);
COMMAND:unbanip(playerid, params[])
{
	new ip[16];
	if(sscanf(params, "s[16]", ip) || !IsIpAdress(ip))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /unbanip [ip]");
	new string[128];
	mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `banips` WHERE `ip` = '%e'", ip);
	new Cache:result = mysql_query(g_SQL, string);

	//format(string, 128, "unbanip %s", ip);
	//SendRconCommand(string);
	//SendRconCommand("reloadbans");
	UnBlockIpAddress(ip);

	format(string, 128, "[AdmCmd]: %s %s[%d] разбанил ip адрес '%s'", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ip);
    if(!cache_affected_rows()) strcat(string, " (возможно не был забанен)");
	SendAdminMessage(COLOR_ADMIN, string);
	cache_delete(result);
	return true;
}

flags:checkip(CMD_MODER);
COMMAND:checkip(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /checkip [playerid/playername]");
	if(IsPlayerLogged(giveplayerid) == 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	new string[256], ip_address[24] = "?";
	mysql_format(g_SQL, string, sizeof(string), "SELECT `ip_address` FROM `players` WHERE `id` = '%d'", PlayerInfo[giveplayerid][pUserID]);
	new Cache:result = mysql_query(g_SQL, string);
	if(cache_num_rows()) cache_get_value_index(0, 0, ip_address);
	cache_delete(result);
	
	format(string, sizeof(string), "* %s[%d] - RegIP(%s) IP(%s)", ReturnPlayerName(giveplayerid), giveplayerid, ip_address, ReturnPlayerIP(giveplayerid));
	SendClientMessage(playerid, COLOR_GREY, string);
	return true;
}

flags:checktwink(CMD_MODER);
COMMAND:checktwink(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	{
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /checktwink [playerid/playername]");
	}
	if(IsPlayerLogged(giveplayerid) == 0)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	}
	new query[128], ip[16], lstring[1024];
	GetPlayerIp(giveplayerid, ip, 16);
	mysql_format(g_SQL, query, sizeof query, "SELECT `username` FROM `players` WHERE `ip_address` = '%s' AND `id` <> '%d'", ip, PlayerInfo[giveplayerid][pUserID]);
	new Cache:result = mysql_query(g_SQL, query);
	new row = cache_num_rows();
	if(row == 0)
	{
		lstring = "< Не найдено совпадений по IP адресу. >";
	}
	else
	{
		lstring = "Другие аккаунты по IP адресу игрока:\n\n";
		new name[24];
		for(new i = 0; i < row; i++)
		{
			cache_get_value_index(i, 0, name);
			format(lstring, sizeof lstring, "%s%s\n", lstring, name);
		}
	}
	cache_delete(result);
	MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_MSGBOX, "Проверка на твинков", lstring, "Закрыть", "");
	format(query, sizeof(query), "[AdmCmd]: %s %s[%d] проверил игрока %s на наличие твинков: %s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), row ? ("есть") : ("нет"));
	SendAdminMessage(COLOR_ADMIN, query);
	return true;
}

flags:spawncars(CMD_MODER);
COMMAND:spawncars(playerid, params[])
{
	new Float:radius;
	if(sscanf(params, "f", radius) || radius < 0.5)
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /spawncars [радиус]");
	new string[128], vehicles;
	new Float:X, Float:Y, Float:Z;
	foreach(Vehicle, v)
	{
	    if(!VehInfo[v][vCreated] || !IsVehicleIsEmpty(v)) continue;
	    if(BusVehicle[0] <= v <= BusVehicle[2]) continue;
	    GetVehiclePos(v, X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, radius, X, Y, Z))
		{
		    vehicles++;
			MySetVehicleToRespawn(v);
		    // На случай удаления авто во время спавна
			if(VehInfo[v][vCreated] == false) v = VehInfo[v][vIterNext];
		}
	}
	format(string, 128, "[AdmCmd]: %s %s[%d] отреспавнил %d машин в радиусе %0.1f от себя",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, vehicles, radius);
	SendAdminMessage(COLOR_ADMIN, string);
    return true;
}

flags:goto(CMD_IVENTER);
COMMAND:goto(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
		return ShowDialog(playerid, DMODE_GOTOLIST);
    if(!IsPlayerLogged(giveplayerid))
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new string[128];
	new Float: X, Float: Y, Float: Z;
	new inter = GetPlayerInterior(giveplayerid);
	new vw = GetPlayerVirtualWorld(giveplayerid);
	GetPlayerPos(giveplayerid, X, Y, Z);
	SetPlayerInterior(playerid, inter);
	SetPlayerVirtualWorld(playerid, vw);
	CreateGotoSmoke(playerid);
	if(GetPlayerState(playerid) == 2)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		MySetVehiclePos(vehicleid, X+2, Y+2, Z);
		LinkVehicleToInterior(vehicleid, PlayerInfo[playerid][pPosINT]);
		SetVehicleVirtualWorld(vehicleid, PlayerInfo[playerid][pPosVW]);
	}
	else MySetPlayerPos(playerid, X, Y+2, Z);
	format(string, 128, "[AdmCmd]: %s %s[%d] телепортировался к игроку %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	SendAdminMessage(COLOR_ADMIN, string);
	return 1;
}

#if defined _FCNPC_included
flags:gotobot(CMD_MODER);
COMMAND:gotobot(playerid, params[])
{
	new npcid;
	if(sscanf(params, "i", npcid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /gotobot [npcid]");
    if(!FCNPC_IsSpawned(npcid))
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого бота нет на сервере.");
	new string[128];
	new Float: X, Float: Y, Float: Z;
	FCNPC_GetPosition(npcid, X, Y, Z);
	if(GetPlayerState(playerid) == 2)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		MySetVehiclePos(vehicleid, X+2, Y+2, Z);
		LinkVehicleToInterior(vehicleid, PlayerInfo[playerid][pPosINT]);
		SetVehicleVirtualWorld(vehicleid, PlayerInfo[playerid][pPosVW]);
	}
	else MySetPlayerPos(playerid, X, Y+2, Z);
	format(string, 128, "[AdmCmd]: %s %s[%d] телепортировался к боту %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(npcid), npcid);
	SendAdminMessage(COLOR_ADMIN, string);
	return 1;
}

/*flags:startbot(CMD_MODER);
COMMAND:startbot(playerid, params[])
{
	BusPlaybackCount = 0;
	MyStartPlayback(NPC_ID[NPC_BusDriver1]);
	MyStartPlayback(NPC_ID[NPC_BusDriver2]);
	MyStartPlayback(NPC_ID[NPC_BusDriver3]);
	MyStartPlayback(NPC_ID[NPC_BusDriver4]);
	SendClientMessage(playerid, COLOR_SERVER, "[BT]: Цикл ботов запущен сначала");
	return 1;
}

flags:putbotdriver(CMD_DEVELOPER);
COMMAND:putbotdriver(playerid, params[])
{
	new npcid;
	if(sscanf(params, "i", npcid))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /putbotdriver [npcid]");
    if(!FCNPC_IsSpawned(npcid))
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого бота нет на сервере.");

	new string[128], vehicleid;
	if(npcid == NPC_ID[NPC_BusDriver1]) vehicleid = BusVehicle[0];
	else if(npcid == NPC_ID[NPC_BusDriver2]) vehicleid = BusVehicle[1];
	else if(npcid == NPC_ID[NPC_BusDriver3]) vehicleid = BusVehicle[2];
	else if(npcid == NPC_ID[NPC_BusDriver4]) vehicleid = BusVehicle[3];
    else return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого бот не является водителем автобуса.");

	if(FCNPC_PutInVehicle(npcid, vehicleid, 0) == 0)
	{
	    SendFormatMessage(playerid, COLOR_LIGHTRED, string, "[BT]: Бот-Водитель[%d] не захотел сесть в автомобиль vehicleid[%d]", npcid, vehicleid);
	}
	else
	{
		SetTimerEx("MyStartPlayback", 5000, 0, "d", npcid);
	    SetPlayerColor(npcid, COLOR_ORANGE);
	    SendFormatMessage(playerid, COLOR_SERVER, string, "[BT]: Бот-Водитель[%d] успешно сел в автомобиль vehicleid[%d]", npcid, vehicleid);
	}
	return 1;
}*/
#endif

flags:gethere(CMD_IVENTER);
COMMAND:gethere(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /gethere [playerid/playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(playerid == giveplayerid)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете телепортировать самого себя.");
	if(GetPlayerAdmin(giveplayerid) >= ADMIN_MODER)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете телепортировать админа.");
	if(PlayerBusy{giveplayerid} == true)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок что-то проходит в данный момент.");
	new string[128];
	new Float: X, Float: Y, Float: Z;
	GetPlayerPos(playerid, X, Y, Z);
	new inter = GetPlayerInterior(playerid);
	new vw = GetPlayerVirtualWorld(playerid);
	SetPlayerInterior(giveplayerid, inter);
	SetPlayerVirtualWorld(giveplayerid, vw);
	if(GetPlayerState(giveplayerid) == 2)
	{
		new vehicleid = GetPlayerVehicleID(giveplayerid);
		MySetVehiclePos(vehicleid, X+2, Y+2, Z);
		LinkVehicleToInterior(vehicleid, PlayerInfo[giveplayerid][pPosINT]);
		SetVehicleVirtualWorld(vehicleid, PlayerInfo[giveplayerid][pPosVW]);
	}
	else MySetPlayerPos(giveplayerid, X, Y+2, Z);
	format(string, 128, "[AdmCmd]: %s %s[%d] телепортировал к себе игрока %s[%d]",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
	SendAdminMessage(COLOR_ADMIN, string);
	if(!GetPlayerAdmin(giveplayerid))
	{
		format(string, 128, "%s {FFFFFF}%s{33CCFF} телепортировал вас к себе", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid));
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
    }
	return true;
}

COMMAND:makeadmin(playerid, params[])
{
	if(!IsPlayerAdmin(playerid) && GetPlayerAdmin(playerid) < ADMIN_GADMIN)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
    new giveplayerid, adminlvl;
	if(sscanf(params, "ri", giveplayerid, adminlvl))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /makeadmin [playerid/playername] [уровень]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new string[164];
	if(!(0 <= adminlvl < GetPlayerAdmin(playerid)))
		return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вводите админ-уровень от 0 до %d.", GetPlayerAdmin(playerid)-1);
	if(PlayerInfo[giveplayerid][pAdmin] == adminlvl)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок уже имеет данный админ-уровень.");
	if(adminlvl == 0)
	{
		if(playerid == giveplayerid)
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете снять с себя админку.");
		if(GetPlayerAdmin(playerid) <= GetPlayerAdmin(giveplayerid))
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете разжаловать этого админа.");
		AdminDuty[giveplayerid] = false;
		PlayerInfo[giveplayerid][pAdmin] = 0;
		format(string, 128, "[AdmCmd]: %s %s[%d] снял админку с %s[%d]",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid);
		SendAdminMessage(COLOR_ADMIN, string);
		format(string, 128, "%s %s[%d] снял с вас админку", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
		SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
	}
	else
	{
	    if(playerid == giveplayerid && adminlvl < PlayerInfo[playerid][pAdmin])
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете понизить свой админ уровень.");
		PlayerInfo[giveplayerid][pAdmin] = adminlvl;
		format(string, 128, "[AdmCmd]: %s %s[%d] выдал игроку %s[%d] админ уровень [%s]",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, GetPlayerAdminStatus(giveplayerid));
		SendAdminMessage(COLOR_ADMIN, string);
		format(string, 128, "%s %s выдал вам админ уровень: [%s]", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), GetPlayerAdminStatus(giveplayerid));
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

		if(AUTOADMIN) AdminDuty[giveplayerid] = true;
	}
	return 1;
}

flags:restart(CMD_ADMIN);
COMMAND:restart(playerid, params[])
{
	new string[128], resttime;
	if(sscanf(params, "i", resttime))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /restart [секунды]");
	else if(resttime == 0)
	{
	    if(!RestTime)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Счетчик рестарта не включен.");
	    RestTime = 0;
	    foreach(Player, i)
	    {
	    	IFace.ToggleGroup(playerid, IFace.RESTART, false);
		}
		format(string, 128, "[AdmCmd]: %s %s[%d] отменил рестарт сервера", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid);
		SendAdminMessage(COLOR_ADMIN, string);
	}
	else
	{
	    RestTime = resttime;
	    IFace.UpdateRestartInfo(RestTime);
		format(string, sizeof(string), "~r~Рестарт~n~Через ~w~%02d:%02d", RestTime / 60, RestTime % 60);
	    foreach(Player, i)
		{
			IFace.ToggleGroup(i, IFace.RESTART, true);
			GameTextForPlayer(i, RusText(string, isRus(playerid)), 5000, 4);
		}
		format(string, 128, "[AdmCmd]: %s %s[%d] прописал рестарт сервера через %d секунд",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, resttime);
		SendAdminMessage(COLOR_ADMIN, string);
	}
	return 1;
}

flags:aen(CMD_ADMIN);
COMMAND:aen(playerid, params[])
{// [BT] // Admin Start/Stop Engine
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) != 2)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны сидеть за рулем, чтобы использовать эту команду.");
	if(!GetVehicleEngine(vehicleid))
	{// Заводим
		SetVehicleEngine(vehicleid, true);
		GameTextForPlayer(playerid, "~w~Engine ~g~On", 1000, 4);
	}
	else
	{	// Глушим
	    if(!IsVehicleWithEngine(vehicleid))
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Доступно только за рулем автомобиля.");
		SetVehicleEngine(vehicleid, false);
		GameTextForPlayer(playerid, "~w~Engine ~r~Off", 1000, 4);
	}
	return true;
}

COMMAND:v(playerid, params[])
{
	if(GetPlayerAdmin(playerid) < ADMIN_ADMIN && GetPlayerAdmin(playerid) != ADMIN_IVENTER)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
	new car;
	if(sscanf(params, "i", car))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /v [модель] [цвет1] [цвет2]");
	new color1 = -1, color2 = -1;
	sscanf(params, "{i}ii", color1, color2);
	if(car < 400 || car > 611)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Неправильная модель, выбирайте от 400 до 611.");
	if(color1 < -1 || color1 > 255 || color2 < -1 || color2 > 255)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Неправильный цвет, выбирайте от -1 до 255.");
	new string[128],
	    Float:angle,
		Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, angle);
	new carid = MyCreateVehicle(car, X+2, Y+2, Z+2, angle, color1, color2, 0);
	CarInfo[carid][cType] = C_TYPE_EVENT; // Доступна для всех
	SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
	format(string, 128, "[BT]: Вы создали машину #%d [model %d]", carid, car);
    return SendClientMessage(playerid, COLOR_SERVER, string);
}

flags:gotohouse(CMD_DEVELOPER);
COMMAND:gotohouse(playerid, params[])
{
    new h;
    if(sscanf(params, "i", h))
        return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /gotohouse [house num]");
	if(h < 0 || h >= sizeof(HouseInfo) || HouseInfo[h][hID] == 0)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого дома не существует в базе.");
	gPickupTime[playerid] = 5;
	MySetPlayerPos(playerid, HouseInfo[h][hX], HouseInfo[h][hY], HouseInfo[h][hZ], HouseInfo[h][hA]);
	return 1;
}

flags:house(CMD_DEVELOPER);
COMMAND:house(playerid, params[])
{
	if(PickupedHouse[playerid] == -1)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Подойдите к дому чтобы использовать эту команду.");
    new const h = PickupedHouse[playerid];
	if(h < 0 || h >= sizeof(HouseInfo) || HouseInfo[h][hID] == 0)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот дом нельзя редактировать - его не существует в базе.");
    new string[152];
    if(sscanf(params, "s[32] ", string))
        return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /house [info/create/delete/enter/price/donate/class/int]");
	if(strcheck(string, "info"))
	{
		format(string, sizeof(string), "Дом #%d: {FFFFFF}Владелец[%s], Класс[%c], Интерьер[%d], Цена[%d%s], Мебель[%d/%d], Доп.слотов[%d]",
			HouseInfo[h][hID], GetPlayerUsername(HouseInfo[h][hOwnerID]), HouseInfo[h][hClass]+64, HouseInfo[h][hInt],
			HouseInfo[h][hPrice], (HouseInfo[h][hDonate] > 0) ? (" монет") : ("$"), GetOccupiedFurSlots(h), GetHouseFurSlot(h), HouseInfo[h][hExtraSlots]);
		SendClientMessage(playerid, COLOR_GREEN, string);
	    return 1;
	}
	if(strcheck(string, "create"))
	{// [BT]
	    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта функция временно недоступна.");
	    return 1;
	}
	if(strcheck(string, "delete"))
	{
	    if(HouseInfo[h][hOwnerID] > 0)
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете удалить чей-то жилой дом.");
		if(sscanf(params, "{s[32]}s[4] ", string) || !strcheck(string, "yes"))
		    return SendClientMessage(playerid, COLOR_WHITE, "Для подтверждения удаления введите /house delete yes");
		// Удаление строки в таблице
		mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `houses` WHERE `id` = '%d'", HouseInfo[h][hID]);
		mysql_query_ex(string);

		// Удаление дома
		new hid = HouseInfo[h][hID];
		HouseInfo[h][hID] = 0;
	    UpdateHouse(h, false);

		// Окончание
		PickupedHouse[playerid] = -1;
	    if(PickupedHouse[playerid] != (-1))
				HidePropertyMenu(playerid);
	    else 	MyHidePlayerDialog(playerid);
	    format(string, 128, "Дом #%d: {FFFFFF}Вы удалили этот дом", hid);
	    SendClientMessage(playerid, COLOR_LIGHTRED, string);
	    return 1;
	}
	if(strcheck(string, "enter"))
	{
        new const Class = HouseInfo[h][hClass] - 1;
        new const Int = HouseInfo[h][hInt] - 1;
		SetCameraBehindPlayer(playerid);
		HidePropertyMenu(playerid); MyHidePlayerDialog(playerid);
        MySetPlayerPosFade(playerid, FT_NONE, Arr3<InterCoords[Class][Int]>, InterCoords[Class][Int][3] + 180.0, false, 1, VW_HOUSE + HouseInfo[h][hID]);
	    return 1;
	}
	if(strcheck(string, "price"))
	{
	    new price;
		if(sscanf(params, "{s[32]}i", price))
		{
		    SendFormatMessage(playerid, COLOR_WHITE, string, "Используйте: /house price [ammount] (now: %d$)", HouseInfo[h][hPrice]);
		    return 1;
		}
		if(price < 0)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Некорректное значение стоимости.");
		HouseInfo[h][hPrice] = price;
	    SaveHouse(h);
	    UpdateHouse(h);
	    if(PickupedHouse[playerid] != (-1))
		{
			HidePropertyMenu(playerid);
			gPickupTime[playerid] = 0;
		}
	    else MyHidePlayerDialog(playerid);
	    if(HouseInfo[h][hDonate])	format(string, 128, "Дом #%d: {FFFFFF}Стоимость дома изменена: %d$", HouseInfo[h][hID], HouseInfo[h][hPrice]);
	    else                 		format(string, 128, "Дом #%d: {FFFFFF}Стоимость дома изменена: %d монет", HouseInfo[h][hID], HouseInfo[h][hPrice]);
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    return 1;
	}
	if(strcheck(string, "donate"))
	{
	    new amount;
		if(sscanf(params, "{s[32]}i", amount))
		{
		    SendFormatMessage(playerid, COLOR_WHITE, string, "Используйте: /house donate [(1 - donate, 0 - not)] (now: %d)", HouseInfo[h][hDonate]);
		    return 1;
		}
		if(amount != 0 && amount != 1)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Некорректное значение.");
		HouseInfo[h][hDonate] = amount;
	    SaveHouse(h);
	    UpdateHouse(h);
	    if(PickupedHouse[playerid] != (-1))
		{
			HidePropertyMenu(playerid);
			gPickupTime[playerid] = 0;
		}
	    else MyHidePlayerDialog(playerid);
	    format(string, 128, "Дом #%d: {FFFFFF}Ценность дома была изменена: %s", HouseInfo[h][hID], (HouseInfo[h][hDonate]) ? ("Премиум") : ("Обычный"));
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    return 1;
	}
	if(strcheck(string, "class"))
	{
	    if(HouseInfo[h][hOwnerID] > 0)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Нельзя редактировать класс купленного дома.");
	    new Class;
		if(sscanf(params, "{s[32]}i", Class))
		    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /house class [ammount]");
		if(Class < 1 || Class > 5)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите значение класса от 1 до 5.");
		HouseInfo[h][hClass] = Class;
	    SaveHouse(h);
	    UpdateHouse(h);
	    if(PickupedHouse[playerid] != (-1))
		{
			HidePropertyMenu(playerid);
			gPickupTime[playerid] = 0;
		}
	    else MyHidePlayerDialog(playerid);
	    format(string, 128, "Дом #%d: {FFFFFF}Класс дома изменен: %c", HouseInfo[h][hID], HouseInfo[h][hClass]+64);
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    return 1;
	}
	if(strcheck(string, "int"))
	{
	    if(HouseInfo[h][hOwnerID] > 0)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Нельзя редактировать интерьер купленного дома.");
	    new Int;
		if(sscanf(params, "{s[32]}i", Int))
		    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /house int [ammount]");
		if(Int < 1 || Int > 5)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите значение интерьера от 1 до 5.");
		HouseInfo[h][hInt] = Int;
	    SaveHouse(h);
	    UpdateHouse(h);
	    if(PickupedHouse[playerid] != (-1))
		{
			HidePropertyMenu(playerid);
			gPickupTime[playerid] = 0;
		}
	    else MyHidePlayerDialog(playerid);
	    format(string, 128, "Дом #%d: {FFFFFF}Интерьер дома изменен: %d", HouseInfo[h][hID], HouseInfo[h][hInt]);
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    return 1;
	}
	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого действия в этой команде не существует.");
}

flags:setcolor(CMD_DEVELOPER);
COMMAND:setcolor(playerid, params[])
{// [BT]
	new string[128], color1, color2;
    if(!IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в транспорте.");
	if(sscanf(params, "ii", color1, color2))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setcolor [цвет1] [цвет2]");
	if(color1 < -1 || color1 > 255 || color2 < -1 || color2 > 255)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Неправильный цвет, выбирайте от -1 до 255.");
	new vehicleid = GetPlayerVehicleID(playerid);
	MyChangeVehicleColor(vehicleid, color1, color2);
	format(string, 128, "Машине #%d заданы цвета: %d и %d", vehicleid, color1, color2);
    SendClientMessage(playerid, COLOR_GREEN, string);
	return 1;
}

flags:spawncar(CMD_MODER);
COMMAND:spawncar(playerid, params[])
{// [BT] Такая же есть в собейте
    if(!IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в транспорте.");
	new string[128];
    new vehicleid = GetPlayerVehicleID(playerid);
	MySetVehicleToRespawn(vehicleid);
    format(string, 128, "Машина %d успешно отреспавнена", vehicleid);
    SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

flags:newinter(CMD_DEVELOPER);
COMMAND:newinter(playerid, params[])
{// [BT]
	new internum;
	if(sscanf(params, "i", internum))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /newinter [internum (1,2,..,n)]");

	switch(internum)
	{
		case 1:
		{
		    MySetPlayerPos(playerid, 2218.40, -1076.18, 1050.48, 0.0, 1);
		    SendClientMessage(playerid, COLOR_WHITE, "Кашерный номер в гостинице #1");
		}
		case 2:
		{
		    MySetPlayerPos(playerid, 2233.64, -1115.26, 1050.88, 0.0, 5);
		    SendClientMessage(playerid, COLOR_WHITE, "Кашерный номер в гостинице #2");
		}
		case 3:
		{
		    MySetPlayerPos(playerid, 2258.4766, -1209.7891, 1048.9922, 0.0, 10);
		    SendClientMessage(playerid, COLOR_WHITE, "Очень крутой интерьер дома ~Class B");
		}
		case 4:
		{
		    MySetPlayerPos(playerid, 2190.5469, -1201.5625, 1048.0078, 0.0, 6);
		    SendClientMessage(playerid, COLOR_WHITE, "Очень крутой интерьер дома ~Class C");
		}
		case 5:
		{
		    MySetPlayerPos(playerid, 2243.3281, -1067.8281, 1048.0234, 0.0, 2);
		    SendClientMessage(playerid, COLOR_WHITE, "Очень крутой интерьер дома ~Class D");
		}
		case 6:
		{
		    MySetPlayerPos(playerid, 2372.0938, -1124.2188, 1049.8516, 0.0, 8);
		    SendClientMessage(playerid, COLOR_WHITE, "Очень крутой интерьер дома ~Class C");
		}
		case 7:
		{
		    MySetPlayerPos(playerid, 2321.4609, -1019.7500, 1049.3672, 0.0, 9);
		    SendClientMessage(playerid, COLOR_WHITE, "Очень крутой интерьер дома ~Class B. Хочу заменить на /inter 2-5");
		}
		case 8:
		{
		    MySetPlayerPos(playerid, 2335.4297, -1065.7422, 1048.4844, 0.0, 6);
		    SendClientMessage(playerid, COLOR_WHITE, "Очень крутой интерьер дома ~Class D. Хочу заменить на /inter 4-5");
		}
	}
	return 1;
}

flags:inter(CMD_DEVELOPER);
COMMAND:inter(playerid, params[])
{// [BT]
	new IntClass, IntNum;
	if(sscanf(params, "ii", IntClass, IntNum) || !(1 <= IntClass <= 5) || !(1 <= IntNum <= 5))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /inter [class] [num]");
	new string[128], Class;
	new Float:X = InterCoords[IntClass-1][IntNum-1][0];
	new Float:Y = InterCoords[IntClass-1][IntNum-1][1];
	new Float:Z = InterCoords[IntClass-1][IntNum-1][2];
	new Float:A = InterCoords[IntClass-1][IntNum-1][3];
	switch(IntClass-1)
	{
	    case 0: Class = 'A';
	    case 1: Class = 'B';
	    case 2: Class = 'C';
	    case 3: Class = 'D';
	    case 4: Class = 'E';
	}
	SetPlayerInterior(playerid, 1);
	MySetPlayerPos(playerid, X, Y, Z, A+180.0);
	SetCameraBehindPlayer(playerid);
	format(string, 128, "Class %c, #%d", Class, IntNum);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

flags:setpower(CMD_DEVELOPER);
COMMAND:setpower(playerid, params[])
{// [BT]
	new giveplayerid, Float:powerlvl;
	if(sscanf(params, "rf", giveplayerid, powerlvl))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setpower [playerid/playername] [level]");
	if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new string[128];
	PlayerInfo[giveplayerid][pPower] = powerlvl;
	format(string, 128, "Вы задали игроку %s[%d] силу %0.2f", ReturnPlayerName(giveplayerid), giveplayerid, powerlvl);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, 128, "%s[%d] задал вам силу %0.2f", ReturnPlayerName(playerid), playerid, powerlvl);
	SendClientMessage(giveplayerid, COLOR_WHITE, string);
	return 1;
}

flags:cleartrain(CMD_DEVELOPER);
COMMAND:cleartrain(playerid, params[])
{// [BT]
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /cleartrain [playerid/playername]");
	if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	new string[128];
	PlayerInfo[giveplayerid][pTraining] = 0;
	format(string, 128, "Вы обнулили тренировки у %s[%d]", ReturnPlayerName(giveplayerid), giveplayerid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, 128, "%s[%d] обнулил вам тренировки", ReturnPlayerName(playerid), playerid);
	SendClientMessage(giveplayerid, COLOR_WHITE, string);
	return true;
}

flags:tp(CMD_ADMIN);
COMMAND:tp(playerid, params[])
{// [BT]
	new Float:X, Float:Y, Float:Z, Float:A;
	if(sscanf(params, "p<,>ffff", X, Y, Z, A) && sscanf(params, "p<,>fff", X, Y, Z))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /tp [x,y,z]");
	new vehicleid = GetPlayerVehicleID(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	if(IsPlayerInAnyVehicle(playerid))
	{
		MySetVehiclePos(vehicleid, X, Y, Z, A);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
	}
	else
		MySetPlayerPos(playerid, X, Y, Z, A);
    SendClientMessage(playerid, COLOR_WHITE, "Вы телепортировались по координатам");
	return 1;
}

Public: EmptyFunc() { }
flags:gettimer(CMD_ADMIN);
COMMAND:gettimer(playerid, params[])
{// [BT]
	new string[128], timer = SetTimer("EmptyFunc", 1000, false);
	format(string, 128, "Таймеры использованы на: %.4f%s", 100*float(timer)/2147483647, "%%");
    SendClientMessage(playerid, COLOR_SERVER, string);
    return 1;
}

flags:uptime(CMD_ADMIN);
COMMAND:uptime(playerid, params[])
{// [BT]
	new string[128], tick = GetTickCount()/1000;
	new const days = tick / (24*60*60);
	tick -= days * 24 * 60 * 60;
	new const hours = tick / (60*60);
	tick -= hours * 60 * 60;
	new const minutes = tick / 60;
	tick -= minutes * 60;
	new const seconds = tick % 60;
	format(string, 128, "Сервер работает: Дней[%d] Часов[%02d] Минут[%02d] Секунд[%02d]", days, hours, minutes, seconds);
    SendClientMessage(playerid, COLOR_SERVER, string);
    return 1;
}

flags:server(CMD_ADMIN);
COMMAND:server(playerid, params[])
{// [BT]
	ShowDialog(playerid, DSERV_MAIN);
    return 1;
}

flags:coplist(CMD_MODER);
COMMAND:coplist(playerid, params[])
{// [BT]
	new string[128];
	SendClientMessage( playerid, COLOR_GREEN, "===========[Cop List]===========" );
    foreach(Cop, i)
    {
		format(string, 128, "%s", ReturnPlayerName(i));
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return SendClientMessage(playerid, COLOR_GREEN, "==============================");
}

flags:setwl(CMD_IVENTER);
COMMAND:setwl(playerid, params[])
{// [BT]
    new giveplayerid, wantedlvl;
	if(sscanf(params, "ri", giveplayerid, wantedlvl))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /setwl [playerid] [wantedlvl]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    if(IsForce(PlayerInfo[giveplayerid][pFaction]) && wantedlvl != 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете выдать розыск сотруднику органов.");
    if(wantedlvl < 0 || wantedlvl > 8)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вводите уровень розыска от 0 до 8.");
	new string[128];
    MySetPlayerWantedLevel(giveplayerid, wantedlvl);
	format(string, 128, "%s[%d] выдал вам %d уровень розыска", ReturnPlayerName(playerid), playerid, wantedlvl);
    SendClientMessage(giveplayerid, COLOR_SERVER, string);
    return 1;
}

flags:su(CMD_ADMIN);
COMMAND:su(playerid, params[])
{// [BT]
    new giveplayerid, level, maxlvl, reason[64];
	if(sscanf(params, "riis[64]", giveplayerid, level, maxlvl, reason))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /su [playerid] [level] [maxlvl] [reason]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    if(IsForce(PlayerInfo[giveplayerid][pFaction]))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете выдать розыск сотруднику органов.");

	new string[128];
    level = GivePlayerWantedLevel(giveplayerid, level, maxlvl, reason);
	format(string, 128, "[BT]: Игроку %s[%d] выдано звезд: %d, причина: %s", ReturnPlayerName(giveplayerid), giveplayerid, level, reason);
    SendClientMessage(playerid, COLOR_SERVER, string);
    return 1;
}

flags:togooc(CMD_ADMIN);
COMMAND:togooc(playerid, params[])
{
	if(sscanf(params, "b", TOGOOC))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /togooc [0 - off, 1 - on]");
	new string[128];
	format(string, 128, "[AdmCmd]: %s %s[%d] %s общий чат",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, (TOGOOC == false) ? ("отключил") : ("включил"));
	SendClientMessageToAll(COLOR_ADMIN, string);
	return 1;
}

flags:makeleader(CMD_GADMIN);
COMMAND:makeleader(playerid, params[])
{
	new giveplayerid, factionid;
	if(sscanf(params, "r", giveplayerid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /makeleader [playerid/playername] [factionid]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	if(sscanf(params, "{r}i", factionid))
	{// Если администратор не выбрал номер лидерки
		MakeleaderPlayerid[playerid] = giveplayerid;
		ShowDialog(playerid, DMODE_MAKELEADER);
		return 1;
	}
	if(factionid < 0 || factionid >= sizeof(Faction))
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такой фракции не существует.");

	new string[128];
	if(factionid == 0)
	{
		if(!IsPlayerLeader(giveplayerid))
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок не является лидером.");

	    factionid = PlayerInfo[giveplayerid][pFaction];
		SetPlayerFaction(giveplayerid, F_NONE);

		format(string, 128, "[AdmCmd]: %s %s[%d] снял лидерку [%s] с игроку %s",
			GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, GetFactionName(factionid), ReturnPlayerName(giveplayerid));
		SendAdminMessage(COLOR_ADMIN, string);
		SendFormatMessage(giveplayerid, COLOR_LIGHTRED, string, "Админ %s забрал у вас лидерку организации %s", ReturnPlayerName(playerid), GetFactionName(factionid));
	    return 1;
	}

	SetPlayerFaction(giveplayerid, factionid, FactionRankMax[factionid]);

	format(string, 128, "[AdmCmd]: %s %s[%d] выдал лидерку [%s] игроку %s",
		GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, GetFactionName(factionid), ReturnPlayerName(giveplayerid));
	SendAdminMessage(COLOR_ADMIN, string);
	SendFormatMessage(giveplayerid, COLOR_LIGHTBLUE, string, "Админ %s выдал вам лидерку организации %s", ReturnPlayerName(playerid), GetFactionName(factionid));
	return 1;
}

flags:healall(CMD_ADMIN);
COMMAND:healall(playerid, params[])
{
	new Float:Radius;
	if(sscanf(params, "f", Radius))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /healall [radius]");

	new string[128], Float:pos[3];
	GetPlayerPos(playerid, Arr3<pos>);
	foreach(LoginPlayer, i)
	{
	    if(IsPlayerInRangeOfPoint(i, Radius, Arr3<pos>))
	    {
			MySetPlayerHealth(i, 100.0);
			GameTextForPlayer(i, "~g~Healed by ~w~Admin", 1000, 4);
	    }
	}
    format(string, 128, "[AdmCmd]: %s %s[%d] вылечил всех в радиусе %.1f от себя", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, Radius);
    SendAdminMessage(COLOR_ADMIN, string);
	return 1;
}

flags:spawn(CMD_ADMIN);
COMMAND:spawn(playerid, params[])
{// [BT]
	SetPlayerSpawn(playerid);
	SpawnPlayer(playerid);
	/*if(GetPlayerState(playerid) == 2)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		MySetVehiclePos(vehicleid,-162.2598,1228.6979,19.4003,180.0);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
	}
	else
		MySetPlayerPos(playerid, Arr4<SpawnCoord>);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);*/
	return 1;
}

flags:mark(CMD_MODER);
COMMAND:mark(playerid, params[])
{// [BT]
	if(IsPlayerInAnyVehicle(playerid))
		MyGetVehiclePos(GetPlayerVehicleID(playerid), Arr4<Mark[playerid]>);
	else
		MyGetPlayerPos(playerid, Arr4<Mark[playerid]>);
	MarkINT[playerid] = GetPlayerInterior(playerid);
	MarkVW[playerid] = GetPlayerVirtualWorld(playerid);
    SendClientMessage(playerid, COLOR_WHITE, "Новая отметка сохранена");
	return 1;
}

flags:gotomark(CMD_MODER);
COMMAND:gotomark(playerid, params[])
{// [BT]
	if(Mark[playerid][0] == 0.0 && Mark[playerid][1] == 0.0)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Точка телепорта не установлена.");
	new vehicleid = GetPlayerVehicleID(playerid);
	SetPlayerInterior(playerid, MarkINT[playerid]);
	SetPlayerVirtualWorld(playerid, MarkVW[playerid]);
	CreateGotoSmoke(playerid);
	if(vehicleid)
	{
		LinkVehicleToInterior(vehicleid, MarkINT[playerid]);
		SetVehicleVirtualWorld(vehicleid, MarkVW[playerid]);
		MySetVehiclePos(vehicleid, Arr4<Mark[playerid]>);
	}
	else
		MySetPlayerPos(playerid, Arr4<Mark[playerid]>);
    SendClientMessage(playerid, COLOR_WHITE, "Вы телепортировались к отметке");
	return 1;
}

flags:jet(CMD_ADMIN);
COMMAND:jet(playerid, params[])
{// [BT]
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	{
		MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	else
	{
		MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
		SendClientMessage(playerid, COLOR_SERVER, "[BT] Подсказка: Для снятия джет пака используйте так же /jet");
	}
    return 1;
}

COMMAND:drop(playerid, params[])
{
	#if defined	_job_part_farmer_included
		if(g_FarmPlayerGrass{playerid})
		{
			FarmDropGrass(playerid);
			CarryDown(playerid);
			PlayerAction(playerid, "кладет тюк травы на землю.");
			return true;
		}
	#endif
	#if defined	_job_part_delivery_included
		Delivery_Drop(playerid);
	#endif
	return true;
}

COMMAND:eat(playerid, params[])
{
	if(PlayerFoodHands[playerid] == 1)
	{
		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_IN_HAND);
		MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		new eat = EatPlayer(playerid, 50, "ест еду с подноса");
		if(eat == 1)
		{
			MyApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас в руках нет еды.");
	}
	return true;
}

COMMAND:time(playerid, params[])
{
	new string[128];
	if(ItemStockPlayer(playerid, THING_WATCH))
	{
	    new mtext[16], month, day, hour, minute;
		getdate(_, month, day);
		gettime(hour, minute, _);
		switch(month)
		{
		    case 1:		mtext = "Января";
			case 2: 	mtext = "Февраля";
			case 3: 	mtext = "Марта";
			case 4: 	mtext = "Апреля";
			case 5: 	mtext = "Мая";
			case 6: 	mtext = "Июня";
			case 7: 	mtext = "Июля";
			case 8: 	mtext = "Августа";
			case 9: 	mtext = "Сентября";
			case 10: 	mtext = "Октября";
			case 11: 	mtext = "Ноября";
			case 12: 	mtext = "Декабря";
		}
		format(string, 128, "~y~%d %s~n~~g~|~w~%02d:%02d~g~|", day, RusText(mtext, isRus(playerid)), hour, minute);
	}
	if(PlayerInfo[playerid][pAJailTime] > 0)
	{
		new jailtime = PlayerInfo[playerid][pAJailTime] - unixtime();
	    if(jailtime < 0) jailtime = 0;
	    format(string, 128, "%s~n~~r~Jail: %02d:%02d:%02d", string, jailtime / 3600, (jailtime % 3600) / 60, (jailtime % 3600) % 60);
	}
	else if(PlayerInfo[playerid][pJailTime] > 0)
	{
	    new jailtime = PlayerInfo[playerid][pJailTime] - unixtime();
	    if(jailtime < 0) jailtime = 0;
	    format(string, 128, "%s~n~~r~Jail: %02d:%02d:%02d", string, jailtime / 3600, ( jailtime % 3600 ) / 60, ( jailtime % 3600 ) % 60);
	}
	if(strlen(string))
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			MyApplyAnimation(playerid, "COP_AMBIENT", "coplook_watch", 4.1, 0, 0, 0, 0, 0);
		}
		GameTextForPlayer(playerid, string, 5000, 1);
		return PlayerAction(playerid, "смотрит время на часах.");
	}
	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет часов.");
}

COMMAND:oldcar(playerid, params[])
{// [BT]
	new string[128];
	format(string, 128, "Your last vehicle: %d", gLastVehicle[playerid]);
	SendClientMessage(playerid, COLOR_SERVER, string);
	return 1;
}

COMMAND:getvw(playerid, params[])
{// [BT]
	new string[128];
	format(string, 128, "Current Virtual World: %d", GetPlayerVirtualWorld(playerid));
    SendClientMessage(playerid, COLOR_SERVER, string);
    return 1;
}

COMMAND:menu(playerid, params[])	return ShowDialog(playerid, DMENU_MAIN);
alias:menu("mn", "mm");
COMMAND:donate(playerid, params[])	return ShowDialog(playerid, DMENU_DONATE);
COMMAND:stats(playerid, params[])	return ShowStats(playerid, playerid);
COMMAND:skill(playerid, params[])	return ShowDialog(playerid, DMENU_LEVELING);

COMMAND:anim(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду в машине.");
	}
	new listitem;
	if(sscanf(params, "i", listitem))
	{// Анимация не введена
		return ShowDialog(playerid, DMODE_ANIMLIST);
	}
	if((0 <= --listitem < sizeof(AnimList)) == false)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Неверный номер анимации.");
	}
	if(!LoopingAnim(playerid,
		AnimList[listitem][ANIM_LIB],
		AnimList[listitem][ANIM_NAME],
		AnimList[listitem][ANIM_DELTA],
		AnimList[listitem][ANIM_LOOP],
		AnimList[listitem][ANIM_LOCKX],
		AnimList[listitem][ANIM_LOCKY],
		AnimList[listitem][ANIM_FREEZE],
		AnimList[listitem][ANIM_TIME],
		AnimList[listitem][ANIM_SYNC]))
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "В данный момент вы не можете использовать анимации.");
	}
	return 1;
}

alias:help("cmds");
COMMAND:help(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "================[Основные команды мода]===============");

    SendClientMessage(playerid, COLOR_WHITE, "Общие: /ask /mm /stats /licenses /showpass /skill /report /anim");
    SendClientMessage(playerid, COLOR_WHITE, "Общие: /home /leaders /admins");
    SendClientMessage(playerid, COLOR_WHITE, "Чат: /s /c /me /do /try /o /b");
    SendClientMessage(playerid, COLOR_WHITE, "Авто: /veh /open /lock /unlock /eject");

    //	Фракции
    if(0 < PlayerInfo[playerid][pFaction] < sizeof(Faction))
    {
    	//	Лидеры
    	if(PlayerInfo[playerid][pRank] >= GetRankMax(PlayerInfo[playerid][pFaction]) - 1)
    	{
    		SendClientMessage(playerid, COLOR_WHITE, "Лидер: /invite /uninvite /giverank /members");
	  		if(IsForce(PlayerInfo[playerid][pFaction]))
	  		{
		  		SendClientMessage(playerid, COLOR_WHITE, "Законники: /hq /wanted /gov");
	  		}
	  		else if(IsMafia(PlayerInfo[playerid][pFaction]))
	  		{
		  		SendClientMessage(playerid, COLOR_WHITE, "Мафия: /allowdealer /deletedealer");
	  		}
    	}
  		
	    if(PlayerInfo[playerid][pFaction] == F_POLICE)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Полиция: /hq /wanted");
		}
	    else if(PlayerInfo[playerid][pFaction] == F_NEWS)
	    {
		    SendClientMessage(playerid, COLOR_WHITE, "Репортер: /edit /news /newsinfo /live");
	    }
    }
   
    //	Работы
    if(Job.GetPlayerJob(playerid) == JOB_MECHANIC)
    {
    	SendClientMessage(playerid, COLOR_WHITE, "Механик: /fixveh /refill /tow");
    }

    SendClientMessage(playerid, COLOR_WHITE, "* Прицельтесь на игрока ПКМ и нажмите h для взаимодействия");
    SendClientMessage(playerid, COLOR_WHITE, "* Если вам нужна другая помощь, используйте /ask");

    SendClientMessage(playerid, COLOR_GREEN, "======================================================");
	return 1;
}

COMMAND:vhelp(playerid, params[])
{
	ClearChatbox(playerid, 10);
	SendClientMessage(playerid, COLOR_GREEN, "_______________[Vehicle Controll Help]_______________");
    SendClientMessage(playerid, COLOR_WHITE, "/vinfo - полная информация по транспорту");
    SendClientMessage(playerid, COLOR_WHITE, "/v - создать новый транспорт");
    SendClientMessage(playerid, COLOR_WHITE, "/vfind - найти транспорт по названию");
    SendClientMessage(playerid, COLOR_WHITE, "/delcar - удалить транспорт");
    SendClientMessage(playerid, COLOR_WHITE, "/setcolor - задать транспорту цвет");
    SendClientMessage(playerid, COLOR_WHITE, "/spawncar - отреспавнить транспорт");
    SendClientMessage(playerid, COLOR_WHITE, "/engine - завести транспорт");
    SendClientMessage(playerid, COLOR_WHITE, "/lights - включить фары");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	return 1;
}

COMMAND:ahelp(playerid, params[])
{
	new admlvl = GetPlayerAdmin(playerid);
	if(!admlvl)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
	ClearChatbox(playerid, 10);
	SendClientMessage(playerid, COLOR_GREEN, "_______________[Admin Help]_______________");
	SendClientMessage(playerid, COLOR_WHITE, "Хелпер: /aduty /answer");
	if(admlvl >= ADMIN_IVENTER)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Ивент: /a /v /setskin /givegun");
    }
	if(admlvl >= ADMIN_MODER)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Модер: /a /spec /check /checklic /checkip /getwage /slap /kick /mute /mutelist /jaillist /warn /ban");
	    SendClientMessage(playerid, COLOR_WHITE, "/setint /delcar /goto /carcheck /checkban /banip /spawncars /freeze /unfreeze /clearchat");
    }
    if(admlvl >= ADMIN_ADMIN)
    {
	    SendClientMessage(playerid, COLOR_WHITE, "Админ: /restart /unwarn /unban /unbunip /healall /entercar /server");
	    SendClientMessage(playerid, COLOR_WHITE, "/gethere /sethp /weather /setwl /su /togooc /makeleader /auninvite");
	    SendClientMessage(playerid, COLOR_WHITE, "/setskill");
    }
    if(admlvl >= ADMIN_DEVELOPER)
    {
	    SendClientMessage(playerid, COLOR_WHITE, "Разраб: /anticheat /headshot /makeadmin /givemoney /givecoins /rescue /speclist /prisoners");
	    SendClientMessage(playerid, COLOR_WHITE, "/explode /race /settime /uptime /gettimer /house /unjail /checkphone /setphone");
    }
	new string[128];
	format(string, 128, "_______________________Ваш статус: [%s]", GetPlayerAdminStatus(playerid));
	SendClientMessage(playerid, COLOR_GREEN, string);
	return 1;
}

//--- Chats
COMMAND:a(playerid, params[])
{
	if(GetPlayerAdmin(playerid) < ADMIN_HELPER)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
	new string[196];
	if(sscanf(params, "s[128]", string))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /a [сообщение]");
	SendFormatMessageToAll(COLOR_ADMIN, string, "%s %s[%d]: {FFFFFF}%s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, string);
	return true;
}

COMMAND:gov(playerid, params[])
{
	if(!IsGover(PlayerInfo[playerid][pFaction]))
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
	new string[128], needrank = FactionRankMax[PlayerInfo[playerid][pFaction]]-1; // Заместитель
	if(PlayerInfo[playerid][pRank] < needrank)
		return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Эта команда требует ранг %s (%d).", GetRankName(PlayerInfo[playerid][pFaction], needrank), needrank);
	if(PlayerInfo[playerid][pMuteTime] > 0)
		return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вы забанены в чате, осталось: %d сек.", PlayerInfo[playerid][pMuteTime]);
	if(sscanf(params, "s[128]", string))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /gov [сообщение]");
	SendFormatMessageToAll(COLOR_DBLUE, string, "[Госдепартамент]: %s %s[%d]: {FFFFFF}%s", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, string);
	return 1;
}

COMMAND:d(playerid, params[])
{
    if(IsGover(PlayerInfo[playerid][pFaction]) == 0){
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не состоите в гос.структуре.");
    }
    if(PlayerInfo[playerid][pRank] < 4){
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Доступно с 4 ранга.");
    }
	/*if(PlayerInfo[playerid][pJailTime] > 0){
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот чат недоступен в тюрьме.");
	}*/
    new string[196];
	if(sscanf(params, "s[128]", string))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /d [сообщение]");
	if(PlayerInfo[playerid][pMuteTime] > 0)
	    return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вы забанены в чате, осталось: %d сек.", PlayerInfo[playerid][pMuteTime]);
	new color = 0xFF8282AA;
	format(string, sizeof(string), "[D][%s] %s %s[%d]: %s", GetFactionName(PlayerInfo[playerid][pFaction]), GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, string);

	//	Антимат
	new cens_string[256];
	strput(cens_string, string);
	if(RemoveBadWords(cens_string) >= 5)
	{
		new stmp[128];
		PlayerInfo[playerid][pMuteTime] = 5 * 60;
	    SendFormatMessageToAll(COLOR_LIGHTRED, stmp, "[AdmWrn]: %s[%d] получил молчанку на 5 минут за обилие мата", ReturnPlayerName(playerid), playerid);
	}
	foreach(LoginPlayer, i)
	{
		if(IsGover(PlayerInfo[i][pFaction]))	{
        	SendClientMessage(i, color, PlayerInfo[i][pCensored] ? cens_string : string);
        }
	}
	return true;
}
COMMAND:departments(playerid, params[]){	return callcmd::d(playerid, params);	}

COMMAND:rb(playerid, params[])
{
	new string[256];
	format(string, sizeof(string), "(( %s ))", params);
	callcmd::r(playerid, string);
	return 1;
}

COMMAND:r(playerid, params[])
{
	if(PlayerInfo[playerid][pJailTime] > 0){
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот чат недоступен в тюрьме.");
	}
    if(Job.GetPlayerJob(playerid) == JOB_NONE && IsGover(PlayerInfo[playerid][pFaction]) == 0){
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы нигде не работаете и не состоите в гос.структуре.");
    }
    new string[196];
	if(sscanf(params, "s[128]", string))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /r [сообщение]");
	if(PlayerInfo[playerid][pMuteTime] > 0)
	{
	    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вы забанены в чате, осталось: %d сек.", PlayerInfo[playerid][pMuteTime]);
	    return true;
	}
	new color = COLOR_LIGHTBLUE;
	if(IsGover(PlayerInfo[playerid][pFaction]))
	{
	    color = COLOR_BLUE;
		format(string, sizeof(string), "[R] %s %s[%d]: %s", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, string);
	}
	else {
		format(string, sizeof(string), "[R] %s[%d]: %s", ReturnPlayerName(playerid), playerid, string);
	}
	//	Антимат
	new cens_string[196];
	strput(cens_string, string);
	if(RemoveBadWords(cens_string) >= 5)
	{
		new stmp[128];
		PlayerInfo[playerid][pMuteTime] = 5 * 60;
	    SendFormatMessageToAll(COLOR_LIGHTRED, stmp, "[AdmWrn]: %s[%d] получил молчанку на 5 минут за обилие мата", ReturnPlayerName(playerid), playerid);
	}
	new job = Job.GetPlayerJob(playerid);
	foreach(LoginPlayer, i)
	{
		if(IsGover(PlayerInfo[playerid][pFaction]))
		{
			if(PlayerInfo[playerid][pFaction] != PlayerInfo[i][pFaction])	continue;
		}
        else
        {
        	if(job != Job.GetPlayerJob(i))			continue;
        }
        SendClientMessage(i, color, PlayerInfo[i][pCensored] ? cens_string : string);
	}
	return true;
}

COMMAND:fb(playerid, params[])
{
	new string[256];
	format(string, sizeof(string), "(( %s ))", params);
	callcmd::f(playerid, string);
	return 1;
}

COMMAND:f(playerid, params[])
{
	if(PlayerInfo[playerid][pJailTime] > 0){
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот чат недоступен в тюрьме.");
	}
    if(PlayerInfo[playerid][pFaction] <= 0){
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не состоите ни в одной организации.");
    }
    if(IsGover(PlayerInfo[playerid][pFaction]))
	{
	    callcmd::r(playerid, params);
    	return 1;
    }
	new string[196];
	if(sscanf(params, "s[128]", string))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /f [сообщение]");
	if(PlayerInfo[playerid][pMuteTime] > 0)
	{
	    SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вы забанены в чате, осталось: %d сек.", PlayerInfo[playerid][pMuteTime]);
	    return true;
	}
	new color = COLOR_WHITE;
	if(PlayerInfo[playerid][pFaction] == F_POLICE)
	{
	    color = COLOR_BLUE;
		format(string, sizeof(string), "[R] %s %s[%d]: %s", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, string);
	}
	else if(IsGang(PlayerInfo[playerid][pFaction]))
	{
		color = GetGangColor(PlayerInfo[playerid][pFaction]);
		// GodFather format: "** Outsider %s: %s. ))  **"
		format(string, sizeof(string), "# | %s %s[%d]: %s", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, string);
	}
	else
	{
	    color = COLOR_LIGHTPURPLE; // COLOR_LIGHTBLUE
		format(string, sizeof(string), "# | %s %s[%d]: %s", GetPlayerRank(playerid), ReturnPlayerName(playerid), playerid, string);
	}
	//	Антимат
	new cens_string[256];
	strput(cens_string, string);
	if(RemoveBadWords(cens_string) >= 5)
	{
		new stmp[128];
		PlayerInfo[playerid][pMuteTime] = 5 * 60;
	    SendFormatMessageToAll(COLOR_LIGHTRED, stmp, "[AdmWrn]: %s[%d] получил молчанку на 5 минут за обилие мата", ReturnPlayerName(playerid), playerid);
	}
	foreach(LoginPlayer, i)
	{
        if(PlayerInfo[playerid][pFaction] == PlayerInfo[i][pFaction])
			SendClientMessage(i, color, PlayerInfo[i][pCensored] ? cens_string : string);
	}
	return true;
}

COMMAND:ad(playerid, params[])
{
	if(PlayerInfo[playerid][pPhoneNumber] == 0)	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вам нужен телефон, чтобы отправить объявление.");
	}
    new string[196];
	if(sscanf(params, "s[128]", string))
	    return SendFormatMessage(playerid, COLOR_WHITE, string, "Используйте: /ad [текст объявления] (цена: %d$)", SENDAD_PRICE);

	if(gAdvertCount >= MAX_ADVERT_COUNT)	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Очередь на объявления занята, попробуйте позже.");
	}
	new time = GetPVarInt(playerid, "SendADTime") + 60 - gettime();
	if(time > 0)    {
	    format(string, sizeof(string), "До следующей отправки объявления: ~y~%02d мин %02d сек", time/60, time%60);
		return ShowPlayerHint(playerid, string);
	}
	if(strlen(string) < 10)	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Минимальная длина объявления - 10 символов.");
	}
	if(strlen(string) > 100)	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Максимальная длина объявления - 100 символов.");
	}
	if(MyGetPlayerMoney(playerid) < SENDAD_PRICE)	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас недостаточно денег.");
	}
	new slot = -1;
	for(new i; i < MAX_ADVERT_COUNT; i++)
	{
		if(gAdvert[i][adBusy] == false)
		{
			slot = i;
			break;
		}
	}
	if(slot == -1)	
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Очередь на объявления занята, попробуйте позже.");
	}
	SetPVarString(playerid, "SendADText", params);
	format(string, sizeof(string), "{FFFFFF}Текст объявления:\n{44B2FF}%s\n\n{FFFFFF}Отправить?", params);
	MyShowPlayerDialog(playerid, DMODE_SENDAD, DIALOG_STYLE_MSGBOX, "{44B2FF}Отправка объявления", string, "Да", "Нет");
	return true;
}

//--- Reporters
COMMAND:edit(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != F_NEWS)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не репортер.");
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerInterior(playerid) != 18 && (vehicleid > 0 && CarInfo[vehicleid][cType] == C_TYPE_FACTION && CarInfo[vehicleid][cOwnerID] == F_NEWS) == false)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны находиться в студии или в фургоне.");
	}
	ShowDialog(playerid, DMODE_ADLIST);
	return true;
}

stock getMaxNews(playerid)
{
	switch(PlayerInfo[playerid][pRank])
	{
	    case 1: return 0;   	// Редактор
	    case 2: return 150;   	// Репортер
	    case 3: return 200;   	// Ведущий
	    case 4: return 250;   	// Гл Редактор
	    case 5: return 300;   	// Продюсер
	    case 6: return 400;     // Зам Директора
	    case 7: return 500;     // Директор
	}
	return 0;
}

COMMAND:news(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != F_NEWS)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не репортер.");
    new string[196];
	if(PlayerInfo[playerid][pRank] < 2)
		return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Эта команда требует ранг %s (%d).", GetRankName(F_NEWS, 2), 2);
	new difunix = gettime() - PlayerInfo[playerid][pNewsUnix];
	if(difunix < 3600 && PlayerInfo[playerid][pNewsCount] >= getMaxNews(playerid))
	{// Проверка давности объявлений
		return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "До подачи следующего объявления: %d мин. (Лимит объявлений: %d/час).", (3600-difunix)/60 + 1, getMaxNews(playerid));
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerInterior(playerid) != 18 && (vehicleid > 0 && CarInfo[vehicleid][cType] == C_TYPE_FACTION && CarInfo[vehicleid][cOwnerID] == F_NEWS) == false)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны находиться в студии или в фургоне.");
	if(sscanf(params, "s[128]", string))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /news [сообщение]");
	SendFormatMessageToAll(COLOR_NEWS, string, "[Прямой эфир] %s: %s", ReturnPlayerName(playerid), string);
	Job.GivePlayerWage(playerid, 2.5);

	if(difunix > 3600)
	{
	    PlayerInfo[playerid][pNewsUnix] = gettime();
	    PlayerInfo[playerid][pNewsCount] = 0;
	}
	PlayerInfo[playerid][pNewsCount]++;

	switch(getMaxNews(playerid)-PlayerInfo[playerid][pNewsCount])
	{
	    case 50,40,30,20,10,5,4,3,2,1:
		{
		    format(string, sizeof(string), "Осталось объявлений: ~y~%d", getMaxNews(playerid)-PlayerInfo[playerid][pNewsCount]);
			ShowPlayerHint(playerid, string);
		}
		case 0:
		{
		    format(string, sizeof(string), "Вы исчерпали лимит! ~n~До след. объявления: ~y~%d мин", (3600-difunix)/60 + 1);
			ShowPlayerHint(playerid, string);
		}
	}
	return true;
}

COMMAND:newsinfo(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != F_NEWS)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не репортер.");
    new string[196];
	if(PlayerInfo[playerid][pRank] < 2)
		return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Эта команда требует ранг %s (%d).", GetRankName(F_NEWS, 2), 2);
	new difunix = gettime() - PlayerInfo[playerid][pNewsUnix];
	if(difunix > 3600)
	{
	    format(string, sizeof(string), "Всего объявлений: ~y~%d~w~/~y~%d~n~~w~~g~Можно давать объявления", getMaxNews(playerid)-PlayerInfo[playerid][pNewsCount], getMaxNews(playerid));
		ShowPlayerHint(playerid, string);
	}
	else
	{
	    format(string, sizeof(string), "Всего объявлений: ~y~%d~w~/~y~%d~n~~w~До новых объявлений: ~y~%d мин", getMaxNews(playerid)-PlayerInfo[playerid][pNewsCount], getMaxNews(playerid), (3600-difunix)/60 + 1);
		ShowPlayerHint(playerid, string);
	}
	return true;
}

COMMAND:live(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != F_NEWS)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не репортер.");
	new string[128];
	if(PlayerInfo[playerid][pRank] < 3)
		return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Эта команда требует ранг %s (%d).", GetRankName(F_NEWS, 3), 3);
		
    if(TalkingLive[playerid] != INVALID_PLAYER_ID)
    {
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Интервью завершено");
        SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "Интервью завершено");
        TogglePlayerControllable(playerid, true);
        TogglePlayerControllable(TalkingLive[playerid], true);
        TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
        TalkingLive[playerid] = INVALID_PLAYER_ID;
        return 1;
    }
    new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerInterior(playerid) != 18 && (vehicleid > 0 && CarInfo[vehicleid][cType] == C_TYPE_FACTION && CarInfo[vehicleid][cOwnerID] == F_NEWS) == false)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны находиться в студии или в фургоне.");
	}
   	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)){
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /live [playerid/playername]");
	}
	if(giveplayerid == playerid) {
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете вести интервью с самим собой.");
	}
	if(IsPlayerNearPlayer(playerid, giveplayerid, 5.0) == 0){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Игрок должен находится рядом с вами.");
	}
	if(TalkingLive[giveplayerid] != INVALID_PLAYER_ID){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок уже дает интервью.");
	}
	if(AskPlayer(playerid, giveplayerid, ASK_INTERVIEW)){
		SendFormatMessage(playerid, COLOR_WHITE, string, "Вы предложили %s'у дать вам интервью в прямом эфире", ReturnPlayerName(giveplayerid));
		SendFormatMessage(giveplayerid, COLOR_WHITE, string, "%s хочет взять у вас интервью в прямом эфире "ASK_CONFIRM_INFO, ReturnPlayerName(playerid));
	}
	else{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, попробуйте позже.");
	}
	return true;
}

//---
COMMAND:admins(playerid, params[])	return ShowDialog(playerid, DMODE_ADMINS);

COMMAND:gps(playerid, params[])
{
	if(PlayerInfo[playerid][pJailTime])
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Нельзя использовать во время заключения.");
	ShowDialog(playerid, DMODE_GPS);
	return true;
}

COMMAND:id(playerid, params[])
{
    new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /id [playername]");
    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	new string[128];
	new time = GetPlayerAFKTime(playerid);
	format(string, sizeof(string), "* %s [id: %d]", ReturnPlayerName(giveplayerid), giveplayerid);
	if(PlayerInfo[giveplayerid][pPhoneNumber] > 0)	format(string, sizeof(string), "%s [phone: %d]", string, PlayerInfo[giveplayerid][pPhoneNumber]);
	if(IsPlayerAFK(giveplayerid))					format(string, sizeof(string), "%s (AFK %02d:%02d)", string, time/60, time%60);
	SendClientMessage(playerid, COLOR_SERVER, string);
	return 1;
}

//--- Actions
COMMAND:action(playerid, params[])
{
	extract params -> new player:targetid; else
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /action [playerid/playername]");

	if(22 <= GetPlayerWeapon(playerid) <= 33)	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для взаимодействия уберите оружие из рук.");
	}
	if(IsPlayerNearPlayer(playerid, targetid, 4.0) == 0)
	{	// Машет рукой, если далеко
	    if(random(2) == 0) 	MyApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0, 1);
	    else           		MyApplyAnimation(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 1, 1, 1, 1, 1);
	    return true;
	}
	if(PlayerCuffedTime[targetid]){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Нельзя взаимодействовать с оглушенным игроком.");
	}
	if(PlayerCuffedTime[playerid]){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы оглушены.");
	}
    gTargetid[playerid] = targetid;
    ShowDialog(playerid, DMODE_REACTION);
    return true;
}

COMMAND:hi(playerid, params[])
{
	extract params -> new player:giveplayerid; else
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /hi [playerid/playername]");

	if(playerid == giveplayerid){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете поздороваться с собой.");
	}
	if(GetPlayerState(playerid) != 1){
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы можете поздороваться только стоя на ногах.");
	}
    new const Float:max_dist = 35.0;
	new Float:tpos[3], Float:pos[3];
	GetPlayerPos(giveplayerid, Arr3<tpos>);
	GetPlayerPos(playerid, Arr3<pos>);
	new Float:dist = GetDistanceFromPointToPoint(Arr3<tpos>, Arr3<pos>);
    new string[128];
	if(AskWhat[playerid] == ASK_HI && AskOfferID[playerid] == giveplayerid)
    {	//  Подтверждение действий
    	if(dist > max_dist)
    		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
    	if(GetPlayerState(giveplayerid) != 1)
    		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Игрок должен стоять на ногах.");

        if(dist <= 4.0)
        {
        	//new Float:pos[3];
			new Float:A = 180.0 - atan2(pos[0] - tpos[0], pos[1] - tpos[1]);
		    SetPlayerFacingAngle(playerid, A);
			tpos[0] = pos[0] + (1.0 * floatsin(-A, degrees));
			tpos[1] = pos[1] + (1.0 * floatcos(-A, degrees));
			MySetPlayerPos(giveplayerid, Arr3<tpos>, A + 180.0);
			new animname[20];
			switch(random(8))
			{
				case 0: animname = "hndshkaa";
				case 1: animname = "hndshkba";
				case 2: animname = "hndshkca";
				case 3: animname = "hndshkcb";
				case 4: animname = "hndshkda";
				case 5: animname = "hndshkea";
				case 6: animname = "hndshkfa";
				case 7: animname = "hndshkfa_swt";
			}
			MyApplyAnimation(playerid, "GANGS", animname, 4.0, 0, 0, 0, 0, 0);
			MyApplyAnimation(giveplayerid, "GANGS", animname, 4.0, 0, 0, 0, 0, 0);
			StopAsking(playerid);
        }
        else if(4.0 < dist < 35.0)
        {
        	if(random(2) == 0) 	MyApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0, 1);
			else
			{
				MyApplyAnimation(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 1, 1, 1, 1, 1);
				SetTimerEx("ClearFreezeAnim", 5000, false, "i", playerid);
        	}
        }
		SendFormatMessage(playerid, COLOR_GREEN, string, "Вы согласились поздороваться с %s", ReturnPlayerName(giveplayerid));
		SendFormatMessage(giveplayerid, COLOR_GREEN, string, "%s согласился поздороваться с вами", ReturnPlayerName(playerid));
	}
	else
	{
		if(dist > 5.0)
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");

		if(AskPlayer(playerid, giveplayerid, ASK_HI)){
			SendFormatMessage(giveplayerid, COLOR_WHITE, string, "%s хочет поздороваться с вами "ASK_CONFIRM_INFO, ReturnPlayerName(playerid));
			SendFormatMessage(playerid, COLOR_WHITE, string, "Вы предложили %s поздороваться с вами", ReturnPlayerName(giveplayerid));
		}
		else{
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, попробуйте позже.");
		}
	}
	return true;
}

COMMAND:showpass(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "r", giveplayerid)){
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /showpass [playerid/playername]");
	}
	if(!IsPlayerLogged(giveplayerid)){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    }
    if(GetDistanceBetweenPlayers(playerid, giveplayerid) > 5.0){
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
    }
    if(playerid == giveplayerid)
    {
    	ShowPass(playerid, giveplayerid);
    }
    else
    {
    	if(AskPlayer(playerid, giveplayerid, ASK_SHOWPASS))
		{
			new string[128];
			SendFormatMessage(giveplayerid, COLOR_WHITE, string, "%s хочет показать вам свои документы "ASK_CONFIRM_INFO,  ReturnPlayerName(playerid));
			SendFormatMessage(playerid, COLOR_WHITE, string, "Вы предложили %s взглянуть на ваши документы", ReturnPlayerName(giveplayerid));
		}
		else SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, попробуйте позже.");
    }
	return true;
}

COMMAND:box(playerid, params[])
{

	new giveplayerid;
	if(sscanf(params, "r", giveplayerid)){
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /box [playerid/playername]");
	}
    if(!IsPlayerLogged(giveplayerid)){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    }
    if(PlayerInfo[playerid][pTraining] >= MAX_TRAINING)	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы сильно устали и не можете сейчас боксировать.");
	}
    new ring = GetNearRing(playerid);
	if(ring == (-1)){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть рядом с боксерским рингом.");
	}
	if(BoxingRing[ring][RING_STATE] != 0){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот ринг в данный момент занят.");
	}
	if(gPlayerRing[giveplayerid] != (-1)){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок в данный момент уже боксирует.");
	}
    new Float:dist = GetDistanceBetweenPlayers(playerid, giveplayerid);
    if(dist > 5.0){
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
    }
    if(PlayerInfo[giveplayerid][pTraining] >= MAX_TRAINING)	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок устал и сейчас не может боксировать.");
	}
	if(MyGetPlayerHealth(playerid) < 15.0){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас слишком мало здоровья.");
	}
	if(MyGetPlayerHealth(giveplayerid) < 15.0){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока слишком мало здоровья.");
	}
	new string[128];
    if(AskPlayer(playerid, giveplayerid, ASK_BOX)){
		SendFormatMessage(giveplayerid, COLOR_WHITE, string, "%s вызывает вас на боксерский поединок "ASK_CONFIRM_INFO, ReturnPlayerName(playerid));
		SendFormatMessage(playerid, COLOR_WHITE, string, "Вы предложили %s боксерский поединок", ReturnPlayerName(giveplayerid));
	}
	else{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, попробуйте позже.");
	}
    return true;
}

COMMAND:pay(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 2)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта команда работает со 2 уровня.");
	}
    extract params -> new player:giveplayerid, money;    else
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /pay [playerid/playername] [деньги]");
	if(playerid == giveplayerid)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете передать денег самому себе.");
	}
    if(IsPlayerLogged(giveplayerid) == 0)
    {
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
    }
	if(IsPlayerNearPlayer(playerid, giveplayerid, 4.0) == 0)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
	}
	if(money <= 0)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Нельзя передать меньше нуля или ноль.");
	}
	if(MyGetPlayerMoney(playerid) < money)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет столько денег.");
	}
	if(money > 1000 && PlayerInfo[playerid][pLevel] < 4)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете передавать за раз более $1.000.");
	}
	else if(money > 10000)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете передавать за раз более $10.000.");
	}
	if(AskPlayer(playerid, giveplayerid, ASK_GIVE_MONEY))
	{
		new string[128];
		SendFormatMessage(giveplayerid, COLOR_WHITE, string, "%s хочет передать вам %d$ "ASK_CONFIRM_INFO, ReturnPlayerName(playerid), money);
		SendFormatMessage(playerid, COLOR_WHITE, string, "Вы предложили %s взять от вас %d$", ReturnPlayerName(giveplayerid), money);
		AskAmount[giveplayerid] = money;
	}
	else
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, попробуйте позже.");
	}
	return true;
}

COMMAND:dance(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT){
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Доступно только пешком.");
	}
	new dance;
	if(sscanf(params, "d", dance)){
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /dance [1-4]");
	}
	if(dance < 1 || dance > 4){
		return SendClientMessage( playerid, COLOR_WHITE, "Используйте: /dance [1-4]");
	}
	switch(dance)
	{
	    case 1: MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: MySetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
		/*case 5:
		{
			Dancing[ playerid ] = 5;
			MyApplyAnimation( playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0 );
		}
		case 6:
		{
			Dancing[ playerid ] = 6;
			MyApplyAnimation( playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0 );
		}*/
	}
	return true;
}

//--- Vehicle
COMMAND:refill(playerid, params[])
{
	if(Job.GetPlayerNowWork(playerid) != JOB_MECHANIC)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не работаете механиком или не вышли на дежурство.");
	}
	new vehicleid = GetNearVehicles(playerid, 2);
    if(!vehicleid) return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости нет ни одной машины.");
	SetPVarInt(playerid, "Mechanic:Refill:VehicleID", vehicleid);
	return ShowDialog(playerid, DMODE_REFILL);
}

COMMAND:fixveh(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    if(GetPlayerAdmin(playerid) < ADMIN_ADMIN)
    	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта команда доступна только возле капота.");
		new const vehicleid = GetPlayerVehicleID(playerid);
		if(MyGetVehicleHealth(vehicleid) < 250)
		{
		    new Float:A;
			GetVehicleZAngle(vehicleid, A);
			SetVehicleZAngle(vehicleid, A);
		}
		MyRepairVehicle(vehicleid);
		return SendClientMessage(playerid, COLOR_WHITE, "Машина полностью отремонтирована");
    }
    else
    {
    	if(Job.GetPlayerNowWork(playerid) != JOB_MECHANIC)
		{
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не работаете механиком или не вышли на дежурство.");
		}

    	new v = GetNearVehicles(playerid, 2);
	    if(!v) return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости нет ни одной машины.");

	    new price;
		if(sscanf(params, "d", price))
		{
			return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /fixveh [стоимость]");
		}

		if(!(10 <= price <= 200))
		{
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Стоимость должна быть от $10 до $200.");
		}

	    new dif = 20,
			Float:carX, Float:carY, Float:carZ,
	        Float:carA, Float:plX, Float:plY, Float:plZ;

		GetVehiclePos(v, carX, carY, carZ);
		GetVehicleZAngle(v, carA);
		GetPlayerPos(playerid, plX, plY, plZ);
		new A = floatround(atan2(carX - plX, carY - plY) + carA);
		if(A > 360)	A -= 360;
		if(180 - dif < A < 180 + dif)
	    {	// Капот
			if(!GetVehicleBonnet(v))
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Капот этой машины закрыт.");
			}
		    new Float:Health;
		    GetVehicleHealth(v, Health);
		    if(Health >= 999.0)
		    {
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эта машина польностью исправна.");
		    }
		    if(Health < 400.0)
		    {
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Эту машину можно отремонтировать только в сервисе.");
		    }
		    new giveplayerid = VehInfo[v][vDriver];
		    if(giveplayerid < 0)
		    {
		    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Для ремонта в машине должен сидеть водитель.");
		    }
		    if(AskPlayer(playerid, giveplayerid, ASK_REPAIR))
		    {
		    	new string[128];
		    	AskAmount[giveplayerid] = price;
				SendFormatMessage(giveplayerid, COLOR_WHITE, string, "%s хочет отремонтировать ваш авто за $%d "ASK_CONFIRM_INFO, ReturnPlayerName(playerid), price);
				SendFormatMessage(playerid, COLOR_WHITE, string, "Вы предложили %s отремонтировать его авто за $%d", ReturnPlayerName(giveplayerid), price);
			}
			else
			{
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, попробуйте позже.");
			}
	    }
    }
	return true;
}

COMMAND:open(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Невозможно использовать эту команду из машины.");
	new vehicle = GetNearVehicles(playerid);
	if(!vehicle)
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости нет ни одной машины.");
	}
	return PlayerOpenVehicle(playerid, vehicle);
}

flags:alock(CMD_DEVELOPER);
COMMAND:alock(playerid, params[])
{
	new vehicle = GetNearVehicles(playerid);
    if(vehicle == 0)
	{
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости нет ни одной машины.");
    }
    LockPlayerVehicle(playerid, vehicle, true);
	return true;
}

COMMAND:lock(playerid, params[])
{
	new vehicle = GetNearVehicles(playerid);
    if(vehicle == 0)
	{
    	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости нет ни одной машины.");
    }
    LockPlayerVehicle(playerid, vehicle);
	return true;
}

COMMAND:unlock(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) != 2 || !IsVehicleWithEngine(vehicleid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Доступно только за рулем автомобиля.");
	if(VehInfo[vehicleid][vLocked] == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Двери уже и так разблокированы.");
	    return 1;
	}
    if(IsAvailableVehicle(vehicleid, playerid) >= VEH_AVAILABLE_CONTROL)
    {
	    new giveplayerid;
		if(sscanf(params, "r", giveplayerid))
		{// Без адресата
            VehInfo[vehicleid][vLocked] = 0;
			GameTextForPlayer(playerid, "~w~Vehicle ~g~Unlocked", 3000, 3);
			UpdateVehicleParamsEx(vehicleid);
		}
		else
		{// С адресатом
			if(!IsPlayerNearPlayer(playerid, giveplayerid, 10.0))
				return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок слишком далеко от вас.");
		    new string[128];
		    format(string, 128, "~w~Vehicle ~g~Unlocked~n~~w~%s", ReturnPlayerName(giveplayerid));
			GameTextForPlayer(playerid, string, 3000, 3);

			GameTextForPlayer(giveplayerid, "~w~Vehicle ~g~Unlocked", 3000, 3);
            SetVehicleParamsForPlayer(vehicleid, giveplayerid, 0, false);
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете открыть эту машину.");
	return 1;
}

COMMAND:eject(playerid, params[])
{
    if(GetPlayerState(playerid) != 2)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны сидеть за рулем, чтобы использовать эту команду.");
	if(GetPlayerInterior(playerid) > 0)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Нельзя использовать эту команду в интерьере.");
    new giveplayerid;
	if(sscanf(params, "r", giveplayerid))
	    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /eject [playerid/playername]");
	new string[128];
	new vehicleid = GetPlayerVehicleID(playerid);

	#if defined	_job_job_busdriver_included
		if(BusDriverStatus[playerid] > 0 && BusDriverVeh[playerid] == vehicleid)
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Водитель автобуса не может просить покинуть транспорт.");
	#endif

	if(vehicleid == GetPlayerVehicleID(giveplayerid))
	{
		switch(VehInfo[vehicleid][vModelType])
		{
			case MTYPE_MOTO: 	string = "мотоцикл";
			case MTYPE_TRUCK: 	string = "грузовик";
			case MTYPE_TRAIN: 	string = "поезд";
			case MTYPE_BOAT: 	string = "лодку";
			case MTYPE_HELIC: 	string = "вертолет";
			case MTYPE_PLANE: 	string = "самолет";
			default: 			string = "автомобиль";
		}
		format(string, 128, "просит %s покинуть %s.", ReturnPlayerName(giveplayerid), string);
	    PlayerAction(playerid, string);
	    BlockVehicleEffect(vehicleid, 4);
	    RemovePlayerFromVehicle(giveplayerid);
	}
	else if(vehicleid == GetPlayerSurfingVehicleID(giveplayerid))
	{
		switch(VehInfo[vehicleid][vModelType])
		{
			case MTYPE_MOTO: 	string = "мотоцикла";
			case MTYPE_TRUCK: 	string = "грузовика";
			case MTYPE_TRAIN: 	string = "поезда";
			case MTYPE_BOAT: 	string = "лодки";
			case MTYPE_HELIC: 	string = "вертолета";
			case MTYPE_PLANE: 	string = "самолета";
			default: 			string = "автомобиля";
		}
		format(string, 128, "скидывает %s с %s.", ReturnPlayerName(giveplayerid), string);
	    PlayerAction(playerid, string);
		new Float:surfX, Float:surfY, Float:surfZ;
	    GetVehiclePos(vehicleid, surfX, surfY, surfZ);
	    MySetPlayerPos(giveplayerid, surfX + 2.0, surfY + 2.0, surfZ);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет в (на) транспорте.");
	return 1;
}

COMMAND:engine(playerid, params[])
{
	if(InRace[playerid]) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) != 2 || vehicleid <= 0 || IsVehicleWithEngine(vehicleid) == false)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны сидеть за рулем, чтобы использовать эту команду.");
	if(GetVehicleEngine(vehicleid) == false)
	{	// Заводим
	    if(IsAvailableVehicle(vehicleid, playerid) >= VEH_AVAILABLE_CONTROL)
	    {
		    new time = 400 + (random(4) + 1) * 100;
	        engine_timer[playerid] = SetTimerEx("StartEngine", time, false, "dd", vehicleid, true);
			GameTextForPlayer(playerid, "~w~Starting engine...", 1000, 4);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет ключей зажигания от этого авто.");
			if(Job.GetPlayerJob(playerid) == JOB_THEFT)
				ShowPlayerHint(playerid, "~w~Для взлома замка зажигания зажмите ~y~ЛКМ");
		}
	}
	else
	{	// Глушим
		StartEngine(vehicleid, false);
		PlayerAction(playerid, "глушит двигатель.");
	}
	return true;
}

COMMAND:lights(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) != 2 || !IsVehicleWithEngine(vehicleid))
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны сидеть за рулем, чтобы использовать эту команду.");
	VehInfo[vehicleid][vLights] = !VehInfo[vehicleid][vLights];
	IFace.Veh_Update(playerid, 0);
	return UpdateVehicleParamsEx(vehicleid);
}

COMMAND:tow(playerid, params[])
{
	if(GetPlayerState(playerid) != 2)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны сидеть за рулем, чтобы использовать эту команду.");
	new vehicleid = GetPlayerVehicleID(playerid);
	new model = GetVehicleModel(vehicleid);
	if(model != 525 && model != 531 && model != 583)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот транспорт не может буксировать и прицеплять.");
	if(IsTrailerAttachedToVehicle(vehicleid) > 0)
	    return true;
    new Float:pos[ 3 ], Float:dist, Float:mindist = 0.0, veh = 0;
    foreach(Vehicle, v)
	{
	    if(!IsVehicleStreamedIn( v, playerid ) || v == vehicleid) continue;
		GetVehiclePos(v, Arr3<pos>);
		dist = GetDistanceFromMeToPoint(playerid, Arr3<pos>);
		if(dist <= 8.0 && (mindist == 0.0 || dist < mindist))
		{
			mindist = dist;
			veh = v;
		}
    }
	if(veh == 0)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Поблизости нет ни одной машины, которую можно подцепить.");
	if(VehInfo[veh][vModelType] != MTYPE_NONE && VehInfo[veh][vModelType] != MTYPE_NODOOR && VehInfo[veh][vModelType] != MTYPE_TRUCK)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот вид транспорта нельзя буксировать и цеплять.");
	AttachTrailerToVehicle(veh, vehicleid);
	return 1;
}

COMMAND:detach(playerid, params[]) return callcmd::untow(playerid, params);
COMMAND:untow(playerid, params[])
{
	if(GetPlayerState(playerid) != 2)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны сидеть за рулем, чтобы использовать эту команду.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsTrailerAttachedToVehicle(vehicleid))
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У этой машины нет никакого прицепа.");
	return DetachTrailerFromVehicle(vehicleid);
}

COMMAND:vinfo(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть в транспорте.");

	new string[128], lstring[1024];
	new vehicleid = GetPlayerVehicleID(playerid);
	new vehmodel = GetVehicleModel(vehicleid);
	//
	format(string, 128, "Model: %s(id %d)\n", ReturnVehicleName(vehicleid), vehmodel); strcat(lstring, string);
	format(string, 128, "Num: %d (id %d)\n", vehicleid, CarInfo[vehicleid][cID]); strcat(lstring, string);
	format(string, 128, "Type: %d (owner: %d)\n", CarInfo[vehicleid][cType], CarInfo[vehicleid][cOwnerID]); strcat(lstring, string);
	format(string, 128, "Colors: %d and %d\n", CarInfo[vehicleid][cColor1], CarInfo[vehicleid][cColor2]); strcat(lstring, string);
	format(string, 128, "Fuel: %0.2f%%\n", VehInfo[vehicleid][vFuel]); strcat(lstring, string);
	format(string, 128, "Mileage: %0.1f km\n", CarInfo[vehicleid][cMileage]); strcat(lstring, string);
	format(string, 128, "Inside: %d players\n",VehInfo[vehicleid][vPlayers]); strcat(lstring, string);
	strcat(lstring, "\n");
	new anothers;
	//
	strcat(lstring, "Driver: ");
	new driver = VehInfo[vehicleid][vDriver];
	if(driver >= 0) { anothers++; format(string, 128, "%s[%d]\n",ReturnPlayerName(driver),driver); strcat(lstring, string); } else strcat(lstring, "None\n");
	//
	strcat(lstring, "CoDriver: ");
	new codriver = VehInfo[vehicleid][vCoDriver];
	if(codriver >= 0) { anothers++; format(string, 128, "%s[%d]\n",ReturnPlayerName(codriver),codriver); strcat(lstring, string); } else strcat(lstring, "None\n");
	//
	strcat(lstring, "LeftSeat: ");
	new leftseat = VehInfo[vehicleid][vLeftSeat];
	if(leftseat >= 0) { anothers++; format(string, 128, "%s[%d]\n",ReturnPlayerName(leftseat),leftseat); strcat(lstring, string); } else strcat(lstring, "None\n");
	//
	strcat(lstring, "RightSeat: ");
	new rightseat = VehInfo[vehicleid][vRightSeat];
	if(rightseat >= 0) { anothers++; format(string, 128, "%s[%d]\n",ReturnPlayerName(rightseat),rightseat); strcat(lstring, string); } else strcat(lstring, "None\n");
	//
	strcat(lstring, "Anothers: ");
	anothers = VehInfo[vehicleid][vPlayers]-anothers;
	if(anothers) { format(string, 128, "%d players\n",anothers); strcat(lstring, string); } else strcat(lstring, "None\n");
	//
	MyShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Транспорт", lstring, "Ок");
	return 1;
}

COMMAND:vfind(playerid, params[])
{
	new string[128];
    if(sscanf(params, "s[32] ", string))
        return ShowDialog(playerid, DMODE_VFIND);
	Dialogid[playerid] = DMODE_VFIND;
	OnDialogResponse(playerid, DMODE_VFIND, 1, 0, string);
	return 1;
}

COMMAND:veh(playerid, params[])
{
    new string[128];
    if(sscanf(params, "s[32] ", string))
        return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /veh [park/find/sellto/sell]");
	if(strcheck(string, "unpark") || strcheck(string, "park0"))
	{// [BT] // Обнулить парковку
		if(GetPlayerAdmin(playerid) < ADMIN_ADMIN)
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
		if(GetPlayerState(playerid) != 2)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть за рулем своего автомобиля.");
		new vehicleid = GetPlayerVehicleID(playerid);
		if(CarInfo[vehicleid][cID] == 0 || CarInfo[vehicleid][cType] != C_TYPE_PLAYER)
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете отпарковать этот транспорт.");
		CarInfo[vehicleid][cX] = 0.0;
		CarInfo[vehicleid][cY] = 0.0;
		GameTextForPlayer(playerid, "~w~Vehicle has been~n~~y~UnParked", 3000, 3);
		return UpdateVehicleStatics(vehicleid);
	}
	else if(strcheck(string, "park"))
	{
		if(GetPlayerState(playerid) != 2)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть за рулем своего автомобиля.");
		new vehicleid = GetPlayerVehicleID(playerid);
		//if(CarInfo[vehicleid][cID] == 0 || CarInfo[vehicleid][cType] == C_TYPE_DEFAULT)
		//	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете припарковать этот транспорт");
		if(IsAvailableVehicle(vehicleid, playerid) != VEH_AVAILABLE_OWNER)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не владелец этого автомобиля.");
		if(!IsPlayerAtParkPlace(playerid) && CarInfo[vehicleid][cType] == C_TYPE_PLAYER)
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На этом месте парковка запрещена.");
		if(GetVehicleSpeed(vehicleid) > 2.0)
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Остановитесь, чтобы припарковаться.");
		MyGetVehiclePos(vehicleid, CarInfo[vehicleid][cX], CarInfo[vehicleid][cY], CarInfo[vehicleid][cZ], CarInfo[vehicleid][cA]);
		GameTextForPlayer(playerid, "~w~Vehicle has been~n~~g~Parked", 3000, 3);
		return UpdateVehicleStatics(vehicleid);
	}
	else if(strcheck(string, "find"))
	{
		mysql_format(g_SQL, string, sizeof(string), "SELECT `fine_park` FROM `cars` WHERE `type` = 1 AND `ownerid` = '%d'", PlayerInfo[playerid][pUserID]);
		new Cache:result = mysql_query(g_SQL, string);
		new finepark;
		cache_get_value_name_int(0, "fine_park", finepark);
		new veh_num = cache_num_rows();
		cache_delete(result);
		if(veh_num == 0)
		{
		    SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет ни одной собственной машины.");
		    return 1;
		}
		if(finepark > 0)
		{// Штраф-стоянка
            ShowPlayerGPSPoint(playerid, 1573.0726, -1605.7681, 14.0);
            return SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Местоположение вашего автомобиля отмечено на радаре "SCOLOR_GPS"желтым маркером");
		}
		else
		{
			foreach(Vehicle, v)
			{
			    if(CarInfo[v][cID] > 0 && CarInfo[v][cType] == C_TYPE_PLAYER && CarInfo[v][cOwnerID] == PlayerInfo[playerid][pUserID])
			    {
					new Float:pos[3];
					GetVehiclePos(v, Arr3<pos>);
		            ShowPlayerGPSPoint(playerid, Arr3<pos>);
		            return SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Местоположение вашего автомобиля отмечено на радаре "SCOLOR_GPS"желтым маркером");
			    }
		    }
	    }
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Машина не найдена, обратитесь к администрации.");
	}
	else if(strcheck(string, "sellto"))
	{
		if(GetPlayerState(playerid) != 2)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть за рулем своего автомобиля.");
		new vehicleid = GetPlayerVehicleID(playerid);
		if(IsAvailableVehicle(vehicleid, playerid) != VEH_AVAILABLE_OWNER)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не владелец этого транспорта.");
	    if(CarInfo[vehicleid][cType] != C_TYPE_PLAYER)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот транспорт не подлежит перепродаже.");
		if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1529.4467,-1676.2250,13.3828))
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Перепродажа возможна только возле пол участка Лос Сантоса.");
		new giveplayerid, price;
		if(sscanf(params, "{s[32]}ri", giveplayerid, price))
		    return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /veh sellto [playerid] [цена]");
		if(playerid == giveplayerid)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете перепродать транспорт самому себе.");
	    if(!IsPlayerLogged(giveplayerid))
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	    if(GetPlayerVehicleID(giveplayerid) != vehicleid)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этот игрок должен сидеть рядом с вами.");
	    //if(PlayerInfo[giveplayerid][pCarLic] == 0)
	    if(IsPlayerHaveLicThisVehicle(giveplayerid, GetVehicleModel(vehicleid)))
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У этого игрока нет лицензии на этот транспорт.");
	    if(price < 0)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете указывать отрицательную цену.");

        if(AskPlayer(playerid, giveplayerid, ASK_CAR_SELLTO))
        {
			AskAmount[giveplayerid] = price;
			AskAmount2[giveplayerid] = vehicleid;
			SendFormatMessage(playerid, COLOR_WHITE, string, "Игроку {B1C8FB}%s{FFFFFF} предложена '{B1C8FB}%s{FFFFFF}' за {B1C8FB}%d$", ReturnPlayerName(giveplayerid), ReturnVehicleName(vehicleid), price);
			SendFormatMessage(giveplayerid, COLOR_WHITE, string, "{B1C8FB}%s{FFFFFF} предлагает вам '{B1C8FB}%s{FFFFFF}' за {B1C8FB}%d$ "ASK_CONFIRM_INFO, ReturnPlayerName(playerid), ReturnVehicleName(vehicleid), price);
			PlayerAction(playerid, "протягивает договор купли-продажи транспорта.");
		}
		else{
			return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У игрока есть не принятый запрос, попробуйте позже.");
		}
	    return 1;
	}
	else if(strcheck(string, "sell"))
	{
		if(GetPlayerState(playerid) != 2)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть за рулем своего автомобиля.");
		new vehicleid = GetPlayerVehicleID(playerid);
		if(IsAvailableVehicle(vehicleid, playerid) != VEH_AVAILABLE_OWNER)
	        return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не владелец этого автомобиля.");
		if(CarInfo[vehicleid][cType] == C_TYPE_PLAYER && !IsAtCarSellPlace(playerid))
		    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы должны быть возле какого-либо автосалона.");
		new Float:proc = 0.70;
		if(IsPlayerInRangeOfPoint(playerid, 25.0, -1786.7600,1205.1584,24.8255)) proc = 0.75;
		new price = floatround(VehParams[GetVehicleModel(vehicleid) - 400][VEH_PRICE]*proc);
		if(sscanf(params, "{s[32]}s[4] ", string) || !strcheck(string, "yes"))
		{
		    format(string, 128, "Стоимость вашей машины: {33AA33}%d${FFFFFF}. Для продажи введите: /veh sell yes", price);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    return 1;
		}
		if(CarInfo[vehicleid][cID] > 0)
		{
			mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `cars` WHERE `id` = '%d'", CarInfo[vehicleid][cID]);
			mysql_query_ex(string);
		}
		//
		MyDestroyVehicle(vehicleid);
		MyGivePlayerMoney(playerid, price);
		SendClientMessage(playerid, COLOR_SAYING, "- Продавец: Мы забрали вашу машину - вот деньги за нее. Всего хорошего!");
	    return 1;
	}
	return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Такого действия в этой команде не существует.");
}

//--- Report
SendDiscordNotification(playerid, playerName[], text[], reportId = -1, reportName[] = "") 
{
	new string[256];
	format(string, sizeof string, "?playerid=%d&playerName=%s&text=%s&reportId=%d&reportName=%s&token=162e3bc50e2eb52c", playerid, playerName, text, reportId, reportName);
	HTTP(1, HTTP_POST, SITE_ADRESS "/utils/feedback", string, "httpResponses");
	return 1;
}

Public: httpResponses(index, response_code, data[])
{
	printf("[HTTP Response] index = %d, response_code = %d, data = '%s'", index, response_code, data);
	return 1;
}

COMMAND:ask(playerid, params[])
{
	new string[164];
	if(PlayerInfo[playerid][pAskMute] > gettime())
	    return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вам заблокирована админ-связь. Осталось: %d сек", PlayerInfo[playerid][pAskMute] - gettime());
	new question[128];
	if(sscanf(params, "s[128]", question))	return ShowDialog(playerid, DMENU_CONTACT);
	if(!IsAdminsOnline())
	{
		SendDiscordNotification(playerid, ReturnPlayerName(playerid), question);
		//return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На сервере нет админов, готовых ответить на ваш вопрос");
	}
	else
	{
		format(string, 128, "Ask | %s[%d]: %s", ReturnPlayerName(playerid), playerid, question);
		SendAdminMessage(COLOR_ASK, string, 1);
	}
	format(string, 128, "Отправлен вопрос: {FFFFFF}%s", question);
	SendClientMessage(playerid, COLOR_ASK, string);
    /*if(gAskCount >= MAX_ASK_COUNT)	
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Очередь на объявления занята, попробуйте позже.");
	}
	new question[128];
	if(sscanf(params, "s[128]", question))	return ShowDialog(playerid, DMENU_CONTACT);
	if(!IsAdminsOnline())
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На данный момент никто не может ответить на вопрос. Попробуйте обратиться на форум!");
	}
	new slot = -1;
	for(new i; i < MAX_ASK_COUNT; i++)
	{
		if(gAsk[i][askBusy] == false)
		{
			slot = i;
			break;
		}
	}
	if(slot == -1)	
	{
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Очередь на вопросы занята, попробуйте позже.");
	}

	gAskCount++;
	gAsk[slot][askSender]	= playerid;
	gAsk[slot][askStatus]	= false;
	strput(gAsk[slot][askText], question);
	gAsk[slot][askBusy]		= true;

	format(string, 128, "%s[%d] задал вопрос (используйте /tickets)", ReturnPlayerName(playerid), playerid);
	SendAdminMessage(COLOR_ASK, string, 1);
	SendFormatMessage(playerid, COLOR_ASK, string, "Отправлен вопрос: {FFFFFF}%s", question);*/
	return 1;
}

flags:tickets(CMD_HELPER);
COMMAND:tickets(playerid, params[])
{
	ShowDialog(playerid, DADMIN_TICKETS);
	return 1;
}

COMMAND:report(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pAskMute] > gettime())
	    return SendFormatMessage(playerid, COLOR_WHITE, string, PREFIX_ERROR "Вам заблокирована админ-связь. Осталось: %d сек", PlayerInfo[playerid][pAskMute] - gettime());
	if(GetPlayerAdmin(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Администрация не может использовать эту команду.");
	new giveplayerid, report[128];
	if(sscanf(params, "rs[128]", giveplayerid, report))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /report [playerid/playername] [жалоба]");
	if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");
	if(!IsAdminsOnline())
	{
		SendDiscordNotification(playerid, ReturnPlayerName(playerid), report, giveplayerid, ReturnPlayerName(giveplayerid));
		//return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На сервере нет админов, готовых ответить на ваш вопрос.");
	}
	else
	{
		format(string, 128, "[AdmRep] %s[%d]: %s[%d] %s", ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, report);
		SendAdminMessage(COLOR_LIGHTRED, string);
	}
	SendFormatMessage(playerid, COLOR_LIGHTRED, string, "Вы отправили жалобу на %s[%d]: %s", ReturnPlayerName(giveplayerid), giveplayerid, report);
	return 1;
}

flags:answer(CMD_HELPER);
COMMAND:answer(playerid, params[])
{
	new giveplayerid, answer[128];
	if(sscanf(params, "rs[128]", giveplayerid, answer))
		return SendClientMessage(playerid, COLOR_WHITE, "Используйте: /answer [playerid/playername] [ответ]");

    if(!IsPlayerLogged(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Этого игрока нет на сервере.");

	new string[256];
	SendFormatMessage(giveplayerid, COLOR_ANSWER, string, "%s %s отвечает: {FFFFFF}%s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), answer);
	format(string, 256, "%s %s[%d]: {FFFFFF}%s[%d], %s", GetPlayerAdminStatus(playerid), ReturnPlayerName(playerid), playerid, ReturnPlayerName(giveplayerid), giveplayerid, answer);
	SendAdminMessage(COLOR_ANSWER, string, 1);
	PlayerPlaySound(giveplayerid, 6401, 0, 0, 0);
	return 1;
}

//--- Houses
COMMAND:home(playerid, params[])
{
	new house = GetPlayerHouseID(playerid);
	if(house == -1)
	{
		new string[128];
		format(string, sizeof(string), "SELECT `X`, `Y`, `Z` FROM `houses` WHERE `ownerid` = '%d' LIMIT 1", PlayerInfo[playerid][pUserID]);
		new Cache:result = mysql_query(g_SQL, string);
		if(cache_num_rows())
		{
			new Float:pos[3];
			cache_get_value_name_float(0, "X", pos[0]);
			cache_get_value_name_float(0, "Y", pos[1]);	
			cache_get_value_name_float(0, "Z", pos[2]);
			ShowPlayerGPSPoint(playerid, Arr3<pos>, 4.0);
			SendClientMessage(playerid, COLOR_WHITE, PREFIX_GPS "Ваш дом отмечен на радаре "SCOLOR_GPS"желтым маркером");
		}
		else 	SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "У вас нет дома.");
		cache_delete(result);
	}
	else
	{
		if(HouseInfo[house][hOwnerID] == PlayerInfo[playerid][pUserID])	ShowDialog(playerid, DHOME_MAIN);
		else 		SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не владелец этого дома.");
	}
    return true;
}

COMMAND:masklist(playerid, params[])
{
	if(GetPlayerAdmin(playerid) < ADMIN_MODER)
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");
	new lstring[1792];
	new bool:founded = false;
	foreach(LoginPlayer, i)
	{
	    if(InMask[i])
	    {
	        founded = true;
		    format(lstring, sizeof(lstring), "%s"MAIN_COLOR"• {FFFFFF}%s[%d]\n", lstring, ReturnPlayerName(i), i);
		}
	}
	if(!founded) lstring = "{AFAFAF}< На сервере нет игроков в маске. >";
	MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_LIST, "Игроки в маске:", lstring, "Закрыть");
	return 1;
}

COMMAND:adminlist(playerid, params[])
{
	if(GetPlayerAdmin(playerid) < ADMIN_DEVELOPER)
		return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете использовать эту команду.");

	new query[512], string[64] = "%d/%m/%Y"; // Date Format
	mysql_format(g_SQL, query, sizeof(query), "SELECT `username`, `online`, `admin`, FROM_UNIXTIME(`exitunix`, '%s') FROM `players` WHERE `admin` > 0 ORDER BY `admin` DESC, `exitunix` DESC", string);
	new Cache:result = mysql_query(g_SQL, query);
	new row_count = cache_num_rows();
	if(row_count == 0)
	{
		cache_delete(result);
	    return SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "В админ составе не найдено ни одного администратора.");
	}
    new name[32], date[20], online, admin,
    	lstring[2048] = "ID\tУровень\tБыл в игре\tИмя игрока\n";
    for(new r = 0; r < row_count; r++)
    {
		cache_get_value_index(r, 0, name);
		cache_get_value_name_int(r, "online", online);
		cache_get_value_name_int(r, "admin", admin);
		cache_get_value_index(r, 3, date);
		if(online == -1)    format(lstring, sizeof(lstring), "%s{DFDFDF}%d\t{DFDFDF}%s\t{DFDFDF}%s\t{DFDFDF}%s\n", lstring, online, getAdminStatus(admin), date, name);
		else                format(lstring, sizeof(lstring), "%s{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%s\n", lstring, online, getAdminStatus(admin), date, name);
	}
	cache_delete(result);
	format(string, sizeof(string), "Администраторский состав:");
	MyShowPlayerDialog(playerid, DMODE_NONE, DIALOG_STYLE_TABLIST_HEADERS, string, lstring, "Закрыть", "");
	return 1;
}

public OnPlayerChangeSkin(playerid, skinid)
{
	#if defined _inventory_acsr_included
		Acsr.UpdatePlayerAcsr(playerid);
	#endif

	#if defined _inventory_interface_included
		IFace.Inv_UpdateSkin(playerid);
	#endif

	if(!IsPlayerInAnyVehicle(playerid))
	{
		SetTimerEx("FixPlayerFreeze", 500, false, "i", playerid);
	}
	return true;
}

public OnPlayerStartWork(playerid, work)
{
	switch(work)
	{
		#if defined	_job_job_theft_included
			case JOB_THEFT:
			{
				return Theft_StartWork(playerid);
			}
		#endif
		#if defined	_job_job_taxi_included
			case JOB_TAXI:
			{
				return Taxi_StartWork(playerid);
			}
		#endif
	}
	return true;
}

public OnPlayerFinishWork(playerid, work, reason)
{
	switch(work)
	{
		#if defined	_job_job_theft_included
			case JOB_THEFT:
			{
				Theft_FinishWork(playerid, reason);
			}
		#endif

		#if defined	_job_job_trucker_included
			case JOB_TRUCKER:
			{
				Trucker_FinishWork(playerid, reason);
			}
		#endif

		#if defined	_job_job_busdriver_included
			case JOB_BUSDRIVER:
			{
				BusDriver_FinishWork(playerid, reason);
			}
		#endif

		#if defined	_job_part_delivery_included
			case PART_DELIVERY:
			{
				Delivery_FinishWork(playerid, reason);
			}
		#endif	

		#if defined	_job_part_farmer_included
			case PART_FARMER:
			{
				Farmer_FinishWork(playerid);
			}
		#endif

		#if defined	_job_part_loader_included
			case PART_LOADER:
			{
				Loader_FinishWork(playerid);
			}
		#endif

		#if defined	_job_job_taxi_included
			case JOB_TAXI:
			{
				Taxi_FinishWork(playerid);
			}
		#endif	
	}
}

public OnPlayerHackLockClick(playerid, step, success)
{
	if(success)
	{
		MyApplyAnimation(playerid, "CASINO", "dealone", 4.1, 0, 0, 0, 0, 2000, 1);
		PlayerPlaySound(playerid, 32000, 0.0, 0.0, 0.0);

		if(random(2))	GameTextForPlayer(playerid, "~g~Successful", 2000, 4);
		else			GameTextForPlayer(playerid, "~g~Very nice", 2000, 4);

		foreach(Cop, copid)
	    {
			if(GetDistanceBetweenPlayers(playerid, copid) <= 50 && GetPlayerState(copid) != PLAYER_STATE_SPECTATING)
			{
			    CrimePlayer(playerid, CRIME_THEFT_AUTO);
				ShowPlayerHint(playerid, "Вы привлекли внимание проезжающего наряда полиции");
			    if(!random(2))	PlayerPlaySound(playerid, 10200, 0.0,0.0,0.0);	// Hey, you! Police. Stop!
			    else 			PlayerPlaySound(playerid, 10201, 0.0,0.0,0.0);	// Hey, what are you doing in here?
				break;
			}
		}
		return 2000;
	}
	else
	{
		new bool:theft_break = false;
	    if(random(2))
	    {
	    	GameTextForPlayer(playerid, RusText("~n~~r~Отмычка сломалась...", PlayerInfo[playerid][pRusifik]), 2000, 4);
	    	Inv.PlayerDeleteThing(playerid, THING_PICKLOCK, 0, 1);	
	    	if(!Inv.GetThing(playerid, THING_PICKLOCK))
	    	{
				ShowPlayerHint(playerid, "У вас кончились отмычки");
				theft_break = true;
	    	}
		}
		else
		{
			GameTextForPlayer(playerid, RusText("~n~~y~Попробуйте снова", PlayerInfo[playerid][pRusifik]), 2000, 4);
		}
		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		LoseAnim(playerid);
		if(theft_break)	return false;
	}
	return true;
}

public OnPlayerHackLock(playerid, success)
{
	if(success)
	{
		BreakCar(playerid, BREAK_CAR_HACKING, 1);
	}
	return true;
}

public IsPlayerChangeInterface(playerid, IFace.E_GROUPS:element, bool:toggle)
{
	switch(element)
	{
		case IFace.SPEEDO:
		{
			if(toggle)
			{
				if(!IFace.GetGroupToggleAndVisible(playerid, IFace.INTERFACE))
				{
					return false;
				}
			}
		}
	}
	return true;
}

public OnPlayerChangeInterface(playerid, IFace.E_GROUPS:element, bool:toggle)
{
	switch(element)
	{
		case IFace.INTERFACE:
		{
			IFace.ChangeVisibleGroup(playerid, IFace.SPEEDO, toggle);
			if(RestTime > 0)
			{
				IFace.ToggleGroup(playerid, IFace.RESTART, toggle);
			}
		}

		#if defined _inventory_interface_included
			case IFace.INVENTORY:
			{
				#if defined _interface_hint_included
					UpdatePlayerHints(playerid);
				#endif
			}
		#endif

		#if defined _interface_select_menu_included
			case IFace.SELECT_MENU:
			{
				#if defined _interface_hint_included
					UpdatePlayerHints(playerid);
				#endif
			}
		#endif

		#if defined _player_phone_included
			case IFace.PHONE:
			{
				#if defined _interface_hint_included
					UpdatePlayerHints(playerid);
				#endif
			}
		#endif
	}
	return true;
}

public	OnPlayerPhoneCall(playerid, number)
{
	switch(number)
	{
		case 911:
		{
			SetPVarInt(playerid, "Player:Call911", 1);
			SendClientMessage(playerid, COLOR_BLUE, "Оператор 911 говорит: Здравствуйте, вы позвонили в службу 911.");
			SendClientMessage(playerid, COLOR_BLUE, "Оператор 911 говорит: Кто вам нужен: полиция или медики?");
			return (1);
		}
	#if defined	_job_job_taxi_included
		case 555:
		{
			if(Taxi_PlayerUsed(playerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы уже едете в такси.");
				return (1);
			}
			if(Job.GetPlayerNowWork(playerid) == JOB_TAXI)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете вызывать такси находясь на дежурстве.");
				return (1);
			}
			if(TaxiCall != -1)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Кто-то уже ожидает ответа, попробуйте позже.");
				return (1);
			}
			new bool:founded;
			foreach(LoginPlayer, i)
			{
				if(Job.GetPlayerNowWork(i) == JOB_TAXI)
				{
					founded = true;
					break;
				}
			}
			if(founded == false)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На дежурстве нет ни одного таксиста, попробуйте позже.");
				return (1);
			}
			new string[128];
			format(string, sizeof(string), "[Диспетчер]: %s [тел: %d] вызывает такси. {FFFFFF}(принять: Y)", ReturnPlayerName(playerid), PlayerInfo[playerid][pPhoneNumber]);
			SendJobMessage(JOB_TAXI, COLOR_LIGHTBLUE, string);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Вы позвонили в таксопарк, ожидайте ответа в ближайшее время");

			TaxiCall = playerid;
			TaxiCallTime = 60;
			return (1);
		}
	#endif 	
		case 600:
		{
			if(GetPVarInt(playerid, "Player:AtWork") == JOB_MECHANIC)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Вы не можете вызывать механика находясь на дежурстве.");
				return (1);
			}
			if(MechanicCall != -1)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Кто-то уже ожидает ответа, попробуйте позже.");
				return (1);
			}
			new founded;
			foreach(LoginPlayer, i)
			{
				if(GetPVarInt(i, "Player:AtWork") == JOB_MECHANIC)
				{
					if(MechanicClientid[i] == playerid)
					{
						founded = 2;
						break;
					}
					founded = 1;
				}
			}
			if(founded == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "На дежурстве нет ни одного механика, попробуйте позже.");
				return (1);
			}
			if(founded == 2)
			{
				SendClientMessage(playerid, COLOR_WHITE, PREFIX_ERROR "Ваш вызов уже приняли.");
				return (1);
			}
			new string[128];
			format(string, sizeof(string), "[Диспетчер]: %s [тел: %d] вызывает механика. {FFFFFF}(Чтобы принять, нажмите 2)", ReturnPlayerName(playerid), PlayerInfo[playerid][pPhoneNumber]);
			SendJobMessage(JOB_MECHANIC, COLOR_LIGHTBLUE, string);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Вы позвонили в службу дорожной помощи, ожидайте ответа в ближайшее время");

			MechanicCall = playerid;
			MechanicCallTime = 60;
			return (1);
		}
	}
	return (0);
}

//	Copyright © Silver Break 2017
//	Developed by Borog25 & Impereal
