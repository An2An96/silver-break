/*static const Float:RandomCars[][] =
{
	{-2125.7424,658.0462,52.2988,90.0},
	{-2158.0222,657.3931,52.2775,270.0},
	{-1926.3204,585.6179,34.9962,360.0},
	{2229.1999,-1170.1999,25.7000,90.0},
	{-2214.8046,-82.7890,35.0474,360.0},
	{2217.0000,-1157.1999,25.7000,270.0},
	{405.9747,-1264.3920,50.1236,24.21},
	{-1497.4576,845.8479,6.9381,90.0},
	{-1741.0051,811.0620,24.5781,270.0},
	{-1704.3132,999.7747,17.3645,90.0},
	{216.5520,-1431.4003,13.0853,135.0},
	{334.2231,-1343.7404,14.3828,209.95},
	{697.4343,-1230.9486,16.5062,298.79},
	{723.9849,-1121.5534,18.1450,333.90},
	{666.8468,-467.6578,16.0734,90.0},
	{668.1160,-546.2435,16.0412,90.0},
	{912.2175,-996.2034,38.1402,360.0},
	{-1758.3511,910.7219,24.5923,270.0},
	{981.8715,-917.3546,41.5443,90.0},
	{1188.4082,-925.1859,42.8590,270.0},
	{-1699.4597,1030.6871,45.0933,90.0},
	{1450.1999,-937.0999,36.2000,270.0},
	{2148.3256,-1175.2518,24.1958,270.0},
	{-1786.7154,1205.1597,24.7812,180.0},
	{-1716.5906,1350.4829,6.8345,45.0},
	{2502.0388,-1134.9506,39.1953,150.95},
	{-2166.4533,1251.1535,27.2649,360.0},
	{2853.1857,-1326.8011,11.1511,270.0},
	{-2040.4760,1107.7071,53.4165,90.0},
	{2796.9030,-1567.2023,10.6386,270.0},
	{2813.2175,-1673.0275,9.6638,360.0},
	{2827.6735,-1703.9754,9.7307,90.0},
	{2809.3872,-1837.2391,9.7398,270.0},
	{-2438.0783,1341.1190,7.6988,90.0},
	{2411.5385,-2134.7575,13.9351,360.0},
	{1389.7467,-2695.9370,13.4163,135.0},
	{783.1359,-1601.8208,13.2576,270.0},
	{782.7205,-1619.3583,13.2652,90.0},
	{923.0841,-1361.7989,13.0324,180.0},
	{-2644.6818,1342.3250,6.8980,270.0},
	{1174.6599,-922.1939,43.1189,270.0},
	{1363.0209,-1288.3123,13.2839,180.0},
	{1363.2723,-1260.8228,13.0953,180.0},
	{2383.5627,-1927.9206,13.2435,360.0},
	{-2635.0932,1377.1693,6.8692,180.0},
	{-2513.1276,1209.6135,37.1506,270.0},
	{2396.6899,-1966.8122,13.2792,270.0},
	{2391.1135,-1500.6553,23.6354,270.0},
	{-2273.8679,921.3549,66.3095,360.0},
	{-2153.0778,953.6602,79.7270,180.0},
	{334.3586,-1789.3143,4.6717,180.0},
	{343.8038,-1808.9826,4.3090,180.0},
	{-2129.2915,787.6182,69.3346,90.0},
	{646.4998,-1771.6411,13.2904,360.0},
	{-2151.9523,395.9856,34.9394,180.0},
	{-2078.8027,265.4074,35.1671,270.0},
	{-2034.8333,178.8471,28.5681,270.0},
	{438.9431,-1625.4088,25.7950,360.0},
	{453.3895,-1494.3239,30.7917,360.0},
	{487.6469,-1516.2312,20.0235,180.0},
	{300.5775,-1490.8881,24.3747,225.0},
	{-2180.1323,41.8541,35.1716,270.0},
	{524.0590,-1375.0092,15.8231,180.0},
	{598.9130,-1519.1413,14.8213,180.0},
	{-2488.1333,-133.0335,25.3507,90.0},
	{-2499.5224,45.0666,25.2640,90.0},
	{-2636.7976,-55.4094,4.0630,360.0},
	{-2718.5114,-124.4794,4.3505,270.0},
	{736.8571,-1337.1550,13.3140,270.0},
	{856.7003,-1363.1851,13.4092,180.0},
	{888.1505,-1659.2727,13.3296,360.0},
	{879.1024,-1669.2559,13.3304,180.0},
	{-2134.1442,-453.9576,35.1478,90.0},
	{920.4440,-1823.0965,12.3451,90.0},
	{-1639.3900,-567.5056,13.9530,90.0},
	{-2265.1501,148.9553,34.8837,270.0},
	{1081.8947,-1629.9564,13.4063,90.0},
	{1014.7463,-1434.4586,13.3291,270.0},
	{492.6386,-1555.3513,17.1462,225.0},
	{2684.6000,-2019.0000,13.3000,360.0},
	{1096.0999,-1379.9000,13.3000,270.0},
	{-2743.6772,-303.1675,7.1421,45.0},
	{1182.2568,-1219.2407,18.4162,360.0},
	{1260.9978,-1187.1921,23.3558,180.0},
	{1331.9304,-1081.3898,24.9941,90.0},
	{1284.8754,-1525.5013,13.3451,270.0},
	{1279.1887,-1539.2032,13.3200,90.0},
	{1275.9119,-1646.7447,13.3273,270.0},
	{-2200.5998,-2503.3605,30.4213,315.0},
	{1239.7076,-1836.0000,13.1215,270.0},
	{1249.8491,-1836.0000,13.1196,270.0},
	{-2205.5234,-2439.3522,30.4223,45.0},
	{1479.9130,-1737.8813,13.2418,270.0},
	{1618.0411,-1891.1043,13.3277,360.0},
	{1623.7291,-1892.7233,13.3306,180.0},
	{-2079.6389,-2303.7983,30.3465,315.0},
	{1838.1904,-1871.3841,13.1702,360.0},
	{-1557.8568,-2741.5632,48.3480,135.0},
	{-16.7752,-2503.6228,36.4593,135.0},
	{1981.0780,-1986.3513,13.3275,360.0},
	{218.4485,-173.3023,1.3809,90.0},
	{199.5585,-155.4911,1.3826,360.0},
	{1984.7470,-2066.7775,13.1625,360.0},
	{1938.0565,-2086.8459,13.3429,270.0},
	{318.4840,-86.0587,2.0803,90.0},
	{-113.9555,-39.4382,2.9209,164.04},
	{115.3320,-217.1147,1.3028,90.0},
	{1560.5025,-2260.5456,13.3257,270.0},
	{1461.6943,-1505.1688,13.2540,360.0},
	{1426.4930,-1402.3170,13.1800,180.0},
	{1435.0644,-1325.6834,13.2580,270.0},
	{1513.9486,-1272.5690,14.2685,180.0},
	{1583.7561,-1338.7435,16.1895,360.0},
	{-2760.5156,-312.1838,7.1557,360.0},
	{-2766.6875,-281.2886,7.1613,180.0},
	{1430.2315,-1054.8554,22.8693,360.0},
	{1574.1168,-1036.7642,23.6151,135.0},
	{1617.6676,-1009.8662,23.6051,360.0},
	{1645.3188,-1036.5238,23.6026,360.0},
	{485.9421,-1467.4543,18.3153,157.68},
	{1770.4874,-1060.9886,23.6658,180.0},
	{-2781.4741,-281.6054,7.1515,180.0},
	{1653.1766,-1134.8994,23.6110,180.0},
	{1617.3746,-1132.8293,23.6117,90.0},
	{1803.4280,-1292.3829,13.3302,24.0},
	{1754.3009,-1476.8170,13.2402,270.0},
	{2229.2277,-1345.4033,23.6891,90.0},
	{2332.5683,-1362.4844,23.7297,360.0},
	{2384.1567,-1275.6325,23.9197,90.0},
	{2432.3149,-1226.0784,24.9941,17.98},
	{2426.9611,-1224.4157,25.0000,202.71},
	{2438.4309,-1321.6925,24.1224,270.0},
	{2612.9702,-1262.6970,48.2461,270.0},
	{2659.4528,-1428.4343,30.1790,270.0},
	{2659.7053,-1422.6743,30.1714,90.0},
	{2485.5312,-1556.1822,23.7478,180.0},
	{2478.7663,-1555.7005,23.7226,180.0},
	{2605.3967,-1365.8829,34.6460,360.0},
	{2754.7136,-1373.0252,40.1153,90.0},
	{2717.3662,-1468.0307,30.0893,360.0},
	{2816.7194,-1449.4284,15.9548,270.0},
	{2816.9936,-1441.5880,15.9544,90.0},
	{2681.9016,-1673.3879,9.1289,360.0},
	{2298.3535,-1633.7541,14.3849,90.0},
	{2297.9077,-1639.9464,14.4351,90.0},
	{2255.4045,-1664.5736,15.1303,74.68},
	{2234.1057,-1726.9385,13.1665,270.0},
	{2474.5104,-1755.9194,13.2522,270.0},
	{2501.8212,-1754.2794,13.1208,180.0},
	{2489.1560,-1952.6885,13.1365,180.0},
	{2495.4326,-1953.2922,13.1298,360.0},
	{2306.7167,-1989.6795,13.2638,180.0},
	{2056.1806,-1904.7751,13.2502,360.0},
	{2064.9870,-1919.1673,13.2503,180.0},
	{1886.4812,-2022.9338,13.0964,180.0},
	{1824.8975,-2019.8374,13.0874,270.0},
	{1942.1668,-1862.6424,13.2679,270.0},
	{1923.9409,-1795.5616,13.0876,90.0},
	{1807.0904,-1571.7120,13.1659,135.0},
	{1809.9016,-1676.0603,13.2421,180.0},
	{1809.6265,-1653.3402,13.2364,180.0},
	{1809.7055,-1660.3018,13.2379,180.0},
	{1974.8229,-1693.5488,15.6740,90.0},
	{1929.2253,-1584.6954,13.2700,180.0},
	{1731.9725,-1590.8958,13.1630,90.0},
	{1721.5776,-1589.2834,13.1526,90.0},
	{1695.1428,-1519.2667,13.1670,360.0},
	{1694.7080,-1501.7453,13.1674,360.0},
	{-2085.3740,-84.4512,35.3079,180.0},
	{2347.7061,-1234.4918,22.3131,90.0},
	{2326.6931,-1256.2512,22.3208,270.0},
	{-1977.5377,102.6829,27.4309,90.0},
	{-1977.5359,96.3867,27.4364,90.0},
	{-1648.6010,1307.6108,6.7729,135.0},
	{-1785.9229,1345.4612,6.9307,250.0},
	{-1815.9952,1298.2953,22.3051,90.0},
	{-1729.1760,1026.0479,44.8237,225.0},
	{-1826.4681,1093.9371,45.1827,270.0},
	{1231.0547,-1355.5045,13.1400,180.0},
	{1233.0264,-1380.9915,13.1493,00.00} 
	//{1760.10, -1837.79, 13.45, 165.0},
	//{1792.6820,-1876.4535,13.2299,360.0},
	//{1800.7518,-1845.6572,13.3255,180.0}
};

static const Float:FC_RandomCars[][] =
{
	// Fort Carson
	{-362.6333,1102.8447,19.3745,270.0},
	{-258.5293,1158.7963,19.3743,270.0},
	{-177.3759,1222.6570,19.3674,90.0},
	{-160.3601,1213.9285,19.3672,270.0},
	{-101.3720,1221.9023,19.3655,360.0},
	{-121.1560,1170.0565,19.2907,180.0},
	{-161.4145,1085.8942,19.3672,235.0},
	{-26.2096,1115.8677,19.3740,180.0},
	{0.9014,1084.2115,19.3747,270.0},
	{3.1547,1223.4331,18.9769,260.0},
	{-34.2648,1166.7000,19.0675,360.0},
	{-44.6747,1166.7000,19.1827,360.0},
	{9.0804,1165.3289,19.2230,180.0},
	{16.3834,1164.4833,19.2249,360.0},
	{55.7842,1163.0835,18.2891,315.0},
	{50.5197,1169.3936,18.2904,315.0},
	{165.4845,1189.2671,14.3827,180.0},
	{-157.2007,1184.3186,19.4854,180.0},
	{-304.6114,1011.7329,19.3371,90.0},
	{-149.7694,1184.3112,19.4874,180.0},
	{135.4283,1233.1764,20.4317,340.9671},
	{121.0547,1110.7269,13.3526,218.2276},
	{-83.0442,919.8645,20.7555,78.1083},
	{-96.9699,976.0428,19.5461,271.5172},
	{-174.3658,1011.1545,19.4853,90.0}
};*/

Public: Vehicle.OnGameModeInit()
{
	CreateNPCRecordVehicle();

	new vehicles = LoadVehicles();
	printf("  Load vehicles: %d.", vehicles);

	return CONTINUE;
	// Случайные машины
	/*for(new c, v, model; c < sizeof(RandomCars); c++)
	{
	    model = GetRandomModel();
		v = MyCreateVehicle(model, Arr4<RandomCars[c]>, -1, -1);
        // Закрыть все машины (кроме мотоциклов и транспорта без движка)
		if(IsVehicleWithEngine(v) && VehInfo[v][vModelType] != MTYPE_MOTO)
		{
			VehInfo[v][vLocked] = 1;
			UpdateVehicleParamsEx(v);
		}
	}
	// Случайные машины Форт Карсона
	new randveh[] = { 478, 543, 531, 462, 463, 468, 401, 404, 413, 418, 419, 479, 475, 505, 529, 540, 542, 549, 550, 561, 600 };
	for(new c, v, model; c < sizeof(FC_RandomCars); c++)
	{
	    model = randveh[random(sizeof(randveh))];
		v = MyCreateVehicle(model, Arr4<FC_RandomCars[c]>, -1, -1);
		if(IsVehicleWithEngine(v) && VehInfo[v][vModelType] != MTYPE_MOTO && VehInfo[v][vModelType] != MTYPE_NODOOR)
		{
			VehInfo[v][vLocked] = 1;
			UpdateVehicleParamsEx(v);
		}
	}*/
}

CMD:testtrain(playerid, params[])
{
	//new Float:Y = 7.5;
	/*new Float:Z = -0.85;
	for(new y = 0; y < 8; y++)
	{
		for(new x = 0; x < 4; x++)
		{
			AttachDynamicObjectToVehicle(
				CreateDynamicObject(3014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
				freightTrain[0], 
				0.9 - (x * 0.6), 7.5 - (y * 0.6), Z, 0.0, 0.0, 0.0);
		}
	}
	for(new y = 0; y < 8; y++)
	{
		for(new x = 0; x < 4; x++)
		{
			AttachDynamicObjectToVehicle(
				CreateDynamicObject(3014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
				freightTrain[0], 
				0.9 - (x * 0.6), -7.5 + (y * 0.6), Z, 0.0, 0.0, 0.0);
		}
	}*/

	//new result[1];
	//Inv.AddThing(TYPE_THROW, 0, THING_BOX2, 1, 0, result);
	//Inv.ThrowThing(result[0], 0.9, 7.5, -0.85);
	//Inv.CreateThrowThing(THING_BOX2, 0, result[0], 1, 0.9, 7.5, -0.85, freightTrain[0]);

	//new obj = CreateDynamicObject(3014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	//AttachDynamicObjectToVehicle(obj, freightTrain[0], 0.3, Y, Z, 0.0, 0.0, 0.0);
	//obj = CreateDynamicObject(3014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	//AttachDynamicObjectToVehicle(obj, freightTrain[0], -0.3, Y, Z, 0.0, 0.0, 0.0);
	//obj = CreateDynamicObject(3014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	//AttachDynamicObjectToVehicle(obj, freightTrain[0], 0.9, Y, Z, 0.0, 0.0, 0.0);
	//obj = CreateDynamicObject(3014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	//AttachDynamicObjectToVehicle(obj, freightTrain[0], -0.9, Y, Z, 0.0, 0.0, 0.0);
	//obj = CreateDynamicObject(3052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	//AttachDynamicObjectToVehicle(obj, freightTrain[0], 0.0, -7.5, -0.7, 0.0, 0.0, 0.0);
	return true;
}

CreateNPCRecordVehicle()
{
	// Поезда   (создаются всегда первыми)
	for(new i = 0; i < sizeof(TrainInfo); i++)
	{
        TrainInfo[i][trID] = MyCreateVehicle(TrainInfo[i][trVID], Arr4<TrainInfo[i][trPos]>, 1, 1);
        VehInfo[ TrainInfo[i][trID] ][vLocked] = 999;
        if(TrainInfo[i][trVID] == 537)
        {
        	freightTrain[0] = TrainInfo[i][trID] + 1;
        	freightTrain[1] = TrainInfo[i][trID] + 2;
        	freightTrain[2] = TrainInfo[i][trID] + 3;
        	VehInfo[ freightTrain[0] ][vLocked] = 999;
			VehInfo[ freightTrain[1] ][vLocked] = 999;
			VehInfo[ freightTrain[2] ][vLocked] = 999;
        }
        else
        {
	    #if defined _FCNPC_included
			VehInfo[ TrainInfo[i][trID] + 1 ][vLocked] = 999;
			VehInfo[ TrainInfo[i][trID] + 2 ][vLocked] = 999;
			VehInfo[ TrainInfo[i][trID] + 3 ][vLocked] = 999;
		#else
			CarInfo[ TrainInfo[i][trID] + 1 ][cOwnerID] = -1;
			CarInfo[ TrainInfo[i][trID] + 2 ][cOwnerID] = -1;
			CarInfo[ TrainInfo[i][trID] + 3 ][cOwnerID] = -1;
		#endif
        }
	}
	if(TrainInfo[0][trID] != 1)
	{
		printf("WARNING! Trains must be created first (ID 1-3), the current Id's': %d-%d", TrainInfo[0][trID], TrainInfo[0][trID] + 2);
	}
	else
	{
		print("  Trains successfully created");
	}

	// Автобусы для записи ботов (маршрут: Аэропорт ЛС - Джефферсон)
	/*BusVehicle[0] = MyCreateVehicle(418, 1188.3907,-1815.1123,13.7037, 0.0, 6, 6);
	BusVehicle[1] = MyCreateVehicle(418, 1188.3907,-1821.9747,13.7036, 0.0, 6, 6);
	BusVehicle[2] = MyCreateVehicle(418, 1188.3907,-1829.9794,13.7036, 0.0, 6, 6);
	BusVehicle[3] = MyCreateVehicle(418, 1188.3907,-1838.1414,13.7036, 0.0, 6, 6);
	for(new i = 0; i < sizeof(BusVehicle); i++)
	{
	    new vehicleid = BusVehicle[i];
		VehInfo[vehicleid][vLabel] = CreateDynamic3DTextLabel("Аэропорт ЛС - Джефферсон\nБесплатный", 0xFF8300FF, 0.0, 0.0, 1.5, 40.0, INVALID_PLAYER_ID, vehicleid, 1);
		VehInfo[vehicleid][vLights] = true;
		VehInfo[vehicleid][vRadio] = 1;
		CarInfo[vehicleid][cOwnerID] = -1;
		UpdateVehicleParamsEx(vehicleid);
	}*/
}

stock LoadVehicles()
{
	new Cache:result = mysql_query(g_SQL, "SELECT * FROM `cars`");
	new string[128], Panels, Doors, Lights, Tires,
		vehicles, id, vehid, type, ownerid, modelid, color1, color2,
		Float:X, Float:Y, Float:Z, Float:A, Float:health;
 	for(new r = 0; r < cache_num_rows(); r++)
    {
        if(vehicles >= MAX_VEHICLES)
        {
			printf("  ERROR! Constant MAX_VEHICLES(%d) is smaller then vehicles in database(%d)!", MAX_VEHICLES, cache_num_rows());
            break;
        }

        // Создание транспорта
        cache_get_value_name_int(r, "id", id);
        cache_get_value_name_int(r, "type", type);
        cache_get_value_name_int(r, "ownerid", ownerid);
        cache_get_value_name_int(r, "model", modelid);
		cache_get_value_name_float(r, "X", X);
        cache_get_value_name_float(r, "Y", Y);
        cache_get_value_name_float(r, "Z", Z);
        cache_get_value_name_float(r, "A", A);
        cache_get_value_name_int(r, "color1", color1);
       	cache_get_value_name_int(r, "color2", color2);

        vehid = MyCreateVehicle(modelid, X, Y, Z, A, color1, color2, -1);
        // Запись в соотв ячейку массива
        // Аналог записи используется в DMODE_FINEPARK (!)
		CarInfo[vehid][cID] 		= id;
		CarInfo[vehid][cType] 		= type;
		CarInfo[vehid][cOwnerID] 	= ownerid;
		//CarInfo[vehid][cModel] 		= modelid;
		CarInfo[vehid][cX] 			= X;
		CarInfo[vehid][cY] 			= Y;
		CarInfo[vehid][cZ] 			= Z;
		CarInfo[vehid][cA] 			= A;
		//CarInfo[vehid][cColor1] 	= color1;
		//CarInfo[vehid][cColor2] 	= color2;

		cache_get_value_name_int(r,		"rent_price",	VehInfo[vehid][vRentPrice]);
		cache_get_value_name(r, 		"plate",		CarInfo[vehid][cPlate], 10);
		cache_get_value_name_float(r,	"health",		health);

        switch(CarInfo[vehid][cType])
        {
        	case C_TYPE_DEFAULT:
        	{
        		if(CarInfo[vehid][cOwnerID] == INVALID_PLAYER_ID)
        		{
        			VehInfo[vehid][vLocked] = 1;
        		}
        	}
        	case C_TYPE_PLAYER:
        	{
        		if(X == 0.0 && Y == 0.0)
		        {	// На штраф стоянку
					format(string, 128, "UPDATE `cars` SET `fine_park` = '1' WHERE `id` = '%d'", id);
					mysql_query_ex(string);
		            continue;
		        }
        		cache_get_value_index_int(r, 11, CarInfo[vehid][cPaintJob]);
				cache_get_value_index_int(r, 12, CarInfo[vehid][cSpoiler]);
				cache_get_value_index_int(r, 13, CarInfo[vehid][cHood]);
				cache_get_value_index_int(r, 14, CarInfo[vehid][cRoof]);
				cache_get_value_index_int(r, 15, CarInfo[vehid][cSideskirt]);
				cache_get_value_index_int(r, 16, CarInfo[vehid][cNitro]);
				cache_get_value_index_int(r, 17, CarInfo[vehid][cLamps]);
				cache_get_value_index_int(r, 18, CarInfo[vehid][cExhaust]);
				cache_get_value_index_int(r, 19, CarInfo[vehid][cWheels]);
				cache_get_value_index_int(r, 20, CarInfo[vehid][cHydraulics]);
				cache_get_value_index_int(r, 21, CarInfo[vehid][cFrontBumper]);
				cache_get_value_index_int(r, 22, CarInfo[vehid][cRearBumper]);
				cache_get_value_index_int(r, 23, CarInfo[vehid][cVentR]);
				cache_get_value_index_int(r, 24, CarInfo[vehid][cVentL]);
				cache_get_value_index_int(r, 25, CarInfo[vehid][cNeon]);
				cache_get_value_index_int(r, 26, CarInfo[vehid][cFlash]);
				cache_get_value_index_float(r, 27, CarInfo[vehid][cMileage]);
				cache_get_value_index_int(r, 28, Panels);
				cache_get_value_index_int(r, 29, Doors);
				cache_get_value_index_int(r, 30, Lights);
				cache_get_value_index_int(r, 31, Tires);
				cache_get_value_index_float(r, 33, VehInfo[vehid][vFuel]);

				UpdateVehicleDamageStatus(vehid, Panels, Doors, Lights, Tires);
				
				if(health < 400.0) health = 400.0;
				MySetVehicleHealth(vehid, health);

				if(CarInfo[vehid][cNeon])	AttachNeons(vehid, CarInfo[vehid][cNeon] - 1);
				VehInfo[vehid][vLocked] = 1;
        	}
        	case C_TYPE_FACTION:
        	{

        	}
	    	case C_TYPE_JOB:
	    	{
	    		if(CarInfo[vehid][cOwnerID] == JOB_MECHANIC)
	    		{
	    			VehInfo[vehid][vLabel] = CreateDynamic3DTextLabel(" ", COLOR_LIGHTPINK, 0.0, -2.0, 1.5, 25.0, INVALID_PLAYER_ID, vehid, 1);
				    AttachDynamicObjectToVehicle(
				    	CreateDynamicObject(19803, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
				    	vehid, 0.0724, 0.0, -0.003, 0.0, 0.0, 0.0);
	    		}

	    	}
	    	case C_TYPE_PARTJOB:
	    	{
	    		if(CarInfo[vehid][cOwnerID] == PART_DELIVERY)
	    		{
	    			VehInfo[vehid][vLabel] = CreateDynamic3DTextLabel(" ", COLOR_LIGHTPINK, 0.0, 0.0, 1.5, 25.0, INVALID_PLAYER_ID, vehid, 1);
	    		}
	    	}
        	case C_TYPE_RENT:
        	{
        		if(CarInfo[vehid][cOwnerID] == -1)
        		{
        			VehInfo[vehid][vLabel] = CreateDynamic3DTextLabel(" ", COLOR_LIGHTYELLOW, 0.0, 0.0, 1.5, 25.0, INVALID_PLAYER_ID, vehid, 1);
        		}
        	}
        }
        UpdateVehicleLabel(vehid);
        UpdateVehicleParamsEx(vehid);
        SetVehicleNumberPlate(vehid, CarInfo[vehid][cPlate]);
		MySetVehicleToRespawn(vehid);	// -> OnVehicleSpawn -> Update Tuning.
		vehicles++;
    }
	cache_delete(result);
	return vehicles;
}

stock UpdateVehicleStatics(idx)
{
	if(CarInfo[idx][cID] > 0)
	{
		if(CarInfo[idx][cType] != C_TYPE_PLAYER)
		{
			return false;
		}
		new string[1920],
			Float:Health,
			Panels, Doors, Lights, Tires;

	    GetVehicleHealth(idx, Health);
		GetVehicleDamageStatus(idx, Panels, Doors, Lights, Tires);

		format(string, sizeof(string), "UPDATE `cars` SET ");
		format(string, sizeof(string), "%s`type` = '%d'", string, CarInfo[idx][cType]);
		format(string, sizeof(string), "%s, `ownerid` = '%d'", string, CarInfo[idx][cOwnerID]);
		format(string, sizeof(string), "%s, `model` = '%d'", string, CarInfo[idx][cModel]);
		format(string, sizeof(string), "%s, `plate` = '%s'", string, CarInfo[idx][cPlate]);
		format(string, sizeof(string), "%s, `X` = '%0.4f'", string, CarInfo[idx][cX]);
		format(string, sizeof(string), "%s, `Y` = '%0.4f'", string, CarInfo[idx][cY]);
		format(string, sizeof(string), "%s, `Z` = '%0.4f'", string, CarInfo[idx][cZ]);
		format(string, sizeof(string), "%s, `A` = '%0.4f'", string, CarInfo[idx][cA]);
		format(string, sizeof(string), "%s, `color1` = '%d'", string, CarInfo[idx][cColor1]);
		format(string, sizeof(string), "%s, `color2` = '%d'", string, CarInfo[idx][cColor2]);
		format(string, sizeof(string), "%s, `paintjob` = '%d'", string, CarInfo[idx][cPaintJob]);
		format(string, sizeof(string), "%s, `spoiler` = '%d'", string, CarInfo[idx][cSpoiler]);
		format(string, sizeof(string), "%s, `hood` = '%d'", string, CarInfo[idx][cHood]);
		format(string, sizeof(string), "%s, `roof` = '%d'", string, CarInfo[idx][cRoof]);
		format(string, sizeof(string), "%s, `sideskirt` = '%d'", string, CarInfo[idx][cSideskirt]);
		format(string, sizeof(string), "%s, `nitro` = '%d'", string, CarInfo[idx][cNitro]);
		format(string, sizeof(string), "%s, `lamps` = '%d'", string, CarInfo[idx][cLamps]);
		format(string, sizeof(string), "%s, `exhaust` = '%d'", string, CarInfo[idx][cExhaust]);
		format(string, sizeof(string), "%s, `wheels` = '%d'", string, CarInfo[idx][cWheels]);
		format(string, sizeof(string), "%s, `hydraulics` = '%d'", string, CarInfo[idx][cHydraulics]);
		format(string, sizeof(string), "%s, `frontbumper` = '%d'", string, CarInfo[idx][cFrontBumper]);
		format(string, sizeof(string), "%s, `rearbumper` = '%d'", string, CarInfo[idx][cRearBumper]);
		format(string, sizeof(string), "%s, `ventr` = '%d'", string, CarInfo[idx][cVentR]);
		format(string, sizeof(string), "%s, `ventl` = '%d'", string, CarInfo[idx][cVentL]);
		format(string, sizeof(string), "%s, `neon` = '%d'", string, CarInfo[idx][cNeon]);
		format(string, sizeof(string), "%s, `flash` = '%d'", string, CarInfo[idx][cFlash]);
		format(string, sizeof(string), "%s, `mileage` = '%0.1f'", string, CarInfo[idx][cMileage]);
		format(string, sizeof(string), "%s, `dmg_panel` = '%d'", string, Panels);
		format(string, sizeof(string), "%s, `dmg_door` = '%d'", string, Doors);
		format(string, sizeof(string), "%s, `dmg_light` = '%d'", string, Lights);
		format(string, sizeof(string), "%s, `dmg_tire` = '%d'", string, Tires);
		format(string, sizeof(string), "%s, `health` = '%0.1f'", string, Health);
		format(string, sizeof(string), "%s, `fuel` = '%0.2f'", string, VehInfo[idx][vFuel]);
		format(string, sizeof(string), "%s WHERE `id` = '%d'", string, CarInfo[idx][cID]);
		mysql_query_ex(string);
	}
	return true;
}

test_CreateCarsRecords()
{
	foreach(Vehicle, idx)
	{
		new string[1920],
			Float:Health,
			Panels, Doors, Lights, Tires;

	    GetVehicleHealth(idx, Health);
		GetVehicleDamageStatus(idx, Panels, Doors, Lights, Tires);

		format(string, sizeof(string), "INSERT INTO `cars` SET");
		format(string, sizeof(string), "%s `type` = '%d'", string, CarInfo[idx][cType]);
		format(string, sizeof(string), "%s, `ownerid` = '%d'", string, CarInfo[idx][cOwnerID]);
		format(string, sizeof(string), "%s, `model` = '%d'", string, CarInfo[idx][cModel]);
		format(string, sizeof(string), "%s, `plate` = '%s'", string, CarInfo[idx][cPlate]);
		format(string, sizeof(string), "%s, `X` = '%0.4f'", string, CarInfo[idx][cX]);
		format(string, sizeof(string), "%s, `Y` = '%0.4f'", string, CarInfo[idx][cY]);
		format(string, sizeof(string), "%s, `Z` = '%0.4f'", string, CarInfo[idx][cZ]);
		format(string, sizeof(string), "%s, `A` = '%0.4f'", string, CarInfo[idx][cA]);
		format(string, sizeof(string), "%s, `color1` = '%d'", string, CarInfo[idx][cColor1]);
		format(string, sizeof(string), "%s, `color2` = '%d'", string, CarInfo[idx][cColor2]);
		format(string, sizeof(string), "%s, `rank` = '%d'", string, CarInfo[idx][cRank]);
		format(string, sizeof(string), "%s, `rent_price` = '%d'", string, VehInfo[idx][vRentPrice]);
		format(string, sizeof(string), "%s, `mileage` = '%0.1f'", string, CarInfo[idx][cMileage]);
		mysql_query_ex(string);
		//UpdateVehicleStatics(idx);
	}
}

CMD:test192(playerid, params[])
{
	test_CreateCarsRecords();
	return true;
}

/*CMD:test193(playerid, params[])
{
	new string[512];
	for(new c; c < sizeof(RandomCars); c++)
	{
		format(string, sizeof(string), "INSERT INTO `cars` SET");
		format(string, sizeof(string), "%s `type` = '%d'", string, C_TYPE_DEFAULT);
		format(string, sizeof(string), "%s, `ownerid` = '%d'", string, INVALID_PLAYER_ID);
		format(string, sizeof(string), "%s, `model` = '-1'", string);
		format(string, sizeof(string), "%s, `X` = '%0.4f', `Y` = '%0.4f', `Z` = '%0.4f', `A` = '%0.4f'", string, Arr4<RandomCars[c]>);
		format(string, sizeof(string), "%s, `color1` = '-1'", string);
		format(string, sizeof(string), "%s, `color2` = '-1'", string);
		format(string, sizeof(string), "%s, `mileage` = '-1.0'", string);
		mysql_query_ex(string);
	}
	return true;
}*/